---
apiVersion: v1
kind: Namespace
metadata:
  name: kad
  labels:
    app: kad
---
apiVersion: v1
kind: Service
metadata:
  name: kad
  namespace: kad
spec:
  type: NodePort
  selector:
    app: kad
  ports:
  - protocol: TCP
    targetPort: 5000
    port: 80
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: kad
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 6379
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kad
  namespace: kad
data:
  config.yml: |
    abc: 123
    password: datascript
  color: white
---
apiVersion: v1
kind: Secret
metadata:
  name: credentials
  namespace: kad
type: Opaque
data:
  username: YWRtaW4=
  password: d29ya3Nob3BTRA==
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kad
  namespace: kad
  # finalizers:
  #- 6shore.net/kad-manual
spec:
  replicas: 1
  # strategy:
  #   type: Recreate
  selector:
    matchLabels:
      app: kad
  template:
    metadata:
      labels:
        app: kad
    spec:
      initContainers:
      - name: init-file
        image: docker.io/debian
        command: ["bash", "-c", "ls"]
      #   volumeMounts:
      #   - name: data-storages
      #     mountPath: /data/
      terminationGracePeriodSeconds: 1800
      containers:
      - name: app
        image: docker.io/tomkukral/kad
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command: ["sh", "-c", "date > /tmp/started"]
          preStop:
            httpGet:
              path: "/action/token-invalidate"
              port: 5001
        resources:
          requests:
            cpu: 100m
            # memory: 12Mi
          limits:
            cpu: 200m
            memory: 12Mi
        livenessProbe:
          httpGet:
            path: /check/live
            port: 5000
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /check/ready
            port: 5001
          periodSeconds: 5
        ports:
        - containerPort: 5000
        command: ["/bin/kad", "--color", "$(COLOR)"]
        
        env:
        # static configuration from yaml
        - name: REDIS_SERVER
          value: redis:6379
        # configuration from downward API
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        # variable form configmap
        - name: COLOR
          valueFrom:
            configMapKeyRef:
              name: kad
              key: color
        # variables from secret
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: credentials
              key: username
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: credentials
              key: password
        volumeMounts:
        - name: config
          mountPath: /etc/kad/
        # - name: data-storage
          # mountPath: /data/
      volumes:
      # - name: data-storage
      #   emptyDir:
        #persistentVolumeClaim:
        #  claimName: kad-data
      - name: config
        configMap:
          name: kad
          items:
          - key: config.yml
            path: config.yml
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: kad
spec:
  selector:
    matchLabels:
      app: redis
  serviceName: redis
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: docker.io/redis
        ports:
        - containerPort: 6379