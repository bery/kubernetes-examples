---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVBUL3MvTGtwRFZ0L0tJMUFaNkhReWd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl5T0ZvWERUSTJNVEV3TmpJeQpNakl5T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF6MkJhVitQdmZzMllrYm00cEg1MGtnMkpCbVZTcHRtbnZvb3Q2SkxLbWZ6VDB2NG8KTno2SFJ2N2Mza0gwMTcrKzV1UUcvMDRNdGJQUlNIRzNhWXhZY2RRaWJ6MTNndWZHc1lDZWxXRkMzL3dvV1JrRQovVXdWakdlNVk4bW90TEhhTWlZYjNzeklPM0M5QThmMXYvU1F4TUMrcjZ6RlJuQ3hJL0F2RjdzYm00VzVaZW5PClBHL3cwQ1dxRkRjemN0VUFQeTdFN2RaenB6NWNjaHY0c3RlRDFrS1krYXVCT2RFU0d1WnJiYy9nb1JpOG9wKzIKMnp4Q0xIVGx6MWhCOHB5ZDdnQkZaelQ3U0lON21VMHkvRFJ5K1dlOFJoRjVjQk5nQnBUM0hIaVN6bU41Rm1BegpiTjFZT2xWRDh5K0lMano3dExiTHdaYVU4WHlRRFJNZFc5Z0t1UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQXJPOWdoYTc1NHNobVNwdVBZTVFIWDRmd3ZZTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2lISEpFL3BoUm9JMHlGZFBGYTk5OG1ET2FXUE9tdVdYdFJuZjVialliZDM4ZFhoQmNxMFJFCncyMkord2UxN0JDdWU3OEYrK1JoNml4RFJxMGZvRFRxSW9aWHpqWVB3R2dsSXpwNXVoSUtGWjBEdktMeUQraC8KV3VOa1lpNXplc1BzdDA4Z2Y3cDc3OGl6UlFkcGFFZkljL3N0dkNwcm5YN3NXRVhkTUdlKzJSWFU3K01rWktFUwpFaXhKbDlUVFE2V3diK2ZsV3pKT0NlTkZsc1pqRUtFQjNYNVVSRmRJMmhGb0R6eTJFVDcvZzJ3ZC9LM3Y2VHlDCmtUMk8zOThsMGlRM1A0aDQ1SXpyZ0E0ZDExZjdQa0hCY3dVMU5rUnZhSzhNT3lsNllvVlVSUVE5eVc3ZEFNdDEKSVNkbitWZ05uV1JTU0J4V2tPN09vSjNSV1VGT1hXbzcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBejJCYVYrUHZmczJZa2JtNHBINTBrZzJKQm1WU3B0bW52b290NkpMS21melQwdjRvCk56NkhSdjdjM2tIMDE3Kys1dVFHLzA0TXRiUFJTSEczYVl4WWNkUWliejEzZ3VmR3NZQ2VsV0ZDMy93b1dSa0UKL1V3VmpHZTVZOG1vdExIYU1pWWIzc3pJTzNDOUE4ZjF2L1NReE1DK3I2ekZSbkN4SS9BdkY3c2JtNFc1WmVuTwpQRy93MENXcUZEY3pjdFVBUHk3RTdkWnpwejVjY2h2NHN0ZUQxa0tZK2F1Qk9kRVNHdVpyYmMvZ29SaThvcCsyCjJ6eENMSFRsejFoQjhweWQ3Z0JGWnpUN1NJTjdtVTB5L0RSeStXZThSaEY1Y0JOZ0JwVDNISGlTem1ONUZtQXoKYk4xWU9sVkQ4eStJTGp6N3RMYkx3WmFVOFh5UURSTWRXOWdLdVFJREFRQUJBb0lCQUYrYUZ1d3YyNmhFbGhLUQpZU3dNVkNkRThDZXZyR1BaTWJqb3NQTm9RTml1c3VTeFlNN2ZGN1JHS0lLYU80ci9EYjRaMzVQeFluQ2QvbHg4CmVFYkRlYjY0UWt1d05abDJ5cVhvR3JQWkMrQ0F1Z1VoUUtpWlc5SEh1N0xpTTlGaHNLcXY0T2RjMXU1NE1kczkKWXZEa2laejdFcTJnWTYzdW8rdGlmZ05kc2dPRzFGbmpYUzFKaWNJUTcyUE5aMGRpRDBra2RqMG9HUHpWdjFTSApMdzE4K1BUbEYzUlNOSWVYTTZvR2Y0SHVtS1g3UCtLaVpSaFJ1eHVudExJMDlJUTZlTnZHVGlITURrcEVUdXRXCk5UZFRPcE5RVC90TnNOSlFhaE1DOTVXM0t4Y2hQSXloS3gveCtBSjBZSmNkbXR0RHVHRGgrOWpNVkcvRmlSRVMKUThTWEhnRUNnWUVBMCtBcGUrTEZYeTZRdjdmMzh5NnBmNEI4TVk1c0l4c3ExaXRSTVdnbzVxbi85VC9Vc0JsWAorcUxBYk00eXVWQ2lZR0Vsdzd3TmhVcXgrMXB5akxBYnBWeGd5aEpkVlM2bENOdXd0bGFiVEM1N0h4eUtmMk0zCkJxbUtqYjBTTDFRQi9jOXNqelhUT2piQUlSeGdhY3dvWXQ2WWMxMFo0VXBrU0x5VmFnUURLWGtDZ1lFQStwQlIKMlE5S2lzRWF3UHp4VEJJOEVoNFF0WnVKdjdjOXFRT2pTZC9rKzRnQjVzdkw4blFkTGxZazZmelg1S2FrMUJGQworbUNVZXVYanIrWTJSZmk0TUozbU14MGFzQmFUaHQ0U0tGd1V5djFkcys3UnhMWXBSaE1yMHlNelBOaW90Yk5wCkprYjZEVy9YVFg5U1p2dDlxSzlCNnY5S1huOFgzV0N1TWFNUTIwRUNnWUJFd1NKVkhHSzJIM05EYzV5WG9wWEkKVlZaMzhtS3ZCYnJoNHc2bS9Na0JDVHVSUjFScWpON2E2NE9NQzJHMGR6RXFHM3hZeHlhUUVZd3VKOHl5VU5lMwowb0ZxTVlsdUFnUDJHdXgrVHg1NEcwRkMrRTBOUjVIc3JJblVzdjA2dElVczZ1bXNrMmZuSlNzMTAzS0tBb0U4CmpFVm1jbGphbmZ4ckNoOW1Wc1Q3NlFLQmdGYnh2MFQzbG1FaGNyd215VUFoVDdEbHQ5eWN0U2JPV2RvTkJoczcKVXNTcFJDZW03Z1VhbjRtVm9NZUUwaEZvZGVlVWVjNVJ0eFFTTTNpMUJINHhPUkM5cWNSd3cvTDRVb2JKQmpuMQpBYzRTTHZLaDJ5NU1HM1JTY0xHYUZFeDN6Y3NIRDJTVjJtelJNeitULzY3MmMzc1dIV1NDNDNaNDJYb2E4emNNCkkyeEJBb0dBQ1hrN1ZvSkovMTQxakpXR3k4aW9CU3J5VS9jbHhsTFFhbVhSWldacXZIa1RqdGhBdngvblZYaHMKcnBPM1JXdkxXTDhCNmRxdXhEVDlTeFhZSEtseUIzQWRJNi9kUnlFKzBFY25lVUJIV0t2Z3E3VEdhOWxoZk1uOApJNGNPRVdQUXRRN1k1Z2Vabk45eDdtd3dIaGF0MEpnUnAxSDZNcHJBZCsxelNSeStWcTg9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVBUL3MvTGtwRFZ0L0tJMUFaNkhReWd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl5T0ZvWERUSTJNVEV3TmpJeQpNakl5T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF6MkJhVitQdmZzMllrYm00cEg1MGtnMkpCbVZTcHRtbnZvb3Q2SkxLbWZ6VDB2NG8KTno2SFJ2N2Mza0gwMTcrKzV1UUcvMDRNdGJQUlNIRzNhWXhZY2RRaWJ6MTNndWZHc1lDZWxXRkMzL3dvV1JrRQovVXdWakdlNVk4bW90TEhhTWlZYjNzeklPM0M5QThmMXYvU1F4TUMrcjZ6RlJuQ3hJL0F2RjdzYm00VzVaZW5PClBHL3cwQ1dxRkRjemN0VUFQeTdFN2RaenB6NWNjaHY0c3RlRDFrS1krYXVCT2RFU0d1WnJiYy9nb1JpOG9wKzIKMnp4Q0xIVGx6MWhCOHB5ZDdnQkZaelQ3U0lON21VMHkvRFJ5K1dlOFJoRjVjQk5nQnBUM0hIaVN6bU41Rm1BegpiTjFZT2xWRDh5K0lMano3dExiTHdaYVU4WHlRRFJNZFc5Z0t1UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQXJPOWdoYTc1NHNobVNwdVBZTVFIWDRmd3ZZTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2lISEpFL3BoUm9JMHlGZFBGYTk5OG1ET2FXUE9tdVdYdFJuZjVialliZDM4ZFhoQmNxMFJFCncyMkord2UxN0JDdWU3OEYrK1JoNml4RFJxMGZvRFRxSW9aWHpqWVB3R2dsSXpwNXVoSUtGWjBEdktMeUQraC8KV3VOa1lpNXplc1BzdDA4Z2Y3cDc3OGl6UlFkcGFFZkljL3N0dkNwcm5YN3NXRVhkTUdlKzJSWFU3K01rWktFUwpFaXhKbDlUVFE2V3diK2ZsV3pKT0NlTkZsc1pqRUtFQjNYNVVSRmRJMmhGb0R6eTJFVDcvZzJ3ZC9LM3Y2VHlDCmtUMk8zOThsMGlRM1A0aDQ1SXpyZ0E0ZDExZjdQa0hCY3dVMU5rUnZhSzhNT3lsNllvVlVSUVE5eVc3ZEFNdDEKSVNkbitWZ05uV1JTU0J4V2tPN09vSjNSV1VGT1hXbzcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lSQUpJVFVrWkkra2tBTkxpQWR3S0lKSm93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl5T0ZvWERUSTJNVEV3TmpJeQpNakl5T0Zvd0V6RVJNQThHQTFVRUF4TUlZV1J0YVc0dFl6QXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQ3FnM1p3aDgwblVYZlFXU1JqZlFzNGVYVEFPN05hMkpuN2ZJeDdVMkxjeUc5S0FkbFYKM293Z2RHMVE3VjhBcDJmRGs4Tm01RisyNGtVdTBQRVB2MVo4UXFRUHc2VFhUQ1NiWEJOOVFRU0xBVG1pUGlpUgoyK3A5YmlrbU91UTBmR0FUNG85Nm1GTXdsTFRLZ1l1NkJaa294U00yaFI3VlltUHc0aENNL0lNbHBuajhlQ1BGClNNaWtsdWZmOFduU284dVk0RDdrUVc5VHZXVTNKZmZ4YkNFbkVUTzEyRWlOa204eW5nLzl0NzVJQkJLWUlBSW0KUU1FazJqdUhudTVNdzhTQUlhNDJ1M2JPc3ROclF1bDM4eXZPeUV5ekZhYnB6SkJDZU1tbG9ITjd4T0tXOEpWSwpYOWdaeHhzcWx6U3BydlY5MUM0THdNL0EwQUNrY3g5STBsNDFBZ01CQUFHamRqQjBNQTRHQTFVZER3RUIvd1FFCkF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXcKQURBZkJnTlZIU01FR0RBV2dCUUt6dllJV3UrZUxJWmtxYmoyREVCMStIOEwyREFVQmdOVkhSRUVEVEFMZ2dscwpiMk5oYkdodmMzUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRktQVVpHYUZWc2hJUnRyZW1zdEJub29DT3pHCk5QZ0pobTEyRklYYTYraVVpSllJVEJxSnFESUZEazlvMk9rd2FrQkN5MUEvb3dpZUgwTUlkQ0ZKamJqSis5TWMKZE5TM3hPcGk0Zkw4V2ZBVHN4R1JsQmQ1elNjdWRLcy90QUVONnlkY3hkai9mRTErbTRQc2NuRmdLVDNmT2FGKwpKT1lIU2dUSU5JRGt2OURrU1dnUnJVUm5lUXI5ZU1MYk9SbzVVN2JBSDc1MXlvVW1IVG92UGNjbGhyMjh2dDUzCmNCeU10TEdsTmY1SUhOOWtjRGYzY2NrV1E2dFU2ekF2dktRdUVsTlpVaW91Y2FPeUpxdCtzNC9LWE9FejNPNEsKMS9BMEFxd3hvSjdONnhXVjB5NHcreUxzV1BNMTlMUUJXeStzeDd5RTlyc1E1RWd6NXo2VjNRRTY3UEk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcW9OMmNJZk5KMUYzMEZra1kzMExPSGwwd0R1eld0aVorM3lNZTFOaTNNaHZTZ0haClZkNk1JSFJ0VU8xZkFLZG53NVBEWnVSZnR1SkZMdER4RDc5V2ZFS2tEOE9rMTB3a20xd1RmVUVFaXdFNW9qNG8Ka2R2cWZXNHBKanJrTkh4Z0UrS1BlcGhUTUpTMHlvR0x1Z1daS01Vak5vVWUxV0pqOE9JUWpQeURKYVo0L0hnagp4VWpJcEpibjMvRnAwcVBMbU9BKzVFRnZVNzFsTnlYMzhXd2hKeEV6dGRoSWpaSnZNcDRQL2JlK1NBUVNtQ0FDCkprREJKTm83aDU3dVRNUEVnQ0d1TnJ0MnpyTFRhMExwZC9NcnpzaE1zeFdtNmN5UVFuakpwYUJ6ZThUaWx2Q1YKU2wvWUdjY2JLcGMwcWE3MWZkUXVDOERQd05BQXBITWZTTkplTlFJREFRQUJBb0lCQUI5V3JCVUFrSThTWlEvdwo0a1E2dmk0eC9HZzhVTGw0cDh4VjFzZnZ5bkxEajlpdFFGR001bm9zaTg3YzRhSVFJbjBLa2xZOTBPMmU1cEkxCktxajNSS0R2NnBGUEp1Ty9CZGRiOCtVSVp4cFpMa3VJV3hKN3RidzUyK3cvMUtOazNJK3JDeTNBQTBJaGdweloKZEdITEY1d3JwMDRrNTBiV240R3RPdGQrcldma3hQTEszeEpOWHM2ODhxSVV1OHgwdVFaWnlaWHhNRThmTXhiRgphMnRpbXI4UDQ2b005N3FRS3JBS2NReHZEQWlubHFTekE4bGc0aTRsYU9qSkFEL08wZkNMYTY3cDFjUmJTdG05CjJsWWVaSXpKUGpZNTZlaFFtWUdUMzQ1Q2xrNjF5RFdnL2RtUXZNMkJiRjRINm1abXdHSDFDR1JRT0tJTUNrZEQKN2NSaEN3RUNnWUVBMWsrTWc4NHlwd1dVUmJLamFoejRaM0JBNHZ1YTFabTJEalpETS9vYmR6UHp4Q04wd1BCLwo0ZnJYZElwK3N5YUdNcXVlb0ZoczV3OEZXdmRRazVDTFdWdTJBM2VKZkttQ2RpZlBEYi9EN2pJSmpJY1ZuWUovClVWZ2g4WXJNU3hNNUhZczNMYkZqSkJkbzViMDRhUTU4VzQ3Q08xVHRYVGd0WHJLaGZ4RWFTTUVDZ1lFQXk2N2IKdXVQTXpkRFZnUkF0N2dCWCsxV09nWmprQktXb0tWOWVYMkIwMEVGOElHZEFjZGFzQ2orakRFbk1KclFBUW1nMQpkQ2ltdldScU9hMFFhNjJ1Y2YvYlRyWW13eEt5YnFDQjNONG1Od1VWWnRxbzZrMzZWdEpydTlBNXQ0WW1mM1BpClRzaGtPTWFJd3R4SmVBSkx1a25BSXEwZkREYUtHVmRNOEZEb25uVUNnWUJDVklTdEZ0amVrUDkvUXZjSkZNWmQKWFlUM3UrQUVWSHJna3pMaGwzdUF2WGVwTVVBbHAwb3RhekhjUkRGS3laV25nUzZyZWpMYW9PK0xaQmh3VThDTgplN0V1Q1lWb0xCN1E2eWxPbkJmTVZYaFhJa2d5WS8xNzg4Y3R0MFBieUt0WTFZblNmcUNzdndJY2VTQklnODlCCmwwSE9rMDZVRjVzVFFENXowWnROQVFLQmdCWDZxSHRpV1pkY0VhMzdzUGtkMEdDdXV0SUJUWm15eHBLd1Y5NnkKNmVnUEtQWFdMbjRhVERaTzU2bEx6VnZmMEtkWjEyclJlQ3kzeVQ2d0RqV1FhR0trMldXRkFtbktlcmExVzA0YQpLc1dGSnVvU2JtZmFRa2xjSzRQNDFFR1ptRTNvazJNcy9LT2p5TjQrSnk5c0QvL3FOWEdJZlBFMGNYS0ttU0xWCm1FU0JBb0dCQUxrWWFIRWRJTnZHVVVJcHFMaU81d01Zd1BuL1pBNHhZRnd0ZXhQSlFqcTZiVERxUG5SdWtoUGEKV3NITXV3bXY0dzhNc05GMy9yUkpPSStOV0VnUk9icWY4MHVacnM1OTZjZWhhalIrRkh0a1BkaFV0UG9wVmltMAoxNll0SzlZeDBFTnM5Q1lDNEdPTkJJKzRjWVJVRkhnSk5VY0tuL1hYYzg0c1RjU2hLMllUCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-ca-cert
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVBUL3MvTGtwRFZ0L0tJMUFaNkhReWd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl5T0ZvWERUSTJNVEV3TmpJeQpNakl5T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF6MkJhVitQdmZzMllrYm00cEg1MGtnMkpCbVZTcHRtbnZvb3Q2SkxLbWZ6VDB2NG8KTno2SFJ2N2Mza0gwMTcrKzV1UUcvMDRNdGJQUlNIRzNhWXhZY2RRaWJ6MTNndWZHc1lDZWxXRkMzL3dvV1JrRQovVXdWakdlNVk4bW90TEhhTWlZYjNzeklPM0M5QThmMXYvU1F4TUMrcjZ6RlJuQ3hJL0F2RjdzYm00VzVaZW5PClBHL3cwQ1dxRkRjemN0VUFQeTdFN2RaenB6NWNjaHY0c3RlRDFrS1krYXVCT2RFU0d1WnJiYy9nb1JpOG9wKzIKMnp4Q0xIVGx6MWhCOHB5ZDdnQkZaelQ3U0lON21VMHkvRFJ5K1dlOFJoRjVjQk5nQnBUM0hIaVN6bU41Rm1BegpiTjFZT2xWRDh5K0lMano3dExiTHdaYVU4WHlRRFJNZFc5Z0t1UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQXJPOWdoYTc1NHNobVNwdVBZTVFIWDRmd3ZZTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2lISEpFL3BoUm9JMHlGZFBGYTk5OG1ET2FXUE9tdVdYdFJuZjVialliZDM4ZFhoQmNxMFJFCncyMkord2UxN0JDdWU3OEYrK1JoNml4RFJxMGZvRFRxSW9aWHpqWVB3R2dsSXpwNXVoSUtGWjBEdktMeUQraC8KV3VOa1lpNXplc1BzdDA4Z2Y3cDc3OGl6UlFkcGFFZkljL3N0dkNwcm5YN3NXRVhkTUdlKzJSWFU3K01rWktFUwpFaXhKbDlUVFE2V3diK2ZsV3pKT0NlTkZsc1pqRUtFQjNYNVVSRmRJMmhGb0R6eTJFVDcvZzJ3ZC9LM3Y2VHlDCmtUMk8zOThsMGlRM1A0aDQ1SXpyZ0E0ZDExZjdQa0hCY3dVMU5rUnZhSzhNT3lsNllvVlVSUVE5eVc3ZEFNdDEKSVNkbitWZ05uV1JTU0J4V2tPN09vSjNSV1VGT1hXbzcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBejJCYVYrUHZmczJZa2JtNHBINTBrZzJKQm1WU3B0bW52b290NkpMS21melQwdjRvCk56NkhSdjdjM2tIMDE3Kys1dVFHLzA0TXRiUFJTSEczYVl4WWNkUWliejEzZ3VmR3NZQ2VsV0ZDMy93b1dSa0UKL1V3VmpHZTVZOG1vdExIYU1pWWIzc3pJTzNDOUE4ZjF2L1NReE1DK3I2ekZSbkN4SS9BdkY3c2JtNFc1WmVuTwpQRy93MENXcUZEY3pjdFVBUHk3RTdkWnpwejVjY2h2NHN0ZUQxa0tZK2F1Qk9kRVNHdVpyYmMvZ29SaThvcCsyCjJ6eENMSFRsejFoQjhweWQ3Z0JGWnpUN1NJTjdtVTB5L0RSeStXZThSaEY1Y0JOZ0JwVDNISGlTem1ONUZtQXoKYk4xWU9sVkQ4eStJTGp6N3RMYkx3WmFVOFh5UURSTWRXOWdLdVFJREFRQUJBb0lCQUYrYUZ1d3YyNmhFbGhLUQpZU3dNVkNkRThDZXZyR1BaTWJqb3NQTm9RTml1c3VTeFlNN2ZGN1JHS0lLYU80ci9EYjRaMzVQeFluQ2QvbHg4CmVFYkRlYjY0UWt1d05abDJ5cVhvR3JQWkMrQ0F1Z1VoUUtpWlc5SEh1N0xpTTlGaHNLcXY0T2RjMXU1NE1kczkKWXZEa2laejdFcTJnWTYzdW8rdGlmZ05kc2dPRzFGbmpYUzFKaWNJUTcyUE5aMGRpRDBra2RqMG9HUHpWdjFTSApMdzE4K1BUbEYzUlNOSWVYTTZvR2Y0SHVtS1g3UCtLaVpSaFJ1eHVudExJMDlJUTZlTnZHVGlITURrcEVUdXRXCk5UZFRPcE5RVC90TnNOSlFhaE1DOTVXM0t4Y2hQSXloS3gveCtBSjBZSmNkbXR0RHVHRGgrOWpNVkcvRmlSRVMKUThTWEhnRUNnWUVBMCtBcGUrTEZYeTZRdjdmMzh5NnBmNEI4TVk1c0l4c3ExaXRSTVdnbzVxbi85VC9Vc0JsWAorcUxBYk00eXVWQ2lZR0Vsdzd3TmhVcXgrMXB5akxBYnBWeGd5aEpkVlM2bENOdXd0bGFiVEM1N0h4eUtmMk0zCkJxbUtqYjBTTDFRQi9jOXNqelhUT2piQUlSeGdhY3dvWXQ2WWMxMFo0VXBrU0x5VmFnUURLWGtDZ1lFQStwQlIKMlE5S2lzRWF3UHp4VEJJOEVoNFF0WnVKdjdjOXFRT2pTZC9rKzRnQjVzdkw4blFkTGxZazZmelg1S2FrMUJGQworbUNVZXVYanIrWTJSZmk0TUozbU14MGFzQmFUaHQ0U0tGd1V5djFkcys3UnhMWXBSaE1yMHlNelBOaW90Yk5wCkprYjZEVy9YVFg5U1p2dDlxSzlCNnY5S1huOFgzV0N1TWFNUTIwRUNnWUJFd1NKVkhHSzJIM05EYzV5WG9wWEkKVlZaMzhtS3ZCYnJoNHc2bS9Na0JDVHVSUjFScWpON2E2NE9NQzJHMGR6RXFHM3hZeHlhUUVZd3VKOHl5VU5lMwowb0ZxTVlsdUFnUDJHdXgrVHg1NEcwRkMrRTBOUjVIc3JJblVzdjA2dElVczZ1bXNrMmZuSlNzMTAzS0tBb0U4CmpFVm1jbGphbmZ4ckNoOW1Wc1Q3NlFLQmdGYnh2MFQzbG1FaGNyd215VUFoVDdEbHQ5eWN0U2JPV2RvTkJoczcKVXNTcFJDZW03Z1VhbjRtVm9NZUUwaEZvZGVlVWVjNVJ0eFFTTTNpMUJINHhPUkM5cWNSd3cvTDRVb2JKQmpuMQpBYzRTTHZLaDJ5NU1HM1JTY0xHYUZFeDN6Y3NIRDJTVjJtelJNeitULzY3MmMzc1dIV1NDNDNaNDJYb2E4emNNCkkyeEJBb0dBQ1hrN1ZvSkovMTQxakpXR3k4aW9CU3J5VS9jbHhsTFFhbVhSWldacXZIa1RqdGhBdngvblZYaHMKcnBPM1JXdkxXTDhCNmRxdXhEVDlTeFhZSEtseUIzQWRJNi9kUnlFKzBFY25lVUJIV0t2Z3E3VEdhOWxoZk1uOApJNGNPRVdQUXRRN1k1Z2Vabk45eDdtd3dIaGF0MEpnUnAxSDZNcHJBZCsxelNSeStWcTg9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVBUL3MvTGtwRFZ0L0tJMUFaNkhReWd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl5T0ZvWERUSTJNVEV3TmpJeQpNakl5T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF6MkJhVitQdmZzMllrYm00cEg1MGtnMkpCbVZTcHRtbnZvb3Q2SkxLbWZ6VDB2NG8KTno2SFJ2N2Mza0gwMTcrKzV1UUcvMDRNdGJQUlNIRzNhWXhZY2RRaWJ6MTNndWZHc1lDZWxXRkMzL3dvV1JrRQovVXdWakdlNVk4bW90TEhhTWlZYjNzeklPM0M5QThmMXYvU1F4TUMrcjZ6RlJuQ3hJL0F2RjdzYm00VzVaZW5PClBHL3cwQ1dxRkRjemN0VUFQeTdFN2RaenB6NWNjaHY0c3RlRDFrS1krYXVCT2RFU0d1WnJiYy9nb1JpOG9wKzIKMnp4Q0xIVGx6MWhCOHB5ZDdnQkZaelQ3U0lON21VMHkvRFJ5K1dlOFJoRjVjQk5nQnBUM0hIaVN6bU41Rm1BegpiTjFZT2xWRDh5K0lMano3dExiTHdaYVU4WHlRRFJNZFc5Z0t1UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQXJPOWdoYTc1NHNobVNwdVBZTVFIWDRmd3ZZTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2lISEpFL3BoUm9JMHlGZFBGYTk5OG1ET2FXUE9tdVdYdFJuZjVialliZDM4ZFhoQmNxMFJFCncyMkord2UxN0JDdWU3OEYrK1JoNml4RFJxMGZvRFRxSW9aWHpqWVB3R2dsSXpwNXVoSUtGWjBEdktMeUQraC8KV3VOa1lpNXplc1BzdDA4Z2Y3cDc3OGl6UlFkcGFFZkljL3N0dkNwcm5YN3NXRVhkTUdlKzJSWFU3K01rWktFUwpFaXhKbDlUVFE2V3diK2ZsV3pKT0NlTkZsc1pqRUtFQjNYNVVSRmRJMmhGb0R6eTJFVDcvZzJ3ZC9LM3Y2VHlDCmtUMk8zOThsMGlRM1A0aDQ1SXpyZ0E0ZDExZjdQa0hCY3dVMU5rUnZhSzhNT3lsNllvVlVSUVE5eVc3ZEFNdDEKSVNkbitWZ05uV1JTU0J4V2tPN09vSjNSV1VGT1hXbzcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRS1crOWFoSEVOemtvbU1Ram8xcStMVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qSXlNakk0V2hjTk1qWXhNVEEyTWpJeQpNakk0V2pBUk1ROHdEUVlEVlFRREV3WnlaVzF2ZEdVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFERWxvWjNVaUJ1SGFxb3Q5SEVSQlpZV3NSTjROTnRERUlJeTNWYktmaCtUUlFJKzV5UkUvRHMKTldGNDJUai90VGpXYkhhRmI3ZW95eWNyVWUydVRwUGw3RlMvZ251Z1Z4YXdkeWlXc01QRmFwNFNWTXhtYWdXUgpFM241dkF4WEpKelgwNGZncnBiQlBNa1R4R0tXYmtLM2psejVETDBGTmpDSG1oQ3VMSmV3RWYrRjUvejlVbXlaCldQd2IyY1UzUlNPWGdaMW5TR2g2MnRwd2lkVm5rZDZ1TWUxRTgwejUxSTBFdERtMWNyTjEyeVNlRHBpVUtjUXcKem9MNWhwenUxSlplT2hCeWh3NEZaL0RhK2pOUllSZlZoN21jbTE3c2FSZTZEZXBURm9udGN0eGRMTGN1dmVTcQo0NHpBb3ozTHFMZ2l5Zi9ORjkwQzVQSjA1MnNXZUtaREFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGCm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JRS3p2WUlXdStlTElaa3FiajJERUIxK0g4TDJEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBVXdSWWlQVGc3NWVaUW43VW1ad1B3UnFzNlQ0STJoT2cvbVlxQlRGNGpjeERyREx2cFgrZ3orVDNhYW5xCi9hVGdRd01oT3JxeTFyL0FjeGE3MjF4eTI2Q0pYVmRRUThpZXVpb1k3OWpScStSRVBBOEZQYUFHWHZyUzFYa0cKdnh0TDY3a2xFQ29jV3VEZEZISTlpMDJOemN3MndRQjhwTGFZRUs2bUFOa3VCTXppY085eTJndnhBZWRaempRZQpobEpEQkpJTjl4VjdMNEZ2aDFvWW10Q1BPNmV1UVpSbmE1V2NHY1RhdHh1T1gxUnZsNTdFaXFRemk2Z3R0MW5nClQyVllwR2k3RWdKMEdWSDh6YjdDNWRqRVZhMFFjMy9SeS9xVjZpMWZNdXVyVTIwSUtmZGVyTU03WUN6WTV0RHAKM3ZhVDU0OEgyNk94WXpFbmQrSDFJNTUzK3c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeEphR2QxSWdiaDJxcUxmUnhFUVdXRnJFVGVEVGJReENDTXQxV3luNGZrMFVDUHVjCmtSUHc3RFZoZU5rNC83VTQxbXgyaFcrM3FNc25LMUh0cms2VDVleFV2NEo3b0ZjV3NIY29sckREeFdxZUVsVE0KWm1vRmtSTjUrYndNVnlTYzE5T0g0SzZXd1R6SkU4UmlsbTVDdDQ1YytReTlCVFl3aDVvUXJpeVhzQkgvaGVmOAovVkpzbVZqOEc5bkZOMFVqbDRHZFowaG9ldHJhY0luVlo1SGVyakh0UlBOTStkU05CTFE1dFhLemRkc2tuZzZZCmxDbkVNTTZDK1lhYzd0U1dYam9RY29jT0JXZncydm96VVdFWDFZZTVuSnRlN0drWHVnM3FVeGFKN1hMY1hTeTMKTHIza3F1T013S005eTZpNElzbi96UmZkQXVUeWRPZHJGbmltUXdJREFRQUJBb0lCQUVYYkZ6MGZPZGJuUTlWZwpQSEg1bjljVnFkdmlvRDZIdEk5YmZRQkFFY1VQcnFiaWdlZ3JwZGpKdnpFcVAwN2VIcXhUTG1xTUlEOGlzWEI3ClZISTBDZW9SNkt1RXVsbG5tUEJyNTBoazE2dzNEcVNFN1gwVy81TmwwRm9sc0Z6bTdiVGp2Y3poUFVDOVVOWnQKV25zS0F6c21vM0w4Uzg2bVN1aGtucmpGcjhFb2hKcTUzSkdpZHIwSWQ4WXU2ZFNnS3lnNHRTNmROQ3dua2dSRgp5bkIvT28vdVF4V3hrdkFvWlFPTThDemRpazhzUHd4cHhKakh6TUVSTHRCS2ViQi9uRm9aQ2hyRVFoU2hyRXlXCnFOTHE2TlNhcENLZG9MUXNtWHZkai84cjltQnBTS29hQlRSRFJpOTJ1QVREMlhTMDFQVHF6U2VlaW1ZMzZtbm0KRTVweTFRRUNnWUVBNXliOWRDNTFNM0dneXB4ZndSUXIrc2FOM2t2aFBsMjFCZjJGL1RaNUVpSWpFQWRCTnU3NQpMaUtRQU81SnMzWHNiNERib1VndzNlMnpUOFZLQm1EYzJHSWJWb0Rab092cnQ4d1UwWmZGK1k0M29vb3BJQzZFCjZmZThXZUU3MWgrU3crVXp0dEEzUkM3UXAvUFZkN2JvcVFCSjFsaU15amRMZGNXS1VHbGZaREVDZ1lFQTJiaGUKelViVC9EZDRTMTRwTW5HYjJCUzJrVFZvWFhVTWhjbGdYN3JMME4yU1RnY0lRem5JRGU3ZkpXa3N5bVFkVmlFUApRQlhBWVRJbjgvVVVkdk5aMVJoS1RLMktTSzZCazc3c2lKUURkdTREWlhWekxRdXBkWVBOV0RLVWpTWkMxOHM1CmVJUnNleXJDM3ppcW5jd2c5QWVCU0V2ZmtGTVgybWxiTW1veEdMTUNnWUVBdXB2emlkUG5zanhOZnNSM1dUeWIKdEx5TzA2T1dsKzYyc2J0V2JIR0psR1lTd0dIYStDbzg2RTNteTVtVHpsbXBJdXQ0WStBUDgxcHVwRHUxNHloWApvaWl4d1VnTWFhbU1ocmt2SlhYTjBnWktTK0lXQ1hFRXhJM0hkUmdzWWxUaSsxc1NRTWdmbGQvbGUzR1NLQzkxCjdObmF3anlDak0zUEVha0VYSjUwOEVFQ2dZQWRzV0ZzaVo1YnBZMElhbDBmL2hLTkU3WWFjN2c2RnI2UWVIaG0KVmVsNklOM1ZPbXhNRHROVDR5SVh6aEpId0FPb1BYWUEvWFp4U3cvYjI2N2cwaXVNUG5YVG8wOWF2a0g1em00Zgo2bC9XbG50c0dPcU9XQ3JTVmhscFQreW1tM00rVHY4Vmlxbm8ybG9kYTNNSmRrK0FPSTNQT0ZuVEt5SHpyYTY4ClgzTTJ0UUtCZ0VGL1BTRmZmMzhnK2o1WFhmdnJqLyt2QVJ5ZWNkZmM0ZWNZdkw2U2EwMUpZcUgzVVBuNWkvdEoKL1pBcUtRaHJGUVdvL2NyNkRDWXRRRGlsa012aU9vY2ZmRk9NbmV5U2RveHJxbFMwVlhnNWNVQXlsbnlsMmVldwpZZFJjMk42K0k1UmV4MUU0aDlFWjk0eUhvbm9WQVA3NnJWK2ZlVUJ5Tm1xUUxhYSs3ZmplCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVBUL3MvTGtwRFZ0L0tJMUFaNkhReWd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl5T0ZvWERUSTJNVEV3TmpJeQpNakl5T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF6MkJhVitQdmZzMllrYm00cEg1MGtnMkpCbVZTcHRtbnZvb3Q2SkxLbWZ6VDB2NG8KTno2SFJ2N2Mza0gwMTcrKzV1UUcvMDRNdGJQUlNIRzNhWXhZY2RRaWJ6MTNndWZHc1lDZWxXRkMzL3dvV1JrRQovVXdWakdlNVk4bW90TEhhTWlZYjNzeklPM0M5QThmMXYvU1F4TUMrcjZ6RlJuQ3hJL0F2RjdzYm00VzVaZW5PClBHL3cwQ1dxRkRjemN0VUFQeTdFN2RaenB6NWNjaHY0c3RlRDFrS1krYXVCT2RFU0d1WnJiYy9nb1JpOG9wKzIKMnp4Q0xIVGx6MWhCOHB5ZDdnQkZaelQ3U0lON21VMHkvRFJ5K1dlOFJoRjVjQk5nQnBUM0hIaVN6bU41Rm1BegpiTjFZT2xWRDh5K0lMano3dExiTHdaYVU4WHlRRFJNZFc5Z0t1UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQXJPOWdoYTc1NHNobVNwdVBZTVFIWDRmd3ZZTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2lISEpFL3BoUm9JMHlGZFBGYTk5OG1ET2FXUE9tdVdYdFJuZjVialliZDM4ZFhoQmNxMFJFCncyMkord2UxN0JDdWU3OEYrK1JoNml4RFJxMGZvRFRxSW9aWHpqWVB3R2dsSXpwNXVoSUtGWjBEdktMeUQraC8KV3VOa1lpNXplc1BzdDA4Z2Y3cDc3OGl6UlFkcGFFZkljL3N0dkNwcm5YN3NXRVhkTUdlKzJSWFU3K01rWktFUwpFaXhKbDlUVFE2V3diK2ZsV3pKT0NlTkZsc1pqRUtFQjNYNVVSRmRJMmhGb0R6eTJFVDcvZzJ3ZC9LM3Y2VHlDCmtUMk8zOThsMGlRM1A0aDQ1SXpyZ0E0ZDExZjdQa0hCY3dVMU5rUnZhSzhNT3lsNllvVlVSUVE5eVc3ZEFNdDEKSVNkbitWZ05uV1JTU0J4V2tPN09vSjNSV1VGT1hXbzcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRZGNwWXB4OXVNb1RPRldleFdsYUJlREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qSXlNakk0V2hjTk1qWXhNVEEyTWpJeQpNakk0V2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdG1KM29mbjZVM295dmR5RHJENmoKQ0RRSnJQOHhFd0QxQTJNS1hKc1pGVVdrZ3ZRWlplRCtvS21yZ0l3c2tDMGZ1VzMrbHBwbTB0MSs2c1EyNFFVeQoyY1gvK0cxeWhWVG5QVHpDWm5sYUw3YURLT1czSGdwZFVJS1U4Tm92V1MxTmVrcGZHcjV6b0gvbFRYZXh2bjRxCk50bnBlOWxudUJyM3pTQ3dDVnppMGRuN21qZVhOZ3pIOXBORDc5MXhYNUFzQ1hqbXQ4V3NIUkFvdm4xTzk2Mm4KbXgvTndMc3NGUXM3VHZyc1FBRFNoT2ZKaGo0QlJTUFl1ZHczMHlLWmlmbEVGN0tJM2g4MkhtYmlDYnJHbGpnMgovTEowcHlQN3RyK0ZwbkdjTTAwaWJWcU05bklVTkFjdm9ONDY2d1NqZm5YL3RLTTd3UGZiWVNXek5lREdQUzljCmtRSURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JRS3p2WUlXdStlTElaawpxYmoyREVCMStIOEwyREI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUNsWW5tR1pWRmFRRlZSTE0rWUFyMnh4ZHExN0R1S3dXK200bWZ4RzNkMUxDU2NMVFo1CnVtM1pFRVhOa1JXZElaS3Z1OVlMa21tem1DSlBlQVZWVUtqSkp0VDloWVJHK05QU3Y5UnVINUdiR1NIQkR6SnMKRUNsR2hOcm9aUUxRWGlNbVJWcnZKSzk3c1F5V3Q2eUc2RGRGalZDWVdIRDVMcW1lWW1uK1hkKytLU1phandCRQpTMGpBcldvYjc4ajFoTUZCcXlJTVVXWHhnMUxycTQ0YkIzS2xRci9TMmtOVmtabm5acWdiK0RuYUR2TG5kaEI5CkpsdkFwcVhsdXVPTVJlTXFKSlh3VW5hQ1pWaFgwVi96YWhEZE91aDJvcDZRWWc3cWptODRRNmxsWEUyTlFaNU0KK0JiY1JWMUtLcDNaYnZVcmNoV2hFd2lrYjA4MjZLTmNRWVF2Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdG1KM29mbjZVM295dmR5RHJENmpDRFFKclA4eEV3RDFBMk1LWEpzWkZVV2tndlFaClplRCtvS21yZ0l3c2tDMGZ1VzMrbHBwbTB0MSs2c1EyNFFVeTJjWC8rRzF5aFZUblBUekNabmxhTDdhREtPVzMKSGdwZFVJS1U4Tm92V1MxTmVrcGZHcjV6b0gvbFRYZXh2bjRxTnRucGU5bG51QnIzelNDd0NWemkwZG43bWplWApOZ3pIOXBORDc5MXhYNUFzQ1hqbXQ4V3NIUkFvdm4xTzk2Mm5teC9Od0xzc0ZRczdUdnJzUUFEU2hPZkpoajRCClJTUFl1ZHczMHlLWmlmbEVGN0tJM2g4MkhtYmlDYnJHbGpnMi9MSjBweVA3dHIrRnBuR2NNMDBpYlZxTTluSVUKTkFjdm9ONDY2d1NqZm5YL3RLTTd3UGZiWVNXek5lREdQUzlja1FJREFRQUJBb0lCQVFDenJmeDRPaUx3M0tGaQp4UDEvMHRHaEFrdEtBTHNqSXIwL1VmSmlXM1p4cTRPd2M3VVYxbnhrWWVPUktBZTdIb2x6a0RiUnZsbHdna0JJCkgzaUZaUzY4dDBFL1NPd2JDUk1yRkZIY3pNOFoxSEFRK1liVzlKVUwvU21vd3ZzRW13b0tZWHlpaDJDNGpXZWwKVXpkc0dUV1Roa2xzOXpra2VvVUl0SnhaRFFaMGYrZUIwbVRiZ25nbkltOExpT3JxYmdxTmVOOU42NUVwU3g4eQpETmR4K2thbXNpV1BSZ2xZVHdHVFZzUEtuc2tWSm1OZ1Y2eE1Ja0NlbWYrZ0NaUDRoM2J3NXNhU0s2RlNFQzB1CmRBWHJEc1pQNDd2eUFOUUltYTlyZ1Rsa2EvdmhRNjJwenV5R1BtTEU4QXZrNmpYSVFDb0pqdVpuazJsMlhsZ0EKaTgrcERTdEJBb0dCQU5yemNzY2wrYmZFam5ZclpQQmE4akc0U3lXN1RZRkNMUzF0SWVCWkRyUXU0TW5VRXM4TwpmSUl1MWwvM1ZBT1M3cU5Od2pmVWNjbjMzRERqZHRoSEpwUHMwL0hyNy9GcVJTN2szbnoxcm91czFZWFJISWVlCnZwOWdzMFFHRTQ3UE1jWHhYMmxQWEduQmFtV2JRUjgwSTVRVnJIMGc1Vk84azJxa1dHUjNsTmpwQW9HQkFOVS8KQ0hIcERidFBjdGYzTHVSY0VibGJSWnkwRHFPQnB6MDZMWG5RUW9JcHJyNXp1eGgxSXNyZEU5Uy9JNCtyQjVkNQpVYWdBRFVEb1hPc0sxWlRtZE9rQUVZZXdYbTRZYjZlVVhnWllRZEZwdHZEbUhiSnMvNUF2QllRN3J3cmNNWU01CmNMVkF5MHc1dVdwblRiSzE3cUxhdlltdHhhMFozbUhXZlIzV0VCMXBBb0dCQUtESlRJMkFqcnhyNUc1VSthQWsKT1YxWHlCK2lSNDFYaXBPa1k4ODd0emVNZ1ZqVm15WmdyZ0J2NHMvQWNmclo2Tk1WcEQyWmppSlNHV254Y0hIcwo5aUNGTnpPZUhxczdiaWk4dThJcUxRNjNVbW9kb1FUYkI0TkU0UUJnTWZhYW95T0lXSmVlUnZBR3NGcURRN1JsCmRvY2x6M0JvT3VCZVNDZDFIdEJRbkljWkFvR0FNZ3dTR2xIZEJDbjRSUkZoTXYwY3Q4amhCSThKcEh3b1dPbFAKaFBoSXM2Mitzam9OSGdkWHZBNjR1Y1NHUHhDZnZvQWRsdlUwSnhpaHZoUVQzbGRiOXRjcVJoTXhobHM3MFRPMApBWDh6SzBmSlJLNXRKOVFIQXJyV2E1dHFVSDB2TGFJTWZxMlBTUHQvTmFhN0NJZEVVM3BNNDRRaUVhY3hsdnEwCjhJeXR5WWtDZ1lBRUJyTGdxZ1dVbzM2bTBPbWozc256TjgxNzVFL0pSMU9Ba0paTjVnVG1KZXFzOWxiQWRJMFkKczNVSTFCUHhvL0IxajlodUVBR0MrSzVhVjdqcFcvYmhJQ3RLanlVemtwZ2x6WUMwNWtEL0M5T29kKzVrL2tJeApmY0VXRXo2STFPWnJmSXhSOHRYdGNkOENsV1NTYmtqOGFYOUs2cHI1Y2tLQkZ5Q1RQK0tpMkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVBUL3MvTGtwRFZ0L0tJMUFaNkhReWd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl5T0ZvWERUSTJNVEV3TmpJeQpNakl5T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF6MkJhVitQdmZzMllrYm00cEg1MGtnMkpCbVZTcHRtbnZvb3Q2SkxLbWZ6VDB2NG8KTno2SFJ2N2Mza0gwMTcrKzV1UUcvMDRNdGJQUlNIRzNhWXhZY2RRaWJ6MTNndWZHc1lDZWxXRkMzL3dvV1JrRQovVXdWakdlNVk4bW90TEhhTWlZYjNzeklPM0M5QThmMXYvU1F4TUMrcjZ6RlJuQ3hJL0F2RjdzYm00VzVaZW5PClBHL3cwQ1dxRkRjemN0VUFQeTdFN2RaenB6NWNjaHY0c3RlRDFrS1krYXVCT2RFU0d1WnJiYy9nb1JpOG9wKzIKMnp4Q0xIVGx6MWhCOHB5ZDdnQkZaelQ3U0lON21VMHkvRFJ5K1dlOFJoRjVjQk5nQnBUM0hIaVN6bU41Rm1BegpiTjFZT2xWRDh5K0lMano3dExiTHdaYVU4WHlRRFJNZFc5Z0t1UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQXJPOWdoYTc1NHNobVNwdVBZTVFIWDRmd3ZZTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2lISEpFL3BoUm9JMHlGZFBGYTk5OG1ET2FXUE9tdVdYdFJuZjVialliZDM4ZFhoQmNxMFJFCncyMkord2UxN0JDdWU3OEYrK1JoNml4RFJxMGZvRFRxSW9aWHpqWVB3R2dsSXpwNXVoSUtGWjBEdktMeUQraC8KV3VOa1lpNXplc1BzdDA4Z2Y3cDc3OGl6UlFkcGFFZkljL3N0dkNwcm5YN3NXRVhkTUdlKzJSWFU3K01rWktFUwpFaXhKbDlUVFE2V3diK2ZsV3pKT0NlTkZsc1pqRUtFQjNYNVVSRmRJMmhGb0R6eTJFVDcvZzJ3ZC9LM3Y2VHlDCmtUMk8zOThsMGlRM1A0aDQ1SXpyZ0E0ZDExZjdQa0hCY3dVMU5rUnZhSzhNT3lsNllvVlVSUVE5eVc3ZEFNdDEKSVNkbitWZ05uV1JTU0J4V2tPN09vSjNSV1VGT1hXbzcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTRENDQWpDZ0F3SUJBZ0lRTmhQRkhFYVoxNFlyaFRiN2hlcEJFREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qSXlNakk0V2hjTk1qWXhNVEEyTWpJeQpNakk0V2pBak1TRXdId1lEVlFRRERCZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEaEFVU2xDS1FkTVVuS2UzdnhoMUpFaU5xV2lBaXMKMVE3bkw2VFNHT1VLOTJrNnJXemtkWjBGK0x5bFh5ZWZaQkRkMFQ1dC95VmJPMGpFY0tZeFhsamlNbXpSZmI4RQo4RVJtUUUwbHBLNHRoVGVXbHB4d2pIdmJjblA0MEJ3OXVrRGhsclZlL00yWlFJVXMvRHkrWk5xU21mYnlmMVJMCm0yMnFZeCs0WEZpNjloeExDT3Fkd0UwNk11MHdNYnp1ZzFLcTJ2Z2puWlJVeXVab1oxQWJ0aGhNWnhoOTZ0MDcKNDRCSzlHYkdnVHRzc2I2RVNOcjV5bTJhL1lDVnM4TWl3YUpzdXk0Z0NyZ0xJR1dOeWJ2NSsxaTBnV0FveVNveQpmNGVqUnN4VHJaa0NBVGNUWjVhOVhvTXlSRHVZdml2Wjk1c0pBSUxxQVdlWm1hdWdJY21BaXI5MUFnTUJBQUdqCmdZWXdnWU13RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZBck85Z2hhNzU0c2htU3B1UFlNUUhYNApmd3ZZTUNNR0ExVWRFUVFjTUJxQ0dDb3VhSFZpWW14bExYSmxiR0Y1TG1OcGJHbDFiUzVwYnpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFvSDl2Y3ZJUzZIaEZHc1QrQWp6dTg1N1NiMkswRyt5bXBQMlFJdFdHUGo0ZnF6QXQKTkt5eVVoN2QxYy9OYm5mMGdFbkJvR09KTkZCd3c4NEkrUldxanFWb3NETURDWENvNHB2aEk1VFEybWxNdE84SgpkLzJ1bjRXOXl0VHRCTm9jMlhaK05QZVVkM0U5QnNkM3lSL0kzVW0wTGk1WW1DeWhTTHMwK2IwS015dTM0dEhQCitKQzZNMzdnOE5IbXRtNWtRVkhBU0g0bmQway96eGZvQ1JFNzNuY3o3U1c2eTh0RUpXVTJVd01lOFdIczF0dVYKZzdrQjcwTVM1Y0lrUXdkZlJZQnFZMFJEWWkrWUZYRkZ0NzFOR2xFK0xpdFhPR3JoY2xCenliQU01bHY2eWkwVAp1NGphQzUraFEvdmFQWWJIbitsN1ozZkt5dStZaFR1OGhlS0ozdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBNFFGRXBRaWtIVEZKeW50NzhZZFNSSWphbG9nSXJOVU81eStrMGhqbEN2ZHBPcTFzCjVIV2RCZmk4cFY4bm4yUVEzZEUrYmY4bFd6dEl4SENtTVY1WTRqSnMwWDIvQlBCRVprQk5KYVN1TFlVM2xwYWMKY0l4NzIzSnorTkFjUGJwQTRaYTFYdnpObVVDRkxQdzh2bVRha3BuMjhuOVVTNXR0cW1NZnVGeFl1dlljU3dqcQpuY0JOT2pMdE1ERzg3b05TcXRyNEk1MlVWTXJtYUdkUUc3WVlUR2NZZmVyZE8rT0FTdlJteG9FN2JMRytoRWphCitjcHRtdjJBbGJQRElzR2liTHN1SUFxNEN5QmxqY203K2Z0WXRJRmdLTWtxTW4rSG8wYk1VNjJaQWdFM0UyZVcKdlY2RE1rUTdtTDRyMmZlYkNRQ0M2Z0ZubVptcm9DSEpnSXEvZFFJREFRQUJBb0lCQVFEQzdEMVNsMnpOV1hDcQp1RlZFaFUyd3o3cEdKQzBYeFMrMitpQllYbmEyREdZZURqWENxVjFSMmcxYldsYlNEM2RKSXNkcHRWcmdjVGgxCjdYMGNVYmJBcHB4ODArblMxbTc3QWdPVGM5bnMxM2F6djJCaFpHSzhWcWUvU2xMYzZ1amdSWlowWnArYWZ6bWcKSWhoaGZLK1p4MFlYQ0ZXM2Rqd0lHdjFVMHJPUHFwd0ttWVRFL1ZPRG9HdFpzVWNHSHVxZE8reE9FYmxIdkVMcgpseitTeTFmWnRKeFZqSEZkOUR5dlJZVjM4b1hqemFDV2l5UkxCZ0Q5b2FZZWZaQ1llZmk2cWtTcHM4dWJMMERjCnZCWkh0bEIxM2ZQUEkwVVhpNTRGdEdwcllWTTVTZnVIcUZkSTczWmZKWVZaVFBlY1hqWlJ5RG5ISnZrUFZ4eDEKanZ2T0l1ZVZBb0dCQVBkcWdxU3FiOE9MY0Q4YXFMT0czM0MzZzlocXlqTmNiYzB5SHpaMExRRDh0K0NqWVM1dQpUQSswZzJWUS9VZC85TlMvcXhWRGZacEVUSklEbXo2ams3R08wUGJ5L3RTT0tnd2FCekZjTDVLK0huZWZJL1l6Cm5CV2FUS1hHMTdXRzNFMFZ1Ti9TRmd4cHlOQjhFOEJOR1dVajc2OFVvQ3lXQjJYOUl3OHpNbDBqQW9HQkFPalAKdFRPWGgwWnZiQ2JpaklUY05sbThsdHh3TlN0QzFqbmMwVGsyZ2hPZEYrVWloVnZxbDBVa0Vhd3FCNlRxaHJRdwo1YlNmUldyS0d4Yk1zazU2Zk0yRzJIbTlCSUdHYldqNkVPZGVNOWRDSFJWQTE1dkZrUWJpdDFFMkFaNXg3NUt6Cnl5dlhaajZtNnRvdDIzRlIvN3RuRUNLVDFDV0pPaWhUTTRnRVZQYUhBb0dCQUxqMGhuVlNjL3BhWXE3SjN4TlYKMy9NRFBTeXJxRHg4L0JoSlA4d1ZUUTlQM0tXeGZSU1luNE9lRGh2UFQ0Z0R2NkxMSmJuZm1pV1lxU1QrVFMrbQpXT0tEUVBOYTgrVXg0WHpxZURZT0ZBSSszY2ZPejdOZElYR0V4NGVsL2R0VjFacEtnc25PNDJ5a0o5cXk1cEQ3CkVlRHAzR09scDVldEVCck9BVWQ3bmtyQkFvR0JBTEh4OEtJYWM3OFdjeWZWaVdvVGwwZEhxbGViUEVod3NhVlEKYm1xNGl2dksydlM4U2dwVGFJUGthYzJaNG5YZS9FN0dBUXpwbi9sYnVSRFlMSUZuaGZUaDJKeFVLUm1IVWlFbQo0YnkyZUJGVDZ6N1BiUDBYS1I2R00yL1RRN0dEaklZby9tWG9JYkpKaXNCd3hJWDlFdVoraEFxcHkwRlZmaXBNClRkcnMxTFFKQW9HQkFLbCtyUHhIU1FFbTdkWU8xMGJhVHFrS2tKSGJXUXVzN3diSXRVbEx2YVZjWUtHQ1NsdE0KWGFDaG95TExlUkRYdUw0VytYUFUvQlRKV21VRWRBckZpTFVlVFh6MmVLSkN4V3RSRm5jTzZSL3JPUEVUd3I0WQozakd5NkVJSkNKVW1SQm1ZcllaZWFuald6bFJlZE1Bb2ZmQ3FqMFIrTWRpNmY2QmhjczFjdTJMVAotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVBUL3MvTGtwRFZ0L0tJMUFaNkhReWd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl5T0ZvWERUSTJNVEV3TmpJeQpNakl5T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF6MkJhVitQdmZzMllrYm00cEg1MGtnMkpCbVZTcHRtbnZvb3Q2SkxLbWZ6VDB2NG8KTno2SFJ2N2Mza0gwMTcrKzV1UUcvMDRNdGJQUlNIRzNhWXhZY2RRaWJ6MTNndWZHc1lDZWxXRkMzL3dvV1JrRQovVXdWakdlNVk4bW90TEhhTWlZYjNzeklPM0M5QThmMXYvU1F4TUMrcjZ6RlJuQ3hJL0F2RjdzYm00VzVaZW5PClBHL3cwQ1dxRkRjemN0VUFQeTdFN2RaenB6NWNjaHY0c3RlRDFrS1krYXVCT2RFU0d1WnJiYy9nb1JpOG9wKzIKMnp4Q0xIVGx6MWhCOHB5ZDdnQkZaelQ3U0lON21VMHkvRFJ5K1dlOFJoRjVjQk5nQnBUM0hIaVN6bU41Rm1BegpiTjFZT2xWRDh5K0lMano3dExiTHdaYVU4WHlRRFJNZFc5Z0t1UUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQXJPOWdoYTc1NHNobVNwdVBZTVFIWDRmd3ZZTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2lISEpFL3BoUm9JMHlGZFBGYTk5OG1ET2FXUE9tdVdYdFJuZjVialliZDM4ZFhoQmNxMFJFCncyMkord2UxN0JDdWU3OEYrK1JoNml4RFJxMGZvRFRxSW9aWHpqWVB3R2dsSXpwNXVoSUtGWjBEdktMeUQraC8KV3VOa1lpNXplc1BzdDA4Z2Y3cDc3OGl6UlFkcGFFZkljL3N0dkNwcm5YN3NXRVhkTUdlKzJSWFU3K01rWktFUwpFaXhKbDlUVFE2V3diK2ZsV3pKT0NlTkZsc1pqRUtFQjNYNVVSRmRJMmhGb0R6eTJFVDcvZzJ3ZC9LM3Y2VHlDCmtUMk8zOThsMGlRM1A0aDQ1SXpyZ0E0ZDExZjdQa0hCY3dVMU5rUnZhSzhNT3lsNllvVlVSUVE5eVc3ZEFNdDEKSVNkbitWZ05uV1JTU0J4V2tPN09vSjNSV1VGT1hXbzcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUp6OUJSZDduS0hIWmxyTi9JQTdJMGd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl5T0ZvWERUSTJNVEV3TmpJeQpNakl5T0Zvd0pURWpNQ0VHQTFVRUF3d2FLaTVqTUM1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3VyN1F5cVhINlZKdWE3NXJ1OHQzZ2NaOHYKQXNjdXVDdXo3YjFqS2YyQ3VSTUI2eC9WR3RKbVNoM2hPLzdSMEYvT2V0Z0p5Z3JnNzlmakdMOHFpaWlPRDYregpTb0Jocit5c0NVZjZxNjNCOVpkU3FNWVMrdVRBN08vNXF4NmFjSXAzQnBoTVVqUEFYemV5THc0bkQyYnFEcUsyCjZKMUpVQkRjU3dKaFBBd3B1eE11c2ZnSnlwTkZvTHkwYTR3RWQwdGhIb3Q2QnJ4VDhJZHp5WGpRLzBPQkYwc3YKWGxObGZ2SSs4R3lJUXBXZzUvUFJjRnM1R1Q4VTJXU3VlN1dyTzUzRTBWVUxQMUM0Q3pkNERnUjdjWTRwREkrMQpZUVBCRmdVaWUyZnZpRlV5MXo3S1h0d013SmpENjhiQ0drdk9CV3VjclJ6RVNtRFZiTWhPRFBiMXZQK3JBZ01CCkFBR2pnWWd3Z1lVd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGQXJPOWdoYTc1NHNobVNwdVBZTQpRSFg0Znd2WU1DVUdBMVVkRVFRZU1CeUNHaW91WXpBdWFIVmlZbXhsTFdkeWNHTXVZMmxzYVhWdExtbHZNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFCYjlQOTlEWHlqa2x2ei96cmtZTEdUZnlFa2tTMWRhUlVjdHRqMWVZbXcKb29GbnZPMWorKzZlQVpPVzB5SjIrRE1VUE8vM09TaHNUL2ZOdlZEZ05rT3RuSmc2bGtrN3pIdnN2YXQrQlpWUwoya3NkTWRmMktsQkZqUklrWGxtOGFRK2JBb01VL0tocHRjZWhRV3dMNlNQaDVoT1hKYWg0WDZxa284Zm1BNXJuCkp1dlIrQ0FRdVdQQUFHMXc1NUV4UGxFV2UwQzk0cVRWakVtVWwvQ2hLRDJMVzc2M1RtRnd2dktvbmQvM0c4MGEKNDdyRUVDTlNIQ2kzVFhBSDl4UHI2RkplRk1sUE9pc1ovWWtXQzljM2ViYXRDYjcvTXZGWk1iaW9zZzdubURNaQppMWdZVml4ZHVVMmRPeW1RcTVvYmcwTzYxTDI4TUozQkFiL0hyQUlGVmNERAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcnErME1xbHgrbFNibXUrYTd2TGQ0SEdmTHdMSExyZ3JzKzI5WXluOWdya1RBZXNmCjFSclNaa29kNFR2KzBkQmZ6bnJZQ2NvSzRPL1g0eGkvS29vb2pnK3ZzMHFBWWEvc3JBbEgrcXV0d2ZXWFVxakcKRXZya3dPenYrYXNlbW5DS2R3YVlURkl6d0Y4M3NpOE9KdzltNmc2aXR1aWRTVkFRM0VzQ1lUd01LYnNUTHJINApDY3FUUmFDOHRHdU1CSGRMWVI2TGVnYThVL0NIYzhsNDBQOURnUmRMTDE1VFpYN3lQdkJzaUVLVm9PZnowWEJiCk9Say9GTmxrcm51MXF6dWR4TkZWQ3o5UXVBczNlQTRFZTNHT0tReVB0V0VEd1JZRkludG43NGhWTXRjK3lsN2MKRE1DWXcrdkd3aHBMemdWcm5LMGN4RXBnMVd6SVRnejI5YnovcXdJREFRQUJBb0lCQUhZcSszM3Q2K0ZJVEw3QgphUkJORUZTYzUrN1lOVDlnYklmWndleUw0aWNFNVZ1OTN4bThmQ21mNTVpT2lqRUtnVlRlK3JlY2lrRmhYYXdNCitIeGhXMC9HUXJmSkpSRnYvV3pmRm1iMnJhTHdiSDRKRjN5TlppTXY1S0lDNUwvYWM0QlM0TUY0TmZQak5YeisKb2RkQWJ3RFVCN1F0cFFDTC9ldlhmZk9pdUNPZGdCWjVLbTlzSjZKaVdJSGdRZmN3MGVHeVRwRjNTWERoODl1dgpQL1VBRGhWM014TDM4c0U1TVNScnFhSnZHbndIY0I1aWVPZ1h0VEt0Y1pRRXJLNGovTG1DVy8xakZBdFp4K3VvCnRYNElCMVpobmt4bzlSZDkvZlhCMUNEdFFwdCtoNEVDM2FobEUvMFVYMTVmcmxNVGUvNGFua0dURUJ2K1djL2EKUDJMTW5ia0NnWUVBMEFiVm4yc0NtSldxd1lFRHpBRVArMXVVMmdzaE5CcVNQa0xjUFlPQVo0QUl6QWhveHBlTgpJdEF4dklWeGY0ZTJib1V5aXhWbmNzRkdCQnFsRkNVTnRZMjFJNEJQOUVxbnlIT2JXcExxNzloNGFOVXRLRHJZCks1cDJTZm1nRFFGTFpOMVBtR0k0cUxueFJDQU04L2V0TGtvT2lEbFdXaXZ0YzRhcEFKZWlLblVDZ1lFQTF2aVMKY2VYRGNLK0xrMWI0dmd3aFNuTzVzMW9FVlcvQytoeVprclFyNXhtRUJBb1FSU2RiWHhZbzRydkU0U201NmIxNQp3QjRsd1BpNzBJQm1hVlZ3V1ZvT2lpNjBZa0JUVEZiT1FIazhzUCtrMUpWaGs3TGxLYVJpclFIa2xzcVpIQWQxCldtN3prbDFOWFo2OHZxTE8vY2JuQTJONkgzQ29FajBGcFh2ei9aOENnWUFPTFFrTnJnc2xQcjIrSmY2T1BseEsKY3JrNENwNGVvTmpxYVQvODZTTXM2bXF2REx1bkhOaS9VSlN6Rmh6ZjVlMm1wbWtGVlZZUldkNWRsVHMrbmkvSworWGNvaml2a3A5bTdMVFdlL0hnS0ZDUlFjSVo5UVZWTjAxN1FON1NTYms0bTkzWGZHb0psN1JYbDRKRkJadFZrClhDT1ZZT0xqamk3R09wejFyMSticVFLQmdBMlc4ek1PRWxmYVVSbUVZdjhvcHlZY3dMMk0wRDlTYkdJQlV0Z0sKV2NnblBjZy9scDI0aWpjdG9ISU02cnBOTi9xRnh0K1ZTRSsxcWJIWm5CL0dqZTZvR2NrMGdLVEJha0ttTGkyMwpQRlg0STBScEdSME1MeDU5ek5zaEJvRmQxMllGTnE3NzJwd0RGL1AySi9wcE1tcXFtMG9Fak9EVjcxb1B6MzZSCm9uQURBb0dCQUxNd2FTb3M2ZGdwR2pkcWp6Yyt0L1Z3K1NzOU5VYXhzSnEzYm5panduNTl4VUhHSEpISHR2YUgKQUpFZEFqWDlBRlk3RWN0R1A0MzIzNVA1M3FMKzMwZnRKeDB1dUVDcUpJamJleFQrUW9IaTBuNHlleE50YlhIQwo4NnRDYmtjYkJGSGkrSTdpSzV4VGxnSEJyQ2t0ZjRNZm9iT3hkM1o5WGJKMGpZL3NSUnRDCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c0
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "10"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-wireguard: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.0.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "false"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c0
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.2@sha256:52f70250dea22e506959439a7c4ea31b10fe8375db62f5c27ab746e3a2af866d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          rm -rf /var/run/etcd/*;
          /usr/local/bin/etcd --data-dir=/var/run/etcd --name=clustermesh-apiserver --listen-client-urls=http://127.0.0.1:2379 --advertise-client-urls=http://127.0.0.1:2379 --initial-cluster-token=clustermesh-apiserver --initial-cluster-state=new --auto-compaction-retention=1 &

          # The following key needs to be created before that the cilium agents
          # have the possibility of connecting to etcd.
          etcdctl put cilium/.has-cluster-config true

          etcdctl user add root --no-password;
          etcdctl user grant-role root root;
          etcdctl user add admin-c0 --no-password;
          etcdctl user grant-role admin-c0 root;
          etcdctl user add externalworkload --no-password;
          etcdctl role add externalworkload;
          etcdctl role grant-permission externalworkload --from-key read '';
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/state/noderegister/v1/;
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/.initlock/;
          etcdctl user grant-role externalworkload externalworkload;
          etcdctl user add remote --no-password;
          etcdctl role add remote;
          etcdctl role grant-permission remote --from-key read '';
          etcdctl user grant-role remote remote;
          etcdctl auth enable;
          exit
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=clustermesh-apiserver
        - --auto-compaction-retention=1
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.14.2@sha256:0650beac6633a483261640b6539c9609f5a761f4ab4504fd1e6ffe7f2bb82e9a"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.2@sha256:a89030b31f333e8fb1c10d2473250399a1a537c27d022cd8becc1a65d1bef1d6"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
