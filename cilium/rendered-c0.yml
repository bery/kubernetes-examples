---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU8wRlhyWllkaGxpY3dpWEJQcGVIQ3N3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3TjFvWERUSTJNVEV3TmpJdwpNall3TjFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzUGU4cVU4S2JkSDI2MnJhV0F6c3FaZUgvU3orNUl4MGRpMFJ6T2FvUm85V3ZXRHYKWStBSVRMeEQ2amtXcldSZlJTc2c0anZQUjJPVkhLS1ZrK2pZRWhkWW12WDdHaEdZZFB1cjltTUZzdTRrcDc0MQp4Wmk2c2pCYnJKQUtKdXRJYXFSQUNOS2ZEMGF3aXloOXE2cUNwUDR4dnFkRWJQclVObUYvV25teDQ0UkFuMHNnCkYyMmxMb001bUxMT3FpbWlOT016Q1hqVjc5cW54bCsySHBYa2JXUENoWXByR05zcUxCSHdIQkIxY01tRjNCQkoKdGp6UHBaU2dvSUpVMHNlcUdVb3haSXZheFZ1SU1zdVBJaVFsNU1rWmFldGZWZEhkYjQ4NFlpUUpMUHVBRkE5NgorVmlHMlVqc1gyVlFWNnNLM3Q3bndEYXl5S0RvbzVNZ1BMMW1wd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRncyYzBJbHJVQmJ2VEpRaWpiWGM2OTVIZFovTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQWVzaXFWN3lwbGdmSUQrUm40Qzc0eVdHeFovOFp4QUpCOUF5NklFZjVzSlkxaGFkbWkvUmJxClcrNGVNTVpJbjFSTFZ5eS9GRjRBdVZTZE13TVJlOUNrUS8vVHVJNy8vNVFGQlRoOWlmRzZ0djJjaTQzK0NFcFEKOE1MQnlac0dnZW5WZDlVTHNoMFpXdVFub1JrenltM3dsZlU1NmdKdnBIVW1NTkNxdEpuSlc0a00zREFBWXl1ZApIMS9DMzFYeEVhVEhIMVVuSlBKemxkZ1FrTjhLckpBdGpFNHpKTmhLbTF1TVczWXYvYkxEeTBPYWdSVnUxWkJvCmJ1Mm9kZU91aTdwbmxKRGpNUjdvOVJ5Q3JpaGI4UjFybHpuOGtxcU5oeTkrcjlQbzY0V0JjNGJCd1Y4RXdObmoKdG1TTnFqTTBocXZUQTkveVZ1UGdnQkE4TlRiYWo1RUYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBc1BlOHFVOEtiZEgyNjJyYVdBenNxWmVIL1N6KzVJeDBkaTBSek9hb1JvOVd2V0R2ClkrQUlUTHhENmprV3JXUmZSU3NnNGp2UFIyT1ZIS0tWaytqWUVoZFltdlg3R2hHWWRQdXI5bU1Gc3U0a3A3NDEKeFppNnNqQmJySkFLSnV0SWFxUkFDTktmRDBhd2l5aDlxNnFDcFA0eHZxZEViUHJVTm1GL1dubXg0NFJBbjBzZwpGMjJsTG9NNW1MTE9xaW1pTk9NekNYalY3OXFueGwrMkhwWGtiV1BDaFlwckdOc3FMQkh3SEJCMWNNbUYzQkJKCnRqelBwWlNnb0lKVTBzZXFHVW94Wkl2YXhWdUlNc3VQSWlRbDVNa1phZXRmVmRIZGI0ODRZaVFKTFB1QUZBOTYKK1ZpRzJVanNYMlZRVjZzSzN0N253RGF5eUtEb281TWdQTDFtcHdJREFRQUJBb0lCQVFDZmZTWVNrS0dkaC9VNQpCZnZ5RHZQYmhDMlRCdEpSdUNQZHZaQ2xVZHVtZTloNHBMd2JEdlZyOHVCaVgwRUkwOFRvMlkyeFZxWGdlT2NSCi81VSswRUtyUzA4WG1Vak1uYjhBN3pCenhacUZRQXJaQXB3RGtUbnhEWlFSV1Y5TTVBOUh6Ty9KQThsR1F6Y28Kc3oxUFVVU2MzbHFHc01rQ1RxeWl0Z3ZJeHBTRHJsVGNtcVhrakJUQmtlcTRkTHVhKzlxUjg5dnorVklUUUQ5Qgo2MWg5OEw3SVMrSFlURFd6THRWN3hpeXFVS3R0OVZ2U0lMTk5NMERVZkFqeCtWUDE1eU5uZG1SRnJ1d1h2dVNwClNLSU5xTGlPa0JGaGdUaXJYYzdRQ09GY1BhYUI4cDVSTEZxcnVIQi9ha0hoZGpvTDBCMHA5bzVrV3VSZXo2eTMKQjZ4MTFVUEJBb0dCQU1hZVhvbXkzQWQvZ0pZNkF0VUx1emJxSUVuOUZ4NGwzcDBnUGloS0xsTkdaTEdyWm0xZgpjUCtENzMwdERUUmlVSktZYm5VSXlFZmpvRTJwSk5IYjRRSyswWkJqQXQyUUM1amhCWlkxcjNDbnRvR09JT3RaCmdHS25rbU4zbDJiM2FTQ2xicTBRMmdlZFVBN2xWKzdkaVdpL2NMQTlic0pOVW1xMzkvdDlXWFhWQW9HQkFPUVkKRnJTem5oZlJDQkE4bXVBaWNFUjNaTmtpTkNFMnJhSGFuZG5Mb0dtTXdQUjRiOTMzSFgrOGNCVXNIc3VXQzUxWAo5MklmZUd3ZmxxVTQ0OGQ3N3NNSGpxcGlreEpVcFJOaFAvRWhIVEtvajJMVnRpakIzVFVZWmdiL2tQUzhXSUFVCkw2VkZCcmEvbFdudEVQakFnc0JyU0J1NVl5eEFzSWtPYjBQM0dyeUxBb0dCQUxyUWRzYzVqaThYUkJFSTIyVWIKdGFsL0tZT3VJN0pkbURkZC9salMvU09pa0U5MGtkREo5blMrMmVGNUlIUm5ETFgxM2Q4Q3RhNjRjU3phclNFZQptVk9GdTRMOVBkSzhDOHh0eWwxd2ZXV091ZUM5bUVVRlYvWnkrd1BIbG9ab3ExN2plMmdZODVvNTR2VS96aWVFCkJCeWNCQmdna0M3OW4wbDFaREFOeExsSkFvR0FUZEpLTE96N2kzU3VJNXdKMjE3a252ZDlXUGZxZ1VwK2d6SnIKbU50NHA0cDJhdktNZUZiUG9iMVJJR2dsT2FDLzViY1ZtRXpVY1U5MXZubGlmYlV6Q1NlUzdWOGtmcVNTamNJbwpac1M5aVlNcEtMZHhwd1k5eXRmQU43TUthZlc0M0RvRzU0UmRmZ3h2bGV4a1ZmcVlvYjM0cER6a01UMEEva0lHCmhGSFN0WEVDZ1lBa2h1OVpKSVoxZlQ1L1VDaGdDcG53eG91UDAwZnlYaktDSXp0WDlQbDlOcUxpb0dTOTlDbjkKK2V2MEFtczRjaVdxdWpQbWtsVTNOcVNFSnFBSldEdk8zWlJDamNMTFpqUGdoRDd3VWVEWHRVem9IbERTZGx4dApISjYzaXB0NGhVLzdMT3BGYW1nRElEL1FOQUhqNDlKdWExREdVd2VERHN3bElWQldBZ0VvWnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU8wRlhyWllkaGxpY3dpWEJQcGVIQ3N3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3TjFvWERUSTJNVEV3TmpJdwpNall3TjFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzUGU4cVU4S2JkSDI2MnJhV0F6c3FaZUgvU3orNUl4MGRpMFJ6T2FvUm85V3ZXRHYKWStBSVRMeEQ2amtXcldSZlJTc2c0anZQUjJPVkhLS1ZrK2pZRWhkWW12WDdHaEdZZFB1cjltTUZzdTRrcDc0MQp4Wmk2c2pCYnJKQUtKdXRJYXFSQUNOS2ZEMGF3aXloOXE2cUNwUDR4dnFkRWJQclVObUYvV25teDQ0UkFuMHNnCkYyMmxMb001bUxMT3FpbWlOT016Q1hqVjc5cW54bCsySHBYa2JXUENoWXByR05zcUxCSHdIQkIxY01tRjNCQkoKdGp6UHBaU2dvSUpVMHNlcUdVb3haSXZheFZ1SU1zdVBJaVFsNU1rWmFldGZWZEhkYjQ4NFlpUUpMUHVBRkE5NgorVmlHMlVqc1gyVlFWNnNLM3Q3bndEYXl5S0RvbzVNZ1BMMW1wd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRncyYzBJbHJVQmJ2VEpRaWpiWGM2OTVIZFovTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQWVzaXFWN3lwbGdmSUQrUm40Qzc0eVdHeFovOFp4QUpCOUF5NklFZjVzSlkxaGFkbWkvUmJxClcrNGVNTVpJbjFSTFZ5eS9GRjRBdVZTZE13TVJlOUNrUS8vVHVJNy8vNVFGQlRoOWlmRzZ0djJjaTQzK0NFcFEKOE1MQnlac0dnZW5WZDlVTHNoMFpXdVFub1JrenltM3dsZlU1NmdKdnBIVW1NTkNxdEpuSlc0a00zREFBWXl1ZApIMS9DMzFYeEVhVEhIMVVuSlBKemxkZ1FrTjhLckpBdGpFNHpKTmhLbTF1TVczWXYvYkxEeTBPYWdSVnUxWkJvCmJ1Mm9kZU91aTdwbmxKRGpNUjdvOVJ5Q3JpaGI4UjFybHpuOGtxcU5oeTkrcjlQbzY0V0JjNGJCd1Y4RXdObmoKdG1TTnFqTTBocXZUQTkveVZ1UGdnQkE4TlRiYWo1RUYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lSQUxJVXI4V1pYL2UzWUJJNlFFMGlEakF3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3TjFvWERUSTJNVEV3TmpJdwpNall3TjFvd0V6RVJNQThHQTFVRUF4TUlZV1J0YVc0dFl6QXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRFQ1Ulc4aW5DeHBjakhnTkpxTTlUY3M1Zk9wK0VjN0lMVm1FcXhUbEoyQ3RSakFTaVEKdnYwYy9pWUV2cERUWXpIUEl5QWM3d2Z0NkMzUlU1RzYxdk8vUnpOUmNUMThKWWFhOVhvM0RpZldRUUswbDFhSgozTWdRZHE5OWRzMnRkMytzZXJtQzZlQUs1VmM4aE9ZL3VnVTh1Sks3bHJJSXd0ZWI0V0FUNHJkdGdEZmtZNEpwCmc2YURaSFdUNlVlN2pRVWo5TS91V2sxRkdHdk45bnNKMGZkRUNsMkU3aWtHdXMrT2FDajd4azBNNTR6Zy9hQmkKY3BFcG1neDlseFBzbEhHRGcvZHFqR0Rxb3l3ZFBXV1BTK1NwS3l2YzV2THFqYTVteFFyZ0l6OHllSWVmSm1mMQpicnBRTW5OZXc4aTRtUzZRTUNyTTBaeXRFL25KWnFiR1VES1BBZ01CQUFHamRqQjBNQTRHQTFVZER3RUIvd1FFCkF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXcKQURBZkJnTlZIU01FR0RBV2dCUmNObk5DSmExQVc3MHlVSW8yMTNPdmVSM1dmekFVQmdOVkhSRUVEVEFMZ2dscwpiMk5oYkdodmMzUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRDlTZXlLcWhaVnQwMFlPZk44Rkw4MFI2YU9ZCjhPWTBxekp2SStmV3E4dTcrWVVTbXptbUR4MEZFV3lvaGNZODBaWk1GZC84VE83NTZKRWxHMkg0S29mOXdlRk0KbXF2VndOcFRmbXdjYVIzVHBXOW54ZDh1RXZNbS9qREZFRWU3ampPMmZadEo5V0prN0lzRWdSb252SmF0aXVBVwpKZjArd0s0Wm40ZWJPRU8xRmpaczZOUnNXM1U2N1lWdnlvaWVrS0xpMGVsWTdsWERpeWt2eVhOb2hVMHdnV3UrClV1ZGE0QWlPMVo2OG9xVGhMdGdqZC9EVUtWM0h1OTRRVVkrM3d6eXBDdyt2bDIyQmtWNmppamNHZjVZcjNZUVIKTEpSaGljSGxwSmtzYW1yMzZmOWNpKy9FdGJRcmF6RGdHZzdubCtTc1VUUTBNR0VmV1RlSzlNeGtyaWc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMCtVVnZJcHdzYVhJeDREU2FqUFUzTE9YenFmaEhPeUMxWmhLc1U1U2RnclVZd0VvCmtMNzlIUDRtQkw2UTAyTXh6eU1nSE84SDdlZ3QwVk9SdXRienYwY3pVWEU5ZkNXR212VjZOdzRuMWtFQ3RKZFcKaWR6SUVIYXZmWGJOclhkL3JIcTVndW5nQ3VWWFBJVG1QN29GUExpU3U1YXlDTUxYbStGZ0UrSzNiWUEzNUdPQwphWU9tZzJSMWsrbEh1NDBGSS9UUDdscE5SUmhyemZaN0NkSDNSQXBkaE80cEJyclBqbWdvKzhaTkRPZU00UDJnClluS1JLWm9NZlpjVDdKUnhnNFAzYW94ZzZxTXNIVDFsajB2a3FTc3IzT2J5Nm8ydVpzVUs0Q00vTW5pSG55Wm4KOVc2NlVESnpYc1BJdUprdWtEQXF6TkdjclJQNXlXYW14bEF5andJREFRQUJBb0lCQVFDd2h0c3k5WXFwRk5wTwpDbTVCZCtqUDdQWjlmYksyNi9xYmc0SkdjRitXWTdOSXY4QlJ4aXNNS2xiMkFPU2FscnI2TytNVzk3UDlhVDR5CmM1S211MGpaZzdHbkdkWUZSU1g4bHFFNG1KeHJqRUY2dmRHa2pNQkhwdmpRWjFjMk9xV3N4WmtqRFVCUEUzMDMKdCtneUV3RWw4d2FiTFJJbzVsbkZUVjlEY2M4cWN2Q1k4Z3lMVDVqb0w1bFFidzZlZU9YVG5sN09SZTQxOUtaaApQMUFaaDVRUnduZXhFTXBTVWFyZEMrTlVqSWxnODJmZHU0TjI5Rm5YMlQ5QTU5MmZObkJQcXJkTC92NGJhOEUzCjRtZG9uaS9UajdwcklhY0wrMWVZYUpkQm9rWHRlcFJHRXBKOG1TY002NjFob3pWUC9XdExCSVo5M2RYL0w3MG4KZ3NlU1prNWhBb0dCQVBSbFRXNE5yMit4V2NXc2FOZmtRYU5nYys3NE9YZ1J5RnZRdS9oSW1vSncxVGEwYjM5Ywo3Qjc1S20xeHhBRDRrZllYUStJNjFRbHJKandyaUpwdi92WVFQSXBzcTE0UWxETlhKRE1BNnNsc3NxNEF6c1h3CitVaTAyMXVaT3VBSVdCZHNOYjFTSU5LNWRPMnFPbExScitaandNUWY1c05MWUFPcm9ONzUxY0FuQW9HQkFOMzAKdWNKVjV0Ri9CT213YW02WWtkcDRYQXFhdjhnTFRjRUZScWhwVCt5cU55azNvTEp4NkVrQThKSlhVdEJhZE9OQgoyeDhlQmR5dmhLSE9oNjJRb2d6c3p1MlRFUHlUZ3QzdnpYTENrVmZGSDZYbDhNeFVyQlBuaUlQbEhyVXlOVFg5CkxKWkdDVHZmNlJ1czhEVHlaNkZRdDlPcmV5Y2VFRGVKeG13bFJwTlpBb0dCQUtIa2ZTODY1NHp3aVl3MVVsbzQKL1BZUnpacHVXZnRjcEVHVit2NVVjZTJZZXRTN0grVFpsQnhNWjd1S0VoR21sMkhTTllpbCtqczcvRjc5WTRjUwpTMjJLZ2VBY2JrUm9iUk81Vk9Sb1poODUzdjcrei9vMVQ1ekhHVXdMTEFIOTVRVFhESjQxeWtKczBiVWgvM0tmCkxvdEtad1pFTDZRTXlUU0ZPNUtaSXV3ZkFvR0JBTmR4ZXZZMTU2eW1mS0JSUzU0Nm5palA5NWViaWxpbEVENHgKM3RvT0R6U01MS3JuZ2laMEJxTUdOSDM0SVR4NDhVaStYZkdnZE5RMzBxZzFEdUhjcUUrZmRXU0tBazBJNmxoLwpNbzhZYVhnbXNZZVk0Tm1WdnNvN1RmbW81dHUrOW9PSFVrWXppVGNES3dSZ0kzRmhjbEhWUmZwQ1UzSXU3bExhCmV5M3lLTVZSQW9HQU1xTTBPMnJHQ2x6WHh5ekw4RHdEZjZTM3ByQ3NTTTU5MjdOcVdSQXkrMy9CdjhBTStscUUKeGZXSmc4T1VTWjVXeEt4VWVxVjNQeUQrM3UzeS9qak03Um5aYWp0T1BUOWRRTWFtaGFzR2xucDU0RUJBanlJVQpHeURNdU03YUlhT0lzUXowTCtydnA3dnp1UjNvOEhaNHUzWVhhU0JzRVFITWxpdkIxN0c0TUdzPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-ca-cert
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU8wRlhyWllkaGxpY3dpWEJQcGVIQ3N3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3TjFvWERUSTJNVEV3TmpJdwpNall3TjFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzUGU4cVU4S2JkSDI2MnJhV0F6c3FaZUgvU3orNUl4MGRpMFJ6T2FvUm85V3ZXRHYKWStBSVRMeEQ2amtXcldSZlJTc2c0anZQUjJPVkhLS1ZrK2pZRWhkWW12WDdHaEdZZFB1cjltTUZzdTRrcDc0MQp4Wmk2c2pCYnJKQUtKdXRJYXFSQUNOS2ZEMGF3aXloOXE2cUNwUDR4dnFkRWJQclVObUYvV25teDQ0UkFuMHNnCkYyMmxMb001bUxMT3FpbWlOT016Q1hqVjc5cW54bCsySHBYa2JXUENoWXByR05zcUxCSHdIQkIxY01tRjNCQkoKdGp6UHBaU2dvSUpVMHNlcUdVb3haSXZheFZ1SU1zdVBJaVFsNU1rWmFldGZWZEhkYjQ4NFlpUUpMUHVBRkE5NgorVmlHMlVqc1gyVlFWNnNLM3Q3bndEYXl5S0RvbzVNZ1BMMW1wd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRncyYzBJbHJVQmJ2VEpRaWpiWGM2OTVIZFovTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQWVzaXFWN3lwbGdmSUQrUm40Qzc0eVdHeFovOFp4QUpCOUF5NklFZjVzSlkxaGFkbWkvUmJxClcrNGVNTVpJbjFSTFZ5eS9GRjRBdVZTZE13TVJlOUNrUS8vVHVJNy8vNVFGQlRoOWlmRzZ0djJjaTQzK0NFcFEKOE1MQnlac0dnZW5WZDlVTHNoMFpXdVFub1JrenltM3dsZlU1NmdKdnBIVW1NTkNxdEpuSlc0a00zREFBWXl1ZApIMS9DMzFYeEVhVEhIMVVuSlBKemxkZ1FrTjhLckpBdGpFNHpKTmhLbTF1TVczWXYvYkxEeTBPYWdSVnUxWkJvCmJ1Mm9kZU91aTdwbmxKRGpNUjdvOVJ5Q3JpaGI4UjFybHpuOGtxcU5oeTkrcjlQbzY0V0JjNGJCd1Y4RXdObmoKdG1TTnFqTTBocXZUQTkveVZ1UGdnQkE4TlRiYWo1RUYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBc1BlOHFVOEtiZEgyNjJyYVdBenNxWmVIL1N6KzVJeDBkaTBSek9hb1JvOVd2V0R2ClkrQUlUTHhENmprV3JXUmZSU3NnNGp2UFIyT1ZIS0tWaytqWUVoZFltdlg3R2hHWWRQdXI5bU1Gc3U0a3A3NDEKeFppNnNqQmJySkFLSnV0SWFxUkFDTktmRDBhd2l5aDlxNnFDcFA0eHZxZEViUHJVTm1GL1dubXg0NFJBbjBzZwpGMjJsTG9NNW1MTE9xaW1pTk9NekNYalY3OXFueGwrMkhwWGtiV1BDaFlwckdOc3FMQkh3SEJCMWNNbUYzQkJKCnRqelBwWlNnb0lKVTBzZXFHVW94Wkl2YXhWdUlNc3VQSWlRbDVNa1phZXRmVmRIZGI0ODRZaVFKTFB1QUZBOTYKK1ZpRzJVanNYMlZRVjZzSzN0N253RGF5eUtEb281TWdQTDFtcHdJREFRQUJBb0lCQVFDZmZTWVNrS0dkaC9VNQpCZnZ5RHZQYmhDMlRCdEpSdUNQZHZaQ2xVZHVtZTloNHBMd2JEdlZyOHVCaVgwRUkwOFRvMlkyeFZxWGdlT2NSCi81VSswRUtyUzA4WG1Vak1uYjhBN3pCenhacUZRQXJaQXB3RGtUbnhEWlFSV1Y5TTVBOUh6Ty9KQThsR1F6Y28Kc3oxUFVVU2MzbHFHc01rQ1RxeWl0Z3ZJeHBTRHJsVGNtcVhrakJUQmtlcTRkTHVhKzlxUjg5dnorVklUUUQ5Qgo2MWg5OEw3SVMrSFlURFd6THRWN3hpeXFVS3R0OVZ2U0lMTk5NMERVZkFqeCtWUDE1eU5uZG1SRnJ1d1h2dVNwClNLSU5xTGlPa0JGaGdUaXJYYzdRQ09GY1BhYUI4cDVSTEZxcnVIQi9ha0hoZGpvTDBCMHA5bzVrV3VSZXo2eTMKQjZ4MTFVUEJBb0dCQU1hZVhvbXkzQWQvZ0pZNkF0VUx1emJxSUVuOUZ4NGwzcDBnUGloS0xsTkdaTEdyWm0xZgpjUCtENzMwdERUUmlVSktZYm5VSXlFZmpvRTJwSk5IYjRRSyswWkJqQXQyUUM1amhCWlkxcjNDbnRvR09JT3RaCmdHS25rbU4zbDJiM2FTQ2xicTBRMmdlZFVBN2xWKzdkaVdpL2NMQTlic0pOVW1xMzkvdDlXWFhWQW9HQkFPUVkKRnJTem5oZlJDQkE4bXVBaWNFUjNaTmtpTkNFMnJhSGFuZG5Mb0dtTXdQUjRiOTMzSFgrOGNCVXNIc3VXQzUxWAo5MklmZUd3ZmxxVTQ0OGQ3N3NNSGpxcGlreEpVcFJOaFAvRWhIVEtvajJMVnRpakIzVFVZWmdiL2tQUzhXSUFVCkw2VkZCcmEvbFdudEVQakFnc0JyU0J1NVl5eEFzSWtPYjBQM0dyeUxBb0dCQUxyUWRzYzVqaThYUkJFSTIyVWIKdGFsL0tZT3VJN0pkbURkZC9salMvU09pa0U5MGtkREo5blMrMmVGNUlIUm5ETFgxM2Q4Q3RhNjRjU3phclNFZQptVk9GdTRMOVBkSzhDOHh0eWwxd2ZXV091ZUM5bUVVRlYvWnkrd1BIbG9ab3ExN2plMmdZODVvNTR2VS96aWVFCkJCeWNCQmdna0M3OW4wbDFaREFOeExsSkFvR0FUZEpLTE96N2kzU3VJNXdKMjE3a252ZDlXUGZxZ1VwK2d6SnIKbU50NHA0cDJhdktNZUZiUG9iMVJJR2dsT2FDLzViY1ZtRXpVY1U5MXZubGlmYlV6Q1NlUzdWOGtmcVNTamNJbwpac1M5aVlNcEtMZHhwd1k5eXRmQU43TUthZlc0M0RvRzU0UmRmZ3h2bGV4a1ZmcVlvYjM0cER6a01UMEEva0lHCmhGSFN0WEVDZ1lBa2h1OVpKSVoxZlQ1L1VDaGdDcG53eG91UDAwZnlYaktDSXp0WDlQbDlOcUxpb0dTOTlDbjkKK2V2MEFtczRjaVdxdWpQbWtsVTNOcVNFSnFBSldEdk8zWlJDamNMTFpqUGdoRDd3VWVEWHRVem9IbERTZGx4dApISjYzaXB0NGhVLzdMT3BGYW1nRElEL1FOQUhqNDlKdWExREdVd2VERHN3bElWQldBZ0VvWnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU8wRlhyWllkaGxpY3dpWEJQcGVIQ3N3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3TjFvWERUSTJNVEV3TmpJdwpNall3TjFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzUGU4cVU4S2JkSDI2MnJhV0F6c3FaZUgvU3orNUl4MGRpMFJ6T2FvUm85V3ZXRHYKWStBSVRMeEQ2amtXcldSZlJTc2c0anZQUjJPVkhLS1ZrK2pZRWhkWW12WDdHaEdZZFB1cjltTUZzdTRrcDc0MQp4Wmk2c2pCYnJKQUtKdXRJYXFSQUNOS2ZEMGF3aXloOXE2cUNwUDR4dnFkRWJQclVObUYvV25teDQ0UkFuMHNnCkYyMmxMb001bUxMT3FpbWlOT016Q1hqVjc5cW54bCsySHBYa2JXUENoWXByR05zcUxCSHdIQkIxY01tRjNCQkoKdGp6UHBaU2dvSUpVMHNlcUdVb3haSXZheFZ1SU1zdVBJaVFsNU1rWmFldGZWZEhkYjQ4NFlpUUpMUHVBRkE5NgorVmlHMlVqc1gyVlFWNnNLM3Q3bndEYXl5S0RvbzVNZ1BMMW1wd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRncyYzBJbHJVQmJ2VEpRaWpiWGM2OTVIZFovTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQWVzaXFWN3lwbGdmSUQrUm40Qzc0eVdHeFovOFp4QUpCOUF5NklFZjVzSlkxaGFkbWkvUmJxClcrNGVNTVpJbjFSTFZ5eS9GRjRBdVZTZE13TVJlOUNrUS8vVHVJNy8vNVFGQlRoOWlmRzZ0djJjaTQzK0NFcFEKOE1MQnlac0dnZW5WZDlVTHNoMFpXdVFub1JrenltM3dsZlU1NmdKdnBIVW1NTkNxdEpuSlc0a00zREFBWXl1ZApIMS9DMzFYeEVhVEhIMVVuSlBKemxkZ1FrTjhLckpBdGpFNHpKTmhLbTF1TVczWXYvYkxEeTBPYWdSVnUxWkJvCmJ1Mm9kZU91aTdwbmxKRGpNUjdvOVJ5Q3JpaGI4UjFybHpuOGtxcU5oeTkrcjlQbzY0V0JjNGJCd1Y4RXdObmoKdG1TTnFqTTBocXZUQTkveVZ1UGdnQkE4TlRiYWo1RUYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRSVBxOE9WQXdEWWNhb1o0ZzVNQmlOakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qQXlOakEzV2hjTk1qWXhNVEEyTWpBeQpOakEzV2pBUk1ROHdEUVlEVlFRREV3WnlaVzF2ZEdVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFDdnBpZllsRDFFZ0xLZ2FqaTQrY0hKTW1ab0h1YURVRGVCVDBiTXM0L1NsajlPSTVmOTVDSmYKR1o3c1NLTGtEUnNiQXdmYml1OTRIOUFkUFpGejNMRFY5TTM2cWVFMHZweHp4UHYyaFc5a3Y4ejE3eWJENGoxSwpxVkRLdXY3eWpLZ1k5bUZ3SjJEaDcxQkh3MVc2S0E1VjlNNEEvL1RUanNoVFdjK0JQZk1weVFaU2hoa2dBNXdFClF5elFIam1wcSt1R1JlZVpnOFI2NmIvY3k4NmphSzFzb01HYnNOUHp0enN5Njk4bEZKTEZ1aUtqZklhaEw4VE0KOWdQVFVkQXBOWHhwMzB2K0hBcmpMVFVFMGkxQmo1eGRvc0l1OU5CbkhWNU9XbThXOXNHZlpFaVBBQVVRVlluYQpETUFrTVE5ZjFubmxjVGZqWXdhb2NtZnQ1YnBrSmI4ZkFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGCm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JSY05uTkNKYTFBVzcweVVJbzIxM092ZVIzV2Z6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBUVNvTlBkLzYyMGtpemdQYXdBeXR2V09yOUo0MFJYRnZyek82RENad00zOWMwc001UmtJS0JyYUN4QWlMCkhITEhSbExkdFpMaTNFTW42UnUrNmhFN1R3Nld3bFljdDZ1ajJOWlVJQ0MvVlgzZ3IvL2VIYzNiclFhSTNSejIKdnpuM21YSVlrcWFnQ0FEd3JoME1qTkdFbUN3K2VOV3JZTEZxM25TSlkvUlZFZzdRSDVnRE5Nb1p0MjlqTVY1OQpxMk05ekpJUWljTGgzd3dDWFJtVGhvRzZnSjJkMDdIVEEwMHJhaVR1eXhDUnRQb3c2WnFiSng4NjE0Y3BlTFZMCkVha0tQT1Z5YWErVWRzQWlhSnRDcVdIaVp0NWRTMnNnVnZ2ZDhXa1llcW5TbjdlaTZNbm1Kbnl5UkFJakJ6b0EKdEJ5RVVobWgrTW9SN2dETS8xV1htb1h4aFE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcjZZbjJKUTlSSUN5b0dvNHVQbkJ5VEptYUI3bWcxQTNnVTlHekxPUDBwWS9UaU9YCi9lUWlYeG1lN0VpaTVBMGJHd01IMjRydmVCL1FIVDJSYzl5dzFmVE4rcW5oTkw2Y2M4VDc5b1Z2WkwvTTllOG0KdytJOVNxbFF5cnIrOG95b0dQWmhjQ2RnNGU5UVI4TlZ1aWdPVmZUT0FQLzAwNDdJVTFuUGdUM3pLY2tHVW9ZWgpJQU9jQkVNczBCNDVxYXZyaGtYbm1ZUEVldW0vM012T28yaXRiS0RCbTdEVDg3YzdNdXZmSlJTU3hib2lvM3lHCm9TL0V6UFlEMDFIUUtUVjhhZDlML2h3SzR5MDFCTkl0UVkrY1hhTENMdlRRWngxZVRscHZGdmJCbjJSSWp3QUYKRUZXSjJnekFKREVQWDlaNTVYRTM0Mk1HcUhKbjdlVzZaQ1cvSHdJREFRQUJBb0lCQUJYTzhubVFoajdnSDgyTgpBcmZzd3FQQmJ6ZVVScGlkT0JjRkNjeFdxdy9CZWVDd3lLbE1Udnd4eVNxYkppWmNmallQWFVWajdiR2plWXAzCjMzeGNOVlNMVFp2R3hlQnZuaXM5bE84WnlDZmhMSWlJaGU2aVEydm1zOUpILzJtTUR6N3lNRXpsaHNEbW5yZ2EKUjZXU1haMU1oTnRZN0VQc0lYRS80R1N5bFdObGpvZm1XNmtsRWE1VXNQWG1URng5bTZoNWZCaGJISnRWR3BtRgpTQlRxT2llWVZQK2NhRUp6QU1BRGRFd2N6V1NkM2EyUXluREhWdXZOeTF6TTZ1SkRCUWJwaE9lYmM3UjBQZ1QzCmxXSFlpTEY2Ylo2bDVNd2xEdVpZRndSamZFQzF3eHVlcmd4TU1ObmdUUFlCU2gzMkRZZlRpejNRYUlrMmFFMngKemVCKzUyRUNnWUVBenNlbkZTemt4dkxPTDZtYW91aTVzWTlBUjB4dzJRUVEyMjVQa2I2YytGK0lGc1VQNVVjYwpPR1FCa2cwcmRZVFBUMzJFNUFlYU9iaHF1SFJnOUpjaUFsbzJuNW9hcnBQNVFaQTBNNThQSjhxbU1QUjVsWjB5CmpuVEY4TXR3QjlhMVRPZno4WHNoWEJFZk9SVXlUNW1SME84dExzYUdIckpsY2dURURZUnduMjhDZ1lFQTJYV0QKTWFXajB3ckdodmFuUWZqcXE4bi9HSVQ1VjgyQUpHOSs3TEZnM05ydWpiVUQ2ZFZ2RmJkSUM3c0lyM2pnNzh2QQoxRnFLODBaN1pya3h2WjBuU2MxQ0xiRTdQVXFraVN4RXpaTlhFUi8xNVBuUCtPQlNlYW83TWV4dlJGVkFkeWhECjNpR0RiTXl5eTJvSk9NeEZucTJPZUlGMG1lTGtmRGNtNlUwckExRUNnWUJ4SjFJb1JVdmdEc2lEem9UL2R1aisKNEV3bGVCQWN3WnZUNkRhRW85RlVIVHJrY3V2eTVJbnQxZFFDTDFERDIyeHlyRlpIVGwyNERsSGdKRmRXSVVvTQpEWC9zc0xDL0xkeHRZMU1kbUlIN25XcDZTWjRySUQybE5RT0lkRnNXL3doeFVGRHVxUm1sUHYxZUNGcGlzci9YCm5McVY2UzlGcHd2YWEvODVBbXQ2NHdLQmdRQ2kvU290THdxZ1p1WXdTSFZLeEdnWUJKblg1ZXNCdlh4N1VycGUKYkFDKzZMVityeHRVeTIyc2FDaHU2bXZ6SVhYdkpkZk5FbVF0UFRuRzM2NEJnZVh0c2hRVkxVN0tmTVRnTDdjTwpJbzVTdnBMT1lkTllwY0lMZ09WSFlRQnd4amxBVm9TdjNJeW1Jck1zTmJqZHduVzRIanUzNU1maGc2ZGYxdktxClVQV1pVUUtCZ1FETnJtaVdtL3RSQzFZMVFhMXFDczM2WnlGV3FUQkhjdU9EaXdZaklsUndNNHVhbFJGajhoV2kKTGNaaktLSFF3aVZJdHpYVW9uSCtBdys2TFczK2Q5QTJ6ZEhYVksrRE1sYmJkRys5ck43MVljK3NiZ1BtM3h6QQpzUzNRM3hKNjNLU0E1MU4yc3ZUNHNKZFUwdHd0V05ac25aVWhtekg4QWhuZkFETCsxUS9qWXc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU8wRlhyWllkaGxpY3dpWEJQcGVIQ3N3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3TjFvWERUSTJNVEV3TmpJdwpNall3TjFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzUGU4cVU4S2JkSDI2MnJhV0F6c3FaZUgvU3orNUl4MGRpMFJ6T2FvUm85V3ZXRHYKWStBSVRMeEQ2amtXcldSZlJTc2c0anZQUjJPVkhLS1ZrK2pZRWhkWW12WDdHaEdZZFB1cjltTUZzdTRrcDc0MQp4Wmk2c2pCYnJKQUtKdXRJYXFSQUNOS2ZEMGF3aXloOXE2cUNwUDR4dnFkRWJQclVObUYvV25teDQ0UkFuMHNnCkYyMmxMb001bUxMT3FpbWlOT016Q1hqVjc5cW54bCsySHBYa2JXUENoWXByR05zcUxCSHdIQkIxY01tRjNCQkoKdGp6UHBaU2dvSUpVMHNlcUdVb3haSXZheFZ1SU1zdVBJaVFsNU1rWmFldGZWZEhkYjQ4NFlpUUpMUHVBRkE5NgorVmlHMlVqc1gyVlFWNnNLM3Q3bndEYXl5S0RvbzVNZ1BMMW1wd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRncyYzBJbHJVQmJ2VEpRaWpiWGM2OTVIZFovTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQWVzaXFWN3lwbGdmSUQrUm40Qzc0eVdHeFovOFp4QUpCOUF5NklFZjVzSlkxaGFkbWkvUmJxClcrNGVNTVpJbjFSTFZ5eS9GRjRBdVZTZE13TVJlOUNrUS8vVHVJNy8vNVFGQlRoOWlmRzZ0djJjaTQzK0NFcFEKOE1MQnlac0dnZW5WZDlVTHNoMFpXdVFub1JrenltM3dsZlU1NmdKdnBIVW1NTkNxdEpuSlc0a00zREFBWXl1ZApIMS9DMzFYeEVhVEhIMVVuSlBKemxkZ1FrTjhLckpBdGpFNHpKTmhLbTF1TVczWXYvYkxEeTBPYWdSVnUxWkJvCmJ1Mm9kZU91aTdwbmxKRGpNUjdvOVJ5Q3JpaGI4UjFybHpuOGtxcU5oeTkrcjlQbzY0V0JjNGJCd1Y4RXdObmoKdG1TTnFqTTBocXZUQTkveVZ1UGdnQkE4TlRiYWo1RUYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRWkgvT3lLQ2crb3pjK2gvTDdneHl0VEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qQXlOakEzV2hjTk1qWXhNVEEyTWpBeQpOakEzV2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBcTRtM3J5YjBJSzFLWUhUMExicVkKcHcvV09wWHRCSXdXS05FOUxhSXZQMjlHL3Bua3EvdWVNUXpyREl5Vm53THV1aExsbmhJeUpzU1dtYW5xb1ZnUwpYS1RhTzVScUU2M3pzOE5ITkEwVjl4b0h0VTVVSlhIVkVPRXNjVGczS2phSlROSW1uRXNWejVhTldSN3hSMUwvCjJpdWVqZ3BzUWx1ZUY0UVQvUlpHWVEvc0IzUk9JV3UxZXpEREhxSlp2bUc3S1hVQ3RSWUEwVUhlcWI1bm9JS3cKR2JzS2hEL0ZJSmFtclB4aE9oZVgzRWhzU3BpTXE4M0E3K3VlRUdwZVRlWTRaQkcwR2xPVVZ1dHZ3dXdZQlcxZgpER1pVcTdpWlJxWlB0Z1ZNN2w2MUVJVHBSTXdYUWpMMHk3Z1p2ZHpaVHkvcGM5SEJCTGM4TUpnRXRvcTBoNWtGCjN3SURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JSY05uTkNKYTFBVzcweQpVSW8yMTNPdmVSM1dmekI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUFFMDBMZXdnclJZMnUzelpZbm54dUFRNnFQbjdCS09XTXFsZGU3TGQ2S24xMmg0VXV0CjlJUXV6elJjOGlEVGJMQS93cDBUZ0xWbkVtZk9OS1ZkblpzV0VqeUs2cnNNS1Y0NENqeDJPdGpwMzRqVkd1aU4KYUcxQTh2TXlERFF4OG95blcwN3FPaGtQMlpjUUpPaG45UVZMNlZlNzBWVFp5ZzU1RURLR2lBT0lzdDBlZUgzegpKK295RlN5SDdsZ2hJNmVRZ1VYRGRmWjMwSDkzRTlJMC9HUSsxOHdxeG81bDJJWDJ4S0dwY0R4UDIreTRvZ3JiCkZKY0R6cXhHUHY4dzRFZkxqd0lwelk3TXdaVXRxclhDdG13NU9BMTg2RWlFQnpha09CZDJLa1ZxVE9hZkFTdFAKdkttQkZiNlpqRiszRTVXT0F0ZW1BZU1MeFZOaGZueWdoSVE0Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcTRtM3J5YjBJSzFLWUhUMExicVlwdy9XT3BYdEJJd1dLTkU5TGFJdlAyOUcvcG5rCnEvdWVNUXpyREl5Vm53THV1aExsbmhJeUpzU1dtYW5xb1ZnU1hLVGFPNVJxRTYzenM4TkhOQTBWOXhvSHRVNVUKSlhIVkVPRXNjVGczS2phSlROSW1uRXNWejVhTldSN3hSMUwvMml1ZWpncHNRbHVlRjRRVC9SWkdZUS9zQjNSTwpJV3UxZXpEREhxSlp2bUc3S1hVQ3RSWUEwVUhlcWI1bm9JS3dHYnNLaEQvRklKYW1yUHhoT2hlWDNFaHNTcGlNCnE4M0E3K3VlRUdwZVRlWTRaQkcwR2xPVVZ1dHZ3dXdZQlcxZkRHWlVxN2laUnFaUHRnVk03bDYxRUlUcFJNd1gKUWpMMHk3Z1p2ZHpaVHkvcGM5SEJCTGM4TUpnRXRvcTBoNWtGM3dJREFRQUJBb0lCQUVtN2xwTFpBWktTS2lndgozVTFTcVk4VnhaWEZIKzRXY09mMm1IOW0rVHdoRHJrZFdTZDdybEdUSmUxcytGc3pIWDRwNVR6K3dVUGN1SWN3CmZFUUI0VktsSVpEK2lHSVJJWEdoZkplcEVFbjRqRnVvWVk3KzBRRENhU0g1Y2V6WktFYzNCWldreUtsRUkxbXQKYlRTbFBvaCt1MVorc0c0TmgzVEFOdjlRZGN2K0llRUxySVB3bzVhV290dFI2MG1ERFlMN0pFQ1Nhb2d6TGZyWQp5b2lsTGZiSmZWa29zWG1EeHRXOXlZcVpVbU9zMGFYVnduMzB1TzFwMVFRMHFnSkF6Z1lsdjlvQzAzanU0MGtPCi9yOVR1VUlkRzgzT3o1cjI1dkt6Q3VnY0pibnJMbFczSUtTU250WEhjVXJvT3ZxVTJjUGo5WTNIVFZKN3JhcmEKcXJyQmtBRUNnWUVBMUlWOEdsYXZ0RlBkdFBjVGVlKzliTGdsWHh3MkFjVFpId0EzYUp5WmI3ZEJISDJvYzJrTQpHV0lyZEpGMEp1L09vdVZpZlZlSUpvc3h0VkFreU1UUFBrU1BVZlJqeUg1N0thNEMvd29DRWF2TzkyZ1ZwMFVtClVmWWZqK0s0Nlluck5LL0luY3BZa1ZwcDdjWXpQdHMwRzVIWEh4Y2tacDI2cDNSYTZ4V2w3QUVDZ1lFQXpxSEgKemlpbmVIdGRndHZqRXorbk5JWTA4a2ZxZEl2dUhpeUNtblREdTJWVnRINnM0em9lclk3U21tUys0SDVFZkFqNgpBV2pSTXpYdm1HVytSRDgzdWYzakR1T1hLT01vcElWM3ovTllVbVVyQ2padmc2NzJCZGRjcFRCZTF3TVRRb3F0Ck9xZ20xdU9ObkxsbDVyRDdUM0s2NmkxdkhCUHY0alRjY0Q3a2NkOENnWUVBbjgzQUJBNHJFTzMvU0pTQmtLODEKUVFzM0RzMm56cXkybHhrU2tSY3dTVkVESk9sWVFYQThLTm9vMHY2TTJMcDZKd05WaStyRjlqVzBxeUlZaHQ5Mgo5dHVXNllsYmZ1ZWN0VHFrQmlNQWEwbEYxOFBzaEZyNjlhYWRGUlRtOXJVK3A5K0dleUFzZVNBRGgwZ0NRTUdUCjdTYzlHNlBMTzE1ZmZJdUIwa1AxQUFFQ2dZRUFsbEZpeFRzVitiUGxKeGxIYSsxV2VnTlg2UmtnR29EaFROb2MKZUxpUTIzYXdqb25JdzlTNEZKSmQ2eXQzSUdFNitQQ2V6dit0a0krZ0tVRjYxTE1ZbXhsellKVjRsYW9MR3dSdApVTDQ2ZGxaYXBTZE1vSU5iUG95WlBTS2ZHOU9FNDFkM0JjRGw0RlhSNHoyTVAvSm9JRGZhZWhsclJ3WEo4TWw3Cnc3dzgvQWtDZ1lCWmdlV3R3QW5YSjVyUHlHS1Y3SGJWRjZucHBZQTVCQ1dVQm5US0czeWFValROMUJ1ZHZNUWUKL2h1ZGJpdllmVkhUcE1RclpuNUpURmJRblN0eHlPamE2R1NwdWcwek9xZ0laNWl4ZlQyNnBvNTRNL0RGbUxpTQpRd3d2YkRjMlpzSTBzK3lmOGFxV05UcUtGS2dyYUlSU2ZkMnpuVEJGUVVyb1BFUmJFdGk5R1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU8wRlhyWllkaGxpY3dpWEJQcGVIQ3N3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3TjFvWERUSTJNVEV3TmpJdwpNall3TjFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzUGU4cVU4S2JkSDI2MnJhV0F6c3FaZUgvU3orNUl4MGRpMFJ6T2FvUm85V3ZXRHYKWStBSVRMeEQ2amtXcldSZlJTc2c0anZQUjJPVkhLS1ZrK2pZRWhkWW12WDdHaEdZZFB1cjltTUZzdTRrcDc0MQp4Wmk2c2pCYnJKQUtKdXRJYXFSQUNOS2ZEMGF3aXloOXE2cUNwUDR4dnFkRWJQclVObUYvV25teDQ0UkFuMHNnCkYyMmxMb001bUxMT3FpbWlOT016Q1hqVjc5cW54bCsySHBYa2JXUENoWXByR05zcUxCSHdIQkIxY01tRjNCQkoKdGp6UHBaU2dvSUpVMHNlcUdVb3haSXZheFZ1SU1zdVBJaVFsNU1rWmFldGZWZEhkYjQ4NFlpUUpMUHVBRkE5NgorVmlHMlVqc1gyVlFWNnNLM3Q3bndEYXl5S0RvbzVNZ1BMMW1wd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRncyYzBJbHJVQmJ2VEpRaWpiWGM2OTVIZFovTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQWVzaXFWN3lwbGdmSUQrUm40Qzc0eVdHeFovOFp4QUpCOUF5NklFZjVzSlkxaGFkbWkvUmJxClcrNGVNTVpJbjFSTFZ5eS9GRjRBdVZTZE13TVJlOUNrUS8vVHVJNy8vNVFGQlRoOWlmRzZ0djJjaTQzK0NFcFEKOE1MQnlac0dnZW5WZDlVTHNoMFpXdVFub1JrenltM3dsZlU1NmdKdnBIVW1NTkNxdEpuSlc0a00zREFBWXl1ZApIMS9DMzFYeEVhVEhIMVVuSlBKemxkZ1FrTjhLckpBdGpFNHpKTmhLbTF1TVczWXYvYkxEeTBPYWdSVnUxWkJvCmJ1Mm9kZU91aTdwbmxKRGpNUjdvOVJ5Q3JpaGI4UjFybHpuOGtxcU5oeTkrcjlQbzY0V0JjNGJCd1Y4RXdObmoKdG1TTnFqTTBocXZUQTkveVZ1UGdnQkE4TlRiYWo1RUYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQVArRXZUY0NwTWNGL2tPSlRWclRFeDB3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3TjFvWERUSTJNVEV3TmpJdwpNall3TjFvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQW9heTVDeE9veFd6M0pWOWNQM0VRaHN5UGZMWnYKVkpJRkc3eExucE82SWczS2VGVUxpcVhadVpOeFBpaWRpTzY2M2ROb0o0bkNpeGxNV21wZlJRMXRPL1pqdkF3Mwo1QSs2UVc5Ylo2UldSeUViUXJLaTFqeFRsN00zTXJ4c05aUjNnZ2tRVGVBQWlSRHo0OVNsZ01icjg1d3FDeDFyClFrc0hSQUFnQkJXNEdwamxCSU5jWFV4RzBZMlNmREZ1T0tOU1EyYllQczV3djJPN1ZqYVgwdUNxQTdYS01sQkIKMkNHVldSLzZFZzlYZzYva3dXWmZoTGJZR0lBWDRoeWVja2FvMFpSTlR3elpjdE9YKzVxcy9GYnJiQXJ5KzZyVQpsMExsK1QxQUp0SnZYWHdrb29IUHh3cnM0R2IzSGYyK0V2ajc1UXB4dTV1aGpndENuVXZmSlRrMWN3SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUmNObk5DSmExQVc3MHlVSW8yMTNPdgplUjNXZnpBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBSmJiQzA4Q2dCaW1vbzFSV2VaR0xROE0rSUlHdi92S2hpK1N4c21LZkE0L0FLeFoKcUdWUlB4cVR3U2VmWCtRaGdwcDRsZmo4YjhCVy9ncHdtcDVpVFNDRU4zaUhXaE9pekc3cjBUeWRDdTk5OFQ1NwpjbXEybFIrZm1ibjdJU2txdE9CcWdPUmpNb1JZL2hIb2FCRmZGY3lQNXFKbE5YcWIvYjRxRXZWM0dwaGRYbjNpCjE0UGNPYnZHWWVGNGtJUkJCRW9aNzN5bzFoTUwvUUdyemZBQkF1RzhuL1pLbkE4NTJ5cTFKUFlCb3BDSzhEa3kKZy9sazNWTUx1L0NDdzZ3S0lTOXRHWmIwWThxOUptdmdHdk9NaVc5V2xQcE1QNjdHZVBuMmFvYlFyanEyRXVORgpVNUJWNGFjRlllTnNEcU5rSmUvUzVXb3d5OU5pcTl5ZHhmTFJmaWM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBb2F5NUN4T294V3ozSlY5Y1AzRVFoc3lQZkxadlZKSUZHN3hMbnBPNklnM0tlRlVMCmlxWFp1Wk54UGlpZGlPNjYzZE5vSjRuQ2l4bE1XbXBmUlExdE8vWmp2QXczNUErNlFXOWJaNlJXUnlFYlFyS2kKMWp4VGw3TTNNcnhzTlpSM2dna1FUZUFBaVJEejQ5U2xnTWJyODV3cUN4MXJRa3NIUkFBZ0JCVzRHcGpsQklOYwpYVXhHMFkyU2ZERnVPS05TUTJiWVBzNXd2Mk83VmphWDB1Q3FBN1hLTWxCQjJDR1ZXUi82RWc5WGc2L2t3V1pmCmhMYllHSUFYNGh5ZWNrYW8wWlJOVHd6WmN0T1grNXFzL0ZicmJBcnkrNnJVbDBMbCtUMUFKdEp2WFh3a29vSFAKeHdyczRHYjNIZjIrRXZqNzVRcHh1NXVoamd0Q25VdmZKVGsxY3dJREFRQUJBb0lCQVFDQ3FsMFhoYmtHYnMzRQpSN0QvbVRxNUo0VGtUM0hsRU9yT0FyMi9HVGY3STlnNnJzbFlNamlva25DWXd5eW5LZ0tmRzZoM0pCQzJhU2piCmZsTW5OUFhPMjVDNXY4cEFLVEhvaHI2Q0lrQ1UxajM1QnZVeVhxbFUxc1JLM2h3NnBaWjg0eVJwUEJ4U3F2L2kKWjgrbko1NDFVa1pzbTBjLzJmR3lWTU9MYVo1VTUycFEydXhjaW5QQ3h1TVBlZ3d0KzJNbXBWOFZHNFlBcmFJKwp3MVBpa2tRcFAxUDJLR1gxZEQwQ0c3aCtrOFdnam16VW0yTGNRLzh3KzU1Mm5uUzdVTkh4V0dKN1ZQSElqVmRhClZBbXhoWnV1K3hzMUgyeVRZVFN6UFZnS1I4ZHBrcWZvdmljQWJRRFlSNnRpdHdBUVdlOW1UeW1RZWFYQVczOHAKbmUxdHZzalpBb0dCQU1USFpKVFBHRi9lMEJhU1lYVDYzdlRxeFpSL0RHN3NqcG15ZXV3Q3pFdFYweHVGYXQvZQpoT2xxSnFRb1YwRkpOMzBiUFloa2NwMTgwbHMvejhlTVkyazlWTXZONGVoRXZEMm1JNy9tSHhEK05abmNvRXk0ClQ4dmhEclY4TGhQeGVWVlFjSE03Q2NyeFF5aEdKbnpaYks0OFB4WVgyajJUWlh2TVVhdkhSSVROQW9HQkFOSlUKeEpZT2M5cUM0eDI0NHFwTTdrNTF0WEhPbnpBdi9VYTh2emhzNzNsNDFYeVhaK2hSdjg2RjVGS2hPWU9ZNVhIZAp4TzVZcmlmckVkY0RMcGR5NmJSS1ZSZCttK0k3djg0RjJ1VlluRUNVcGxxaUNFRjU3OVJZTEZKbWViaGFXdCtMCkw2NXdGQU81ckN4bS9sUFNQUXVCbGJJUmxFUkhNd3N0TUlMV0JxTS9Bb0dCQUxaZ0pyUlVqRDZ1ZnlXc1hXN1IKNURvU0xUVEgyM29pL0xjdVdBYk5RUkxCWkhzcFdEaE1QOXNsYXRMU0lLeDljMVFjSHhkK0lVd2RGOGxDaHd4bQo3T3ZveitKajJuQXU1Rmd1MXd0UCtKTURTQ0psL0p1ZVp6YUtTOXVnVUFSajFSUmhEUmQvTEVCUEF2TWNzU2NkClRFRGZ6WWhvYXZpTzE0dTVmaWc2OHlJeEFvR0FNMnhrTCtmU3JXN294a0NJc21oaXJ5NGFNWHY1OFpjYURteGgKT0JOeUxUbTh3RnhvSENXNGhtNjMxdmZ5RHRtWDUxSDRMdW5oa29MbmRyRWhlQWV4V2RIK29lTGppOWxkMktvWAp6WkR2aXQ2TkdZV2FEU0FaNGNtNDlHQjNpL29UVTZvOCt5SU4wcWRYai9lU1lMMzdETkFlNEUxcCtaT0t5RVhCCklZdmdUWk1DZ1lFQWk4ZzNIeGJBZEh1WjZzTWdBcGY2aWx0Y2g0R0ViTElFWm01NllIYTZrY0pCZEN1eXFWdnEKcEt2MXU5VDlVVjNvNzNURTRCUnhDelpBRXNVUXV5RlU1eDI3V1NmWGFXWGFsNXdpQkFPdWQ1ZnlmVXNxU1hqawpiclJGMVBIUjIzeU1XTVhYUjYzMklQWEVnQzYxMlFmYm4rQ3ZJSXlQOTZlNkJWbzVkbTR2elpBPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU8wRlhyWllkaGxpY3dpWEJQcGVIQ3N3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3TjFvWERUSTJNVEV3TmpJdwpNall3TjFvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFzUGU4cVU4S2JkSDI2MnJhV0F6c3FaZUgvU3orNUl4MGRpMFJ6T2FvUm85V3ZXRHYKWStBSVRMeEQ2amtXcldSZlJTc2c0anZQUjJPVkhLS1ZrK2pZRWhkWW12WDdHaEdZZFB1cjltTUZzdTRrcDc0MQp4Wmk2c2pCYnJKQUtKdXRJYXFSQUNOS2ZEMGF3aXloOXE2cUNwUDR4dnFkRWJQclVObUYvV25teDQ0UkFuMHNnCkYyMmxMb001bUxMT3FpbWlOT016Q1hqVjc5cW54bCsySHBYa2JXUENoWXByR05zcUxCSHdIQkIxY01tRjNCQkoKdGp6UHBaU2dvSUpVMHNlcUdVb3haSXZheFZ1SU1zdVBJaVFsNU1rWmFldGZWZEhkYjQ4NFlpUUpMUHVBRkE5NgorVmlHMlVqc1gyVlFWNnNLM3Q3bndEYXl5S0RvbzVNZ1BMMW1wd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRncyYzBJbHJVQmJ2VEpRaWpiWGM2OTVIZFovTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQWVzaXFWN3lwbGdmSUQrUm40Qzc0eVdHeFovOFp4QUpCOUF5NklFZjVzSlkxaGFkbWkvUmJxClcrNGVNTVpJbjFSTFZ5eS9GRjRBdVZTZE13TVJlOUNrUS8vVHVJNy8vNVFGQlRoOWlmRzZ0djJjaTQzK0NFcFEKOE1MQnlac0dnZW5WZDlVTHNoMFpXdVFub1JrenltM3dsZlU1NmdKdnBIVW1NTkNxdEpuSlc0a00zREFBWXl1ZApIMS9DMzFYeEVhVEhIMVVuSlBKemxkZ1FrTjhLckpBdGpFNHpKTmhLbTF1TVczWXYvYkxEeTBPYWdSVnUxWkJvCmJ1Mm9kZU91aTdwbmxKRGpNUjdvOVJ5Q3JpaGI4UjFybHpuOGtxcU5oeTkrcjlQbzY0V0JjNGJCd1Y4RXdObmoKdG1TTnFqTTBocXZUQTkveVZ1UGdnQkE4TlRiYWo1RUYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURURENDQWpTZ0F3SUJBZ0lRZmNXcjhnT1BncHZTbVY4QjVZckJCREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qQXlOakEzV2hjTk1qWXhNVEEyTWpBeQpOakEzV2pBbE1TTXdJUVlEVlFRRERCb3FMbU13TG1oMVltSnNaUzFuY25CakxtTnBiR2wxYlM1cGJ6Q0NBU0l3CkRRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFNY2h3bTJ6TERpdFkxT000TEg1K3Nhc3FRYWYKVnE1aldyZS9xMklwb2huWVVkZEV3dEg1MlU2VXBrQ0NralZ0Q1hTMC93TFozWDV1bVcvQk5FTjdlZ2Z6SDA5ZAp1amVGK0VIT1FqSTVWL2hnMUZtelFQOFRtSjZwY3VISEFadlM3SUFydnVnQUd0SVBCcWgzUkk4S0ZlVE80VS95CnBqeW5SZ3dNWVJqUHlyenRkOUlCNDh3SFF5eHJTVnNMQU9oeHFuVTBRTW9ma1pNanNPbEsrK1N5YVd5TzFSTG4KYUhPRFIzWFMzUk9yZDR4bWM0VHBSVm1XU2JyVGcwenpQUElZZ2dVQWlSOTFacUZ1YUlJeUhQcFlkVkN3bTZuTgpOa0J2UUxHVG11Zkx6aXFMYkF5L29NYWk1RFl1aEdYbXQxeVR5T3NoNzIzZkw3STJFRDlYRDhxUGlURUNBd0VBCkFhT0JpRENCaFRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0cKQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVYRFp6UWlXdFFGdTlNbENLTnRkegpyM2tkMW44d0pRWURWUjBSQkI0d0hJSWFLaTVqTUM1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQUdoUzdkeDFHcVhQNHRTNW0rRXZQSkFPYUhSdTFEbVhtYUtVTDN3bVA4MTgKYXR3bVJDOE52aWVzSWVOSi85ZElNYXNsYW95eFZnellNTmlIYnd1emM2NnMzYUJ4TGtYa2lvMHluZHZPQmlLMgpLbW5ucE1ZSmFuMmltcHMxTkk3Qk9selBHVnNmUHEzWVNFRmg0d0ZWK09nMkQ2S2VZbXlxZzU0dVNtNFQ1bS96CnkrTXYwVmZqZjE0ZDcxVndMb2RQcjQzMFVlTE5pdFVKQ003b2VQSFhZMlo5MDNxdGNQN053dE1QU0FJN3VCZ0QKTkd5YndBYkpOUHlJWFRYSmo2M0d6dmdBMmNYeGVCVlEyUXFNYlFqRlFhUXBUSWsrTnUxdVRicEJXUnZxM2Q3TApNMlZLNTBwRnVQTUV6dVdDcFIyYjMrZmlxVmw0UDlQZXJhNUVaV2VIcmg4PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeHlIQ2JiTXNPSzFqVTR6Z3NmbjZ4cXlwQnA5V3JtTmF0NytyWWltaUdkaFIxMFRDCjBmblpUcFNtUUlLU05XMEpkTFQvQXRuZGZtNlpiOEUwUTN0NkIvTWZUMTI2TjRYNFFjNUNNamxYK0dEVVdiTkEKL3hPWW5xbHk0Y2NCbTlMc2dDdSs2QUFhMGc4R3FIZEVqd29WNU03aFQvS21QS2RHREF4aEdNL0t2TzEzMGdIagp6QWRETEd0Sld3c0E2SEdxZFRSQXloK1JreU93NlVyNzVMSnBiSTdWRXVkb2M0TkhkZExkRTZ0M2pHWnpoT2xGCldaWkp1dE9EVFBNODhoaUNCUUNKSDNWbW9XNW9nakljK2xoMVVMQ2JxYzAyUUc5QXNaT2E1OHZPS290c0RMK2cKeHFMa05pNkVaZWEzWEpQSTZ5SHZiZDh2c2pZUVAxY1B5bytKTVFJREFRQUJBb0lCQVFDNzhib1BUYitjRXRJZgpobVNBdGw2aGEwN3c2Q3lvMVM5SEpFaytrZXJrRjg1T3JpQnVqREUwd0lvVmN1ZEtNNHBzTTNSSW5aWTNBVzRpCkV5a2YxQWUrUHhJN0YweHRvUzFKOXNGMW83Zkt2cUZOdENqUlZ3NkNHWTVMV0VmRmFaTTcrWTNxYkVia0liaDQKQW5HYnk3b1VSY3BVYWNIS2wxbytmdVNaeFcwbFdCV2s2ZmRoRGlOK1I5NWpMaG8yUll0c3pOcVdGYXRNOHJZUQpMVUZKSWlhVm90UFB5dmlyNFVoNnZqN2FlQmRPd2xyNk9penhtMFU2K0lBckloSDJ0Ukw5T0M1VXEyYllSTTFDCmpUVzRPMEU4MlhXMnI0TW16VnVmZ2V6S0Zwa0N0SGI5UmVnak9vQjRWU2NYYXNtU0hibERjUzFvSGJxSUduejMKTjhZMDBPOWRBb0dCQU56MDA4TDBNdUwxaE03aEVBSUpJbVFOUjkzMzJZSXFLQ3hDUVgzalFXdjRmNmw5eVgwcQpjM3JzZ3lScWVrdUZxeE5rSUl0anpTOXNCTGpNQnpGaEM4bktMSDJ6NEllU3czUW5IY3NUUERRWktGcnhWLzR4ClZJOFZUOXRBZDluMHpCNUc0RXJGUFFvcXRqaUgwaC83QmxDWnJ0TnNucE5zclRTS0FGOEpjdkUzQW9HQkFPYTIKMHdBOC9GL01nVVNCNnAzNXFXOFlxV2xyTXJCK2xSYlM3MkVRNzFWckhTSGxOTHJRUElJTEtSV0FiUTVRcXRKZAowMGVIbnRXMEhMU3hzUTlUVWhYeEFXSEZYQXgvWVBmK0E2MVRPTTVIdy9qYStEd1ZyS2Yyc0dlMzV1SEdYbEtZCmVyMGQ0K2JPSFhWS0hSenMzbU4xVjhZWnY3VWtUeGIrRXN3WnVxelhBb0dBY0ZxNk4zOFBSU05OZGhreGw2ZG4KYW5McVlXOS9sZFd6K2RWekVmMTJMZDM5cElVRzZQT21KeEtQR1B4ZjFYbFI1WmxiaHlXbmwzNlk1Qk16Y1NPRQo2QVk3RzJ4Vk52c2xFakkxenlhbnpXSWhpQ1VDOW9uRkVzRG1pM203dUFQbnExbWxBY0JMNnBpUGNpMTJacmF4Cm5saVhjb0RnSGR6OE1pUWVUalV5MG44Q2dZQXl6emFleWMrR3hZSCtkV0lYRW1HWEh1WklXaHhhdERYZlJlc0UKQkhmQTV3c09hT3o0NjEwNEFuODB4Z2krYTFPRGFyaForMnNtZ3prRExsTGhIaWRvdjUvZlNWaWhRL2cyQlZJSAovTmo0ek9OQ3plNTNSUXEySHVUd29wYU5TR09EYXlNMHZQMXcyaG13dC9hN1pRc0ErbG12UGdKelFTRE4zbnlEClNITk5Gd0tCZ0hINmsxK3BaOTBsMTZBRHdQTXYrVEFUaTRQdkw2MjhNOElBVUM2TzRHZi9tV0dCQTAwWGFqYlkKWEtTVTY5ZHBDS2hiUm0ybEhCTERFa3pXRFFoeWVGQ054MjdVTkwxdnhCcjYvN3lmU0ZXYUNFYWx5VHN4U1JoNgprSFZQN1pYTlBlMlo5YS9oTk8vSzc3QnNSSDVWa0gzV0JiejFhamFQRkZ5djM4U2pSdkNlCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c0
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "10"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-wireguard: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.0.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "false"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c0
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.2@sha256:52f70250dea22e506959439a7c4ea31b10fe8375db62f5c27ab746e3a2af866d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          rm -rf /var/run/etcd/*;
          /usr/local/bin/etcd --data-dir=/var/run/etcd --name=clustermesh-apiserver --listen-client-urls=http://127.0.0.1:2379 --advertise-client-urls=http://127.0.0.1:2379 --initial-cluster-token=clustermesh-apiserver --initial-cluster-state=new --auto-compaction-retention=1 &

          # The following key needs to be created before that the cilium agents
          # have the possibility of connecting to etcd.
          etcdctl put cilium/.has-cluster-config true

          etcdctl user add root --no-password;
          etcdctl user grant-role root root;
          etcdctl user add admin-c0 --no-password;
          etcdctl user grant-role admin-c0 root;
          etcdctl user add externalworkload --no-password;
          etcdctl role add externalworkload;
          etcdctl role grant-permission externalworkload --from-key read '';
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/state/noderegister/v1/;
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/.initlock/;
          etcdctl user grant-role externalworkload externalworkload;
          etcdctl user add remote --no-password;
          etcdctl role add remote;
          etcdctl role grant-permission remote --from-key read '';
          etcdctl user grant-role remote remote;
          etcdctl auth enable;
          exit
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=clustermesh-apiserver
        - --auto-compaction-retention=1
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.14.2@sha256:0650beac6633a483261640b6539c9609f5a761f4ab4504fd1e6ffe7f2bb82e9a"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.2@sha256:a89030b31f333e8fb1c10d2473250399a1a537c27d022cd8becc1a65d1bef1d6"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
