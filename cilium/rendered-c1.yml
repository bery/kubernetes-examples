---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9wU20xcDlLdEQ5UFBoUmI1bDBYdVl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNVFUwTmxvWERUSTJNVEV3TmpJeQpNVFUwTmxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF2YUNncU05Myt4UlR5aDM0MHVNbVk4Q1BlZDNGdkwwUFNjQlpIZExPcjdEc2VYOG8KMVRsTkw0bll1Y1dOZXRaTUpCZnN4a2NUNklUdHBVblZxeS93TUxWYnpzSE1rdis0c1daaXdqc2UvaHFOZVpIUwowMmZCQUJWRDNGdzljWVNOQW9nYjQwTHUycTI2eVo5RlVqcUF1Z0tnMVhwQytTdHNGckxQUEk5K0JqRHJEc0E2ClpySVlhNnZrTUNMOGkwdkFuakxydngzZXNyVG0yMnNuZHRlQUQvY2NEYndlLy8zU2RQSlplcnNzYmlGYndUL1oKVnZad0F4bENBZ0gyZ2hZS05kcnNoWWVmWDJUbnpYcloxa25XR3BjcXVjUWdJZ05hZ21CUkhudnBMRHNSNGJGRApucVFwOE5NUlFTdVJ2bTNOcER5dFBZS3lmTWpxb1FOSUhaU3liUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSUtoSXkvSk84RTRmOHIrVWtHZGhZbEJFODJBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2I0YnlKcW4zeUhnRktlWU5UUlFYcENMdlZrQU9tOGNGeHY0RS9NaHhXcG1rV3A2d1lKNnVUCmZGa3g1NTh5UG9EdjZ6STZNZ0tDeG9jeDErc1ZmQXdOWERaNC9Pc1JaZ2hvVEdsbGk3Qzg1Rnc4UE85L0g2b2EKaE5ReEpsOW9tYlo3VHhDcnRsc1ZhWjAvL0c0WUxFdm5ETEw2QkN3d1BBMUhZT3hzdkUvR0VYRmtqeVhoL1ZqNQpQRFgwbzIwUUEwWTJTN0M3dXhVVGxrZE1kNXBsL3hHcU9tcXQrOHhCeTJkMUpibnlyZnNpRzN3V1V4T2tXSnBOCkJEc2RhMzBNS0U3V01SY1dxSldpQ3VrNmp1aWVxLzM2VThmejU2V3BWUi9tVmRsTXZkZTIwVnI2bDBKZnNoR1YKVVVWY1ErUndacTZIZU9VYkxtK2N2dUhKK25oUExSSUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdmFDZ3FNOTMreFJUeWgzNDB1TW1ZOENQZWQzRnZMMFBTY0JaSGRMT3I3RHNlWDhvCjFUbE5MNG5ZdWNXTmV0Wk1KQmZzeGtjVDZJVHRwVW5WcXkvd01MVmJ6c0hNa3YrNHNXWml3anNlL2hxTmVaSFMKMDJmQkFCVkQzRnc5Y1lTTkFvZ2I0MEx1MnEyNnlaOUZVanFBdWdLZzFYcEMrU3RzRnJMUFBJOStCakRyRHNBNgpacklZYTZ2a01DTDhpMHZBbmpMcnZ4M2VzclRtMjJzbmR0ZUFEL2NjRGJ3ZS8vM1NkUEpaZXJzc2JpRmJ3VC9aClZ2WndBeGxDQWdIMmdoWUtOZHJzaFllZlgyVG56WHJaMWtuV0dwY3F1Y1FnSWdOYWdtQlJIbnZwTERzUjRiRkQKbnFRcDhOTVJRU3VSdm0zTnBEeXRQWUt5Zk1qcW9RTklIWlN5YlFJREFRQUJBb0lCQUdjc29IMTQ5S1VOK0ZEKwpZY1lNaFhTODd0TzEwTUxTY3lFRG9QbFRHOVlJQTRKUHA1M3NJWXorQ1lkNmIzSW9heUV3UzBuT25veGkxeEtaCnk4SHF3VnNmTWlhYTEzNGIyUmZjeDFzNjQ3QUtMbk80M2ViY2l1eEtwYk9lRkdoUllJL0NFcnBpVHFkNDR5cVUKbUJrWGI3YkZlMURyeHNqZjBWM0FTSFdBOVdiVUF1M0w5WURnQjdQTENHcDRPdkFXMnNnbmZpYUdwSkFuNHNqUwpCUHVpVC9vcTBVYnVITGxXOTlsd0NWc1pnbldTM2lheENMUUxwRHAzVWNWTUJmSXZvajdPb3J5dnVRWGxwQVBnCmZ6dU5NWXBwQ3RHL0ZBK25XQnlndnV1MXFocWVoakVTWHBrL1BGUElhYkN1UTh0SWtRZG9FU1BaVlV6eXcwa1cKV3VSb1Q5a0NnWUVBMG5XaWtnblJ2MHBTaFZLZzFydFpwSTJBYTFjQmpTOWZ3KzFKUFhZRGxoeFg1S0ZETmhqdApYNTU4Yzk5ZmFraTNPYU5ORWVBMC8yU0E4VVVZWkwvQm9wcUZwV3I3OUVpSlFkSzJjTGhTV3hnQXE3UHpBSXowCkk5QlJDT0tsZnZPNGNQczBXWmMrQmQzVVFhWnlkSHJRK3JTZ3plYTNQa2ZJUkl1SmNKTWpZYXNDZ1lFQTVxa0IKSlg0RStRN1Y1c1gwb2lDRGRLM3Z5RE1mSC9oU3piaVZXREdmbTdHVXRjQzBWQWxJZDZqSlc2QnJ1blRkbnllMApKckpweXZwRGd2bHZlNzd1QXA2T3R5MTdOeVZtQmVtNzliTzVZczNtNFo0bCtFcXpTcGpJU0MvNUh2NXMwNGdpCkpDdDBadTlkeExMR0xXQ3pXYlROYTQwNWs0ekd3TXJCbDVpcDFFY0NnWUFNQjVGTlM2Wmppcm9BeU9KTW85VFIKNVF5c0ZnTU9zT0NHY0crNVJaK2EydS9qTDV5SjRRN2dZa3kyeXRQSFhYU3JwTHZwQTZuRDExalBjYVdkVEtDaQp6TFpLNkR5U2ovclllbFRYU0pIY2h4aXl0OHh5QVp5SzE0TnFRSm81RVhFL2MveGdDcGNPK3NrQkg2UjNKL1g5Ci9va2FlOCtKamN6U3JpOGk4aVlabFFLQmdRRGYrZ0FvL2VPcVRLT2NRV0M1QmNWZ1NYM3E4dWtvVENOcnErOHAKQXBhdndwSmFvdEw0UDBObEhqclloRC9YZ0orcmFneGUveVFIZTFpUEY5TVBZR2tSbGhHVEFkRUJ6WWp4K1BNUgpOUUd4VmFyNkxtMUVXcFVhdkp6T3EvYkdCOXg0MDFvRHNVYUlwYXB4MC83b0ZWeFNvV1JQS1lWZEozZmZ3WUtXCnlDRXhCUUtCZ1FDdUFTQXpRR25rdXVFbWwxNzFFMXpETng0SFovZFluY2ZoanVLTUVPQmFYOTU2YzhuWFVnaCsKVC9uc0h6UU5GcGJpT1NIclEvcU9oOUNHR1YxNUVrdFROb2pGbGEya1hpMlB2RFNWN2lWRTJ4RjZHVStvdlFzNApINFZOMmp3QWxpNmhKcmRTTkhvTGZjV0laRUtoMG1Jc2tVVTF3M2V0ZzBsK3ZBaDlVWkRKYkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9wU20xcDlLdEQ5UFBoUmI1bDBYdVl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNVFUwTmxvWERUSTJNVEV3TmpJeQpNVFUwTmxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF2YUNncU05Myt4UlR5aDM0MHVNbVk4Q1BlZDNGdkwwUFNjQlpIZExPcjdEc2VYOG8KMVRsTkw0bll1Y1dOZXRaTUpCZnN4a2NUNklUdHBVblZxeS93TUxWYnpzSE1rdis0c1daaXdqc2UvaHFOZVpIUwowMmZCQUJWRDNGdzljWVNOQW9nYjQwTHUycTI2eVo5RlVqcUF1Z0tnMVhwQytTdHNGckxQUEk5K0JqRHJEc0E2ClpySVlhNnZrTUNMOGkwdkFuakxydngzZXNyVG0yMnNuZHRlQUQvY2NEYndlLy8zU2RQSlplcnNzYmlGYndUL1oKVnZad0F4bENBZ0gyZ2hZS05kcnNoWWVmWDJUbnpYcloxa25XR3BjcXVjUWdJZ05hZ21CUkhudnBMRHNSNGJGRApucVFwOE5NUlFTdVJ2bTNOcER5dFBZS3lmTWpxb1FOSUhaU3liUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSUtoSXkvSk84RTRmOHIrVWtHZGhZbEJFODJBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2I0YnlKcW4zeUhnRktlWU5UUlFYcENMdlZrQU9tOGNGeHY0RS9NaHhXcG1rV3A2d1lKNnVUCmZGa3g1NTh5UG9EdjZ6STZNZ0tDeG9jeDErc1ZmQXdOWERaNC9Pc1JaZ2hvVEdsbGk3Qzg1Rnc4UE85L0g2b2EKaE5ReEpsOW9tYlo3VHhDcnRsc1ZhWjAvL0c0WUxFdm5ETEw2QkN3d1BBMUhZT3hzdkUvR0VYRmtqeVhoL1ZqNQpQRFgwbzIwUUEwWTJTN0M3dXhVVGxrZE1kNXBsL3hHcU9tcXQrOHhCeTJkMUpibnlyZnNpRzN3V1V4T2tXSnBOCkJEc2RhMzBNS0U3V01SY1dxSldpQ3VrNmp1aWVxLzM2VThmejU2V3BWUi9tVmRsTXZkZTIwVnI2bDBKZnNoR1YKVVVWY1ErUndacTZIZU9VYkxtK2N2dUhKK25oUExSSUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lRZG9Kdk1mTXJRMFFaUkh2dXUwYmVsakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qSXhOVFEyV2hjTk1qWXhNVEEyTWpJeApOVFEyV2pBVE1SRXdEd1lEVlFRREV3aGhaRzFwYmkxak1UQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQCkFEQ0NBUW9DZ2dFQkFNWUVsZnNBZkowNXRTVy9nTGVaTHRGd1cwT0F5d2JrY2ZmTXRrL1l0UGJEMjdPd2VyS1gKN2NpL21jbHk1MEZLdHNvbHovb1orUHpUVVFrQ0dzdlJ3TnQvMHdndEVaQzNlS3ljb05TVHluNFdNMmN6WFY3NwpodUlQVzdlTE96Vlh2UitWMmpjZ2VBRG1Xbk5WczZqNlpXOFhpdTM4ZVZhVUYwMkZPS2RCZTdrYnZNRHNXbkRwClhHdnlKc2xSZjBqNzNrUm9Tb05DSTJ0Nm9nVVBJakVwaVY2Rjl2c042N051a1BQTnYxMUgreDJnU3dZUHovOVcKckhTZGNIVThHTGlBVVNhZkFmMjVONXF6RXZUU3Uvc05zUlNjYnE5Y0szQkFWbHVUY0tQZURWbEpCc1g0clFXZwpYaUwvT241b25UdEVCM29RWlRQYXFSd01zWWM5TERwTkt5MENBd0VBQWFOMk1IUXdEZ1lEVlIwUEFRSC9CQVFECkFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUEKTUI4R0ExVWRJd1FZTUJhQUZJS2hJeS9KTzhFNGY4citVa0dkaFlsQkU4MkFNQlFHQTFVZEVRUU5NQXVDQ1d4dgpZMkZzYUc5emREQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFsSjY3ZXg3NFo5MGZiNHhnTVhuTjd2RXo0RHZxCjhnZENKcm9YdnhiQUw1T2xEMWNZMFo2WUtxUEFyakI0MU1XUDRJY3RUM21FS1NNcVJQY3FHMG4rQytzV0lFSUsKSVJDSXpuZzYwUkFNdDZDRDFtRUdvMlh2enJFZmw2VzFFeTZYcnZFSjBjU1o1WnJucHBZVjEvc1ZyY3E2VmNUaQo2QkZ6Szh4WE1MUE92cy9kUWdVbElWSnljbFhFMEdzNksrK0VmR0lwV3V0dU9xeWlOWW1GTExIZ2xVMWthUGRwCkJRaW44VEtvRUEyVTExYzJEbmRXTEZYV0RVbGxjODNsTklOU1BtcXBBUVZqbTYrckRDeVlRbDl3bWdXd0REZkcKcXc3YzVmdHN4dEtld1NRWlVqVzJ3bStPbER6K0dVRW51YjltdVF4bzVnZzJWWHhLcXc1MmJqRlFWZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeGdTVit3QjhuVG0xSmIrQXQ1a3UwWEJiUTRETEJ1Ung5OHkyVDlpMDlzUGJzN0I2CnNwZnR5TCtaeVhMblFVcTJ5aVhQK2huNC9OTlJDUUlheTlIQTIzL1RDQzBSa0xkNHJKeWcxSlBLZmhZelp6TmQKWHZ1RzRnOWJ0NHM3TlZlOUg1WGFOeUI0QU9aYWMxV3pxUHBsYnhlSzdmeDVWcFFYVFlVNHAwRjd1UnU4d094YQpjT2xjYS9JbXlWRi9TUHZlUkdoS2cwSWphM3FpQlE4aU1TbUpYb1gyK3czcnMyNlE4ODIvWFVmN0hhQkxCZy9QCi8xYXNkSjF3ZFR3WXVJQlJKcDhCL2JrM21yTVM5Tks3K3cyeEZKeHVyMXdyY0VCV1c1TndvOTROV1VrR3hmaXQKQmFCZUl2ODZmbWlkTzBRSGVoQmxNOXFwSEF5eGh6MHNPazByTFFJREFRQUJBb0lCQUVaeFJ6RjlvTmNGdW0xdApUTXNEa1dZc1JDc2xYQlJkbkRWOCs3WTM3MWlCb0Z5eUFWUWJQQm5ZSDB0TXR2dkJLbm1MTGd0WXhmeWE2QTcrClVxNEROa3BmbEtFcDl6KzJKUld5dW53ay96b1BoOFhFdmdpV0RndkpUdVZpZ0hPZmZNWUp0eEU1V2Jkb092RWcKb2NNUklKaCtsWXZIN3hwZm9GS1JlKy8wR2FGbG5ZcUxoelo0bm5SQm1uaERJUnJiY3U3ZzVGOENTK2JURjE2agpGMFJ5eU9yZ1dwRW5LVmNnMEptK2QrQnIwWUQ0VlFJNjZ5QktVQ3UzOVdjQ2w2dVZvL3lScFdSU2JVb1JJdjlNCldwMUpESDJ2NytXVlMyTWd6NXkrZzQvTzFvRGwxUEplNXdxYllWUjJLRmtXNER4L0JCU3I5cHRINnAxZTdsRWwKOFVYMlNMa0NnWUVBK28rOEJaQjdScmNZYVRLVHFvU05LOEQ0THV1c0hsYUxHMU5TVnI2OWlCNzNyVWJoT3hiNQpNVkRJNFFzenBwNEVVdll5SWJsK01aaE5HWUlScDQ5SnZoSjFYTWtGaTJ0Rk5waDNMeGY4QWxneUJZeVo2UEUxCnhxUnBIbmZwR2VLMjBtdUV3ODR5aEExOWhMazNGeXhwT1ZrN3UrWjZBcUZoQXA1c1dDNytZZ3NDZ1lFQXlsRGoKaVZIV3VCT3RnTWU0RlpNVWNJK1A5YVQvTkF0T1NUVFJaUzNzdjE1clNjRE9Ic08rdjVtM3Z0R1dzUlBld0xiRgpUNkVmTmg5RmkySFpmSEp3VzlnclN2ZmZLT1dNSjhVdlVsMWZ0bSt0MWUra2NxeVdHQUs3WHRGWFZVZlZsUzFwCmpVVmVwOUVnSm5CU2ozeDRkUTdCbTJqQjJlQTVPY1N2M0RGWllxY0NnWUFpWk1DR2N3SzQva0VYajUyOWRseDYKZVE2WVFqbHFJSzhQblN4Y1ErcDRXT2ZlblRBbGtFMjhlejVYeGRYZE5TdWF4N2l4OEdobUhtWFc3b2ZGM0dGZQorZUdxVHQyMytZMlNwUE1YUDgrVDhzOUsrN1hVeCtkOTBPdXRCd0MwVU82UGk3cTV0Z0F4S0RqbWt4WUExRlBOClQzWm5vSWQyL1BmNENBOFBPOFFuYVFLQmdRQ3VNaTkzME1zNysxVnNpSW5ycVpQenh1aUE3T3YvZDZ5VVE3SDMKbUM4OEpxUGlBT3g0ZUxvSVp1WmFta05SZkhaVElBdUxvSU1yS29uS2xSbVptVDg5RlVkUmFWTHY5NVZSdU9vaAoxTnZRVFNBMEQvNWI3bFhkbnB5TjYxbHl5RU1TQ3VQVEMyT1F3dk1YcGFhd2ZNK0ttb1lBdFpZVGJvaFhRUTdhClhITkdDUUtCZ1FDTHBhSE40VnRQbG43OVBwdzZjc3RHU2YwVkFjam9ncityRlB1ZUROS3dvN01vaWQwTDlkVWYKeUVuU2NoR1FnWFlGTExRT1U0cWltNFhaUHEzRkVlVFlwN0pjWlFCNHRGU2dvOFVma1BmSVVVRE54MEpIaDB6ZAp6bVAycTZOOFQvM3FqUUlNOWN6TnJoTkY1anR5ZmphUVEzK1J3U0JOR0gxdWxic2Z0MmpHTmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-ca-cert
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9wU20xcDlLdEQ5UFBoUmI1bDBYdVl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNVFUwTmxvWERUSTJNVEV3TmpJeQpNVFUwTmxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF2YUNncU05Myt4UlR5aDM0MHVNbVk4Q1BlZDNGdkwwUFNjQlpIZExPcjdEc2VYOG8KMVRsTkw0bll1Y1dOZXRaTUpCZnN4a2NUNklUdHBVblZxeS93TUxWYnpzSE1rdis0c1daaXdqc2UvaHFOZVpIUwowMmZCQUJWRDNGdzljWVNOQW9nYjQwTHUycTI2eVo5RlVqcUF1Z0tnMVhwQytTdHNGckxQUEk5K0JqRHJEc0E2ClpySVlhNnZrTUNMOGkwdkFuakxydngzZXNyVG0yMnNuZHRlQUQvY2NEYndlLy8zU2RQSlplcnNzYmlGYndUL1oKVnZad0F4bENBZ0gyZ2hZS05kcnNoWWVmWDJUbnpYcloxa25XR3BjcXVjUWdJZ05hZ21CUkhudnBMRHNSNGJGRApucVFwOE5NUlFTdVJ2bTNOcER5dFBZS3lmTWpxb1FOSUhaU3liUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSUtoSXkvSk84RTRmOHIrVWtHZGhZbEJFODJBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2I0YnlKcW4zeUhnRktlWU5UUlFYcENMdlZrQU9tOGNGeHY0RS9NaHhXcG1rV3A2d1lKNnVUCmZGa3g1NTh5UG9EdjZ6STZNZ0tDeG9jeDErc1ZmQXdOWERaNC9Pc1JaZ2hvVEdsbGk3Qzg1Rnc4UE85L0g2b2EKaE5ReEpsOW9tYlo3VHhDcnRsc1ZhWjAvL0c0WUxFdm5ETEw2QkN3d1BBMUhZT3hzdkUvR0VYRmtqeVhoL1ZqNQpQRFgwbzIwUUEwWTJTN0M3dXhVVGxrZE1kNXBsL3hHcU9tcXQrOHhCeTJkMUpibnlyZnNpRzN3V1V4T2tXSnBOCkJEc2RhMzBNS0U3V01SY1dxSldpQ3VrNmp1aWVxLzM2VThmejU2V3BWUi9tVmRsTXZkZTIwVnI2bDBKZnNoR1YKVVVWY1ErUndacTZIZU9VYkxtK2N2dUhKK25oUExSSUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdmFDZ3FNOTMreFJUeWgzNDB1TW1ZOENQZWQzRnZMMFBTY0JaSGRMT3I3RHNlWDhvCjFUbE5MNG5ZdWNXTmV0Wk1KQmZzeGtjVDZJVHRwVW5WcXkvd01MVmJ6c0hNa3YrNHNXWml3anNlL2hxTmVaSFMKMDJmQkFCVkQzRnc5Y1lTTkFvZ2I0MEx1MnEyNnlaOUZVanFBdWdLZzFYcEMrU3RzRnJMUFBJOStCakRyRHNBNgpacklZYTZ2a01DTDhpMHZBbmpMcnZ4M2VzclRtMjJzbmR0ZUFEL2NjRGJ3ZS8vM1NkUEpaZXJzc2JpRmJ3VC9aClZ2WndBeGxDQWdIMmdoWUtOZHJzaFllZlgyVG56WHJaMWtuV0dwY3F1Y1FnSWdOYWdtQlJIbnZwTERzUjRiRkQKbnFRcDhOTVJRU3VSdm0zTnBEeXRQWUt5Zk1qcW9RTklIWlN5YlFJREFRQUJBb0lCQUdjc29IMTQ5S1VOK0ZEKwpZY1lNaFhTODd0TzEwTUxTY3lFRG9QbFRHOVlJQTRKUHA1M3NJWXorQ1lkNmIzSW9heUV3UzBuT25veGkxeEtaCnk4SHF3VnNmTWlhYTEzNGIyUmZjeDFzNjQ3QUtMbk80M2ViY2l1eEtwYk9lRkdoUllJL0NFcnBpVHFkNDR5cVUKbUJrWGI3YkZlMURyeHNqZjBWM0FTSFdBOVdiVUF1M0w5WURnQjdQTENHcDRPdkFXMnNnbmZpYUdwSkFuNHNqUwpCUHVpVC9vcTBVYnVITGxXOTlsd0NWc1pnbldTM2lheENMUUxwRHAzVWNWTUJmSXZvajdPb3J5dnVRWGxwQVBnCmZ6dU5NWXBwQ3RHL0ZBK25XQnlndnV1MXFocWVoakVTWHBrL1BGUElhYkN1UTh0SWtRZG9FU1BaVlV6eXcwa1cKV3VSb1Q5a0NnWUVBMG5XaWtnblJ2MHBTaFZLZzFydFpwSTJBYTFjQmpTOWZ3KzFKUFhZRGxoeFg1S0ZETmhqdApYNTU4Yzk5ZmFraTNPYU5ORWVBMC8yU0E4VVVZWkwvQm9wcUZwV3I3OUVpSlFkSzJjTGhTV3hnQXE3UHpBSXowCkk5QlJDT0tsZnZPNGNQczBXWmMrQmQzVVFhWnlkSHJRK3JTZ3plYTNQa2ZJUkl1SmNKTWpZYXNDZ1lFQTVxa0IKSlg0RStRN1Y1c1gwb2lDRGRLM3Z5RE1mSC9oU3piaVZXREdmbTdHVXRjQzBWQWxJZDZqSlc2QnJ1blRkbnllMApKckpweXZwRGd2bHZlNzd1QXA2T3R5MTdOeVZtQmVtNzliTzVZczNtNFo0bCtFcXpTcGpJU0MvNUh2NXMwNGdpCkpDdDBadTlkeExMR0xXQ3pXYlROYTQwNWs0ekd3TXJCbDVpcDFFY0NnWUFNQjVGTlM2Wmppcm9BeU9KTW85VFIKNVF5c0ZnTU9zT0NHY0crNVJaK2EydS9qTDV5SjRRN2dZa3kyeXRQSFhYU3JwTHZwQTZuRDExalBjYVdkVEtDaQp6TFpLNkR5U2ovclllbFRYU0pIY2h4aXl0OHh5QVp5SzE0TnFRSm81RVhFL2MveGdDcGNPK3NrQkg2UjNKL1g5Ci9va2FlOCtKamN6U3JpOGk4aVlabFFLQmdRRGYrZ0FvL2VPcVRLT2NRV0M1QmNWZ1NYM3E4dWtvVENOcnErOHAKQXBhdndwSmFvdEw0UDBObEhqclloRC9YZ0orcmFneGUveVFIZTFpUEY5TVBZR2tSbGhHVEFkRUJ6WWp4K1BNUgpOUUd4VmFyNkxtMUVXcFVhdkp6T3EvYkdCOXg0MDFvRHNVYUlwYXB4MC83b0ZWeFNvV1JQS1lWZEozZmZ3WUtXCnlDRXhCUUtCZ1FDdUFTQXpRR25rdXVFbWwxNzFFMXpETng0SFovZFluY2ZoanVLTUVPQmFYOTU2YzhuWFVnaCsKVC9uc0h6UU5GcGJpT1NIclEvcU9oOUNHR1YxNUVrdFROb2pGbGEya1hpMlB2RFNWN2lWRTJ4RjZHVStvdlFzNApINFZOMmp3QWxpNmhKcmRTTkhvTGZjV0laRUtoMG1Jc2tVVTF3M2V0ZzBsK3ZBaDlVWkRKYkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9wU20xcDlLdEQ5UFBoUmI1bDBYdVl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNVFUwTmxvWERUSTJNVEV3TmpJeQpNVFUwTmxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF2YUNncU05Myt4UlR5aDM0MHVNbVk4Q1BlZDNGdkwwUFNjQlpIZExPcjdEc2VYOG8KMVRsTkw0bll1Y1dOZXRaTUpCZnN4a2NUNklUdHBVblZxeS93TUxWYnpzSE1rdis0c1daaXdqc2UvaHFOZVpIUwowMmZCQUJWRDNGdzljWVNOQW9nYjQwTHUycTI2eVo5RlVqcUF1Z0tnMVhwQytTdHNGckxQUEk5K0JqRHJEc0E2ClpySVlhNnZrTUNMOGkwdkFuakxydngzZXNyVG0yMnNuZHRlQUQvY2NEYndlLy8zU2RQSlplcnNzYmlGYndUL1oKVnZad0F4bENBZ0gyZ2hZS05kcnNoWWVmWDJUbnpYcloxa25XR3BjcXVjUWdJZ05hZ21CUkhudnBMRHNSNGJGRApucVFwOE5NUlFTdVJ2bTNOcER5dFBZS3lmTWpxb1FOSUhaU3liUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSUtoSXkvSk84RTRmOHIrVWtHZGhZbEJFODJBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2I0YnlKcW4zeUhnRktlWU5UUlFYcENMdlZrQU9tOGNGeHY0RS9NaHhXcG1rV3A2d1lKNnVUCmZGa3g1NTh5UG9EdjZ6STZNZ0tDeG9jeDErc1ZmQXdOWERaNC9Pc1JaZ2hvVEdsbGk3Qzg1Rnc4UE85L0g2b2EKaE5ReEpsOW9tYlo3VHhDcnRsc1ZhWjAvL0c0WUxFdm5ETEw2QkN3d1BBMUhZT3hzdkUvR0VYRmtqeVhoL1ZqNQpQRFgwbzIwUUEwWTJTN0M3dXhVVGxrZE1kNXBsL3hHcU9tcXQrOHhCeTJkMUpibnlyZnNpRzN3V1V4T2tXSnBOCkJEc2RhMzBNS0U3V01SY1dxSldpQ3VrNmp1aWVxLzM2VThmejU2V3BWUi9tVmRsTXZkZTIwVnI2bDBKZnNoR1YKVVVWY1ErUndacTZIZU9VYkxtK2N2dUhKK25oUExSSUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRWFNUdndnR0NsN1JwSUxDZCtrNmZVakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qSXhOVFEyV2hjTk1qWXhNVEEyTWpJeApOVFEyV2pBUk1ROHdEUVlEVlFRREV3WnlaVzF2ZEdVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFEVmVkNTFNcEtVU3JJeWNzZThVakxSdmFIMlRpL3hOeDZSMFhLeWVzLzlENnhPN2pTVmtJUHgKbEtnNXNzYzZtT29vU2hTakhhNW1jYkV5Y0NVWXJQcjBSNzZ0M1Y5YWxHaTJ3K1RzYmhaRzAyRmIzOWF3dC9SUwpPRWtIY2tTNXI2Vk84KzFvM0JMdm5mMVc5WStIc014UlNsbkxDZGJQNU1RRWlsMUlUanYwbHhJVElCTnpweGM5ClJUM1RuWlFCc09FcnpwOVJOak9aV2dyWGNnMytHb2IyQ0RtREU2QzRuSnF5UktUbVF3c2o1b1IrRFQyc0w1UkIKOXd3bWZWVWdGNjk2L2hLdHlwSE40dEtrRkwraVJRNUJzaGJ6V1ZxbWhZVDFQSFNMa2lPYkc4WnQ1eEg1S243UQpnMWNkUUg1L2RIdlREUEZqNmZBL2FYbklRZTFwdFJzckFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGCm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JTQ29TTXZ5VHZCT0gvSy9sSkJuWVdKUVJQTmdEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBTWhJYUdieERMN1pTQVRieVhleEE1Y3ZILzRVSGJkblhmdGJzOXo1em9zVS9jRGExalU1U3VKamd4NW5aCmJZZiswWHc4dTNLQk0xVXRYQ1Mzd3hsOGp3MEhHczBuUDBCek1TUERlMWpwd25lU2dyRjBPTk12Vk9jcFpJUlQKZmVVUHlTNVE2RWpkeGl0RDd4WXA4MGpJbGtlRUFtbDlhQzJlNFZOT3hZVHE4MGg3UTdXZE1lRXRCTk9OOGJ3egpZY3dHSUk0VEI3dWtmMXNRbGpnbTViNkpmY0M0WHhkR0plekRRUCsvK0dOREFBWmxTY2hwbndqSEdFb0FqajdWCkFNZmxUMXUyOXlhZGFiMU5DVjJiQUlVNnhXZWtSN1NwVTJIZWhkMWFCblR2MkZTaHZ4WlMvSml3OGdxOXpGejUKK2Q3Y3VUNzVKbkg5bWlxYTF2dXFtQ1VIK0E9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMVhuZWRUS1NsRXF5TW5MSHZGSXkwYjJoOWs0djhUY2VrZEZ5c25yUC9RK3NUdTQwCmxaQ0Q4WlNvT2JMSE9wanFLRW9Vb3gydVpuR3hNbkFsR0t6NjlFZStyZDFmV3BSb3RzUGs3RzRXUnROaFc5L1cKc0xmMFVqaEpCM0pFdWErbFR2UHRhTndTNzUzOVZ2V1BoN0RNVVVwWnl3bld6K1RFQklwZFNFNDc5SmNTRXlBVApjNmNYUFVVOTA1MlVBYkRoSzg2ZlVUWXptVm9LMTNJTi9ocUc5Z2c1Z3hPZ3VKeWFza1NrNWtNTEkrYUVmZzA5CnJDK1VRZmNNSm4xVklCZXZldjRTcmNxUnplTFNwQlMvb2tVT1FiSVc4MWxhcG9XRTlUeDBpNUlqbXh2R2JlY1IKK1NwKzBJTlhIVUIrZjNSNzB3enhZK253UDJsNXlFSHRhYlViS3dJREFRQUJBb0lCQUhNNW1wZUx1bzZNV3U3YwpBVzltdHNON0plYTZnU29qNUQ0MDNVSDFCRHJGc08zUnFWUnBjcTU4M09oMzFRMk42Q1hqQm95Y3dydk05aVlSClhoU1ptY01zem9FdUVmL2tSemtQTjR0ZVNHdm1RSkRFbXk4N3U0WjlsdjJMOGdpQUJDdy9nWSt0NmhLb0prdy8Kc3o4OGNLd1lBNnVTSGY2TXJqajlMaWlQQWRHY2xBYXNzbjFDMnFzUWpkVG5wRnVPNXFtOGRaM2JCbEtMRkxDNwpHRm5KOUx4bDFpeGJSMnlmR0ZmSVhhcXJNRm9kR3daalk1ZEU0aUtSWHFSOXJGUEt2ZjNCVWJ0Q0VNNGdNbTcrCmYrYzQ3SzR5ckpnYlM4RnBDM0daNDM5anRKOURRS2pHMDArUm5CVERNbnFWcmgralZmQS9UMUI2N3RkOWlHeXMKWU1XbHU4RUNnWUVBL2pSZVhWM3A2cFloeTBVQ1lTbHJXdG1VSENnY3NiTGtWM2wrYUdJL2gxL3owUTM1QnJCcQpMQjJ3Q1h5aFRCYlVqek5aNmZZb3JCYUt0ZWZXNDN1NGM1cGlXc1hHb0JkRFRCYmJHUjd6ZGhYOWNyM3pydHlrClFROWcrWkxrbDZwQkJ5aTMrc2tSeWM0UU53M2tTWkZ4RVVqSFNTUU9Fb0FVdVl2YUNKWUNHanNDZ1lFQTF2dmIKeFRYZ002aXA4bkFkRUZoRkM2TEExYnRlU1VDaTg1NDNxcHhDTGRlZ3ZpOWJyWTdieFFxSnA0RmM0dk9PZThJUQpWaU5OTWs4WEtlWE9tbVBXNzBjaHg0aXhGS00wMVpsNlUrMUd0Zk1zMnlHa0hNdTJXNzhIVjhMNGxFeThXajMrCmdFUDkwU3hRUDZURjd2dDJxUlc3ejVkTzlBRlVVVHZzSWFrZEE5RUNnWUJydzdtcGJUSElJRU5OVUFFVlBhRGsKVDg3cExOd1ZQUmh1T1BRc3ZsSGVTd0FxeFBpb0xFdW1UaU9kc2ZjVE1hNkUwcWt3ZFFtREFyOWxKRmJGODJJYgpwL3hBTFEzcU9sSnVSRlkzelJZN0hsRm12ajQ3Q0JDZUFDNEZQNCttK0NjL0tMVHVIU1ZzWHU0aTJNSEpxbDI3CmpSWG0zT0VXV0xQd2dPZzZzWlZNbHdLQmdCbzRRM2lNOXBnMlZPdmRvcDNRdGpNU0dZUzN3bXNhdUFVUVllZXMKQVNKSUx6R2k0d0tLN3VEY1JTZXB6bU5ib3lBUzdoMGpWeEh3dFhtRnJxb0R6VDRIcGVZSkZOZllnK1FkUU44bApqRDg2dGxqUGhJMkNodTR2b1R5aDZlRmtib0J2R1RBWm1zWTlLbGhveHo4N2FpQjdKeG5OY1hLdkN0S1JoVjRoCm13bFJBb0dCQUowUUUxSm5LUHdNTEJITmxERWVJSmNUNTYyL1VNWjRaZFBvOERWZ0hHVks1VGpoaHlDNVU4aXIKVU1jV0l6VEtMRkI4VWZ1NjUrZ01idkpFYWhmUlJFcHpBNlZ2ak13UUdoUFl3QlZhditqQ0puL1MrSnBkQXRvWApxR2pwSWowOGpXN2J3TWlFWmZHUk5YSlc0RjJIbGM1alRrdWNVZDFUckpWeXJHVEJDZndZCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9wU20xcDlLdEQ5UFBoUmI1bDBYdVl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNVFUwTmxvWERUSTJNVEV3TmpJeQpNVFUwTmxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF2YUNncU05Myt4UlR5aDM0MHVNbVk4Q1BlZDNGdkwwUFNjQlpIZExPcjdEc2VYOG8KMVRsTkw0bll1Y1dOZXRaTUpCZnN4a2NUNklUdHBVblZxeS93TUxWYnpzSE1rdis0c1daaXdqc2UvaHFOZVpIUwowMmZCQUJWRDNGdzljWVNOQW9nYjQwTHUycTI2eVo5RlVqcUF1Z0tnMVhwQytTdHNGckxQUEk5K0JqRHJEc0E2ClpySVlhNnZrTUNMOGkwdkFuakxydngzZXNyVG0yMnNuZHRlQUQvY2NEYndlLy8zU2RQSlplcnNzYmlGYndUL1oKVnZad0F4bENBZ0gyZ2hZS05kcnNoWWVmWDJUbnpYcloxa25XR3BjcXVjUWdJZ05hZ21CUkhudnBMRHNSNGJGRApucVFwOE5NUlFTdVJ2bTNOcER5dFBZS3lmTWpxb1FOSUhaU3liUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSUtoSXkvSk84RTRmOHIrVWtHZGhZbEJFODJBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2I0YnlKcW4zeUhnRktlWU5UUlFYcENMdlZrQU9tOGNGeHY0RS9NaHhXcG1rV3A2d1lKNnVUCmZGa3g1NTh5UG9EdjZ6STZNZ0tDeG9jeDErc1ZmQXdOWERaNC9Pc1JaZ2hvVEdsbGk3Qzg1Rnc4UE85L0g2b2EKaE5ReEpsOW9tYlo3VHhDcnRsc1ZhWjAvL0c0WUxFdm5ETEw2QkN3d1BBMUhZT3hzdkUvR0VYRmtqeVhoL1ZqNQpQRFgwbzIwUUEwWTJTN0M3dXhVVGxrZE1kNXBsL3hHcU9tcXQrOHhCeTJkMUpibnlyZnNpRzN3V1V4T2tXSnBOCkJEc2RhMzBNS0U3V01SY1dxSldpQ3VrNmp1aWVxLzM2VThmejU2V3BWUi9tVmRsTXZkZTIwVnI2bDBKZnNoR1YKVVVWY1ErUndacTZIZU9VYkxtK2N2dUhKK25oUExSSUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRU1ExN25HTE1UTzZTTXY0STFYRGFSekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qSXhOVFEyV2hjTk1qWXhNVEEyTWpJeApOVFEyV2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdW5mKzV5L3JDdkZUcEN5RC90eGgKTlVUblRWc1RaK0d4ZWxycTJSbHFncXEvbnZ4UHc3T0Zub3Jlc2RaelV1OEJlS3ZheUpVTGZmcldvWUFyaGN2bgpyK0l3YXJNS2lPVnErK1lPY2pFT1FJNDJKbEtZMm05ZDc4K21hT3FIaStLdzRzd0VZa0svV2tBYnBrZjNlSTJpCk05UGlaQ0h0Sk12TUZUNndVTkFZK21uVEI2THhhTCtmb3VBZ3gzUnlzdnFiTGVZdkx6N01UbklnWS9yc053Y2wKQitCa2hsd29vSS80SWlxblVlU3NXK01Yc28vZ3NNNkZSbW5DZVQ3cUkvcDBxSzhGVTl2WnYzemVLcitMQytUawoyODlvVk1kSDdOV3VmVkFyWG9kLzRBTU9sK25xUXRDbXg5QzlDSmk3L2Z2Nm9tVm9FakZ1cHMvanBmTTdOcHdLClFRSURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JTQ29TTXZ5VHZCT0gvSwovbEpCbllXSlFSUE5nREI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUExZ1lHdmpxaGFaTk8xU2FHMlJLUEJrWGx2d0RqMjdDdTdFNEplcTYvWVY5dHNVOTk3CmVPdkNudys4ZW5UclhQSk52Q0dBUE5ScWNZRyt3Y2dKUHlJZTBkNHVTeUVSUzFwVWowU2Fva3hvRmF1amRyTWMKYU1FakFEaUg1TGRobW5nbFdkWmFPMFVFRzNDUFF4MVdYaWo0cjZxcmtjUnhCU3dtUUp4VEREaktsNnBWeWdveQp4RXpBTlI2MnlNMUNaYlVyWjZVNGV1SUFYSEVQZytyRXQvbzJMYmVnaGdIVGhGMjZxUjUyNzRGSDh1SXBmQS9UCjRxUUZPNW54RU1CY3VDQXZvTFpXRXBOTzRhaTUrc0FhR0o4M1BlaFhzcUdDWTdwek16RmpTN09kMVBneVZYRisKc2hLSWlBWVRscFlmWTJsT215bnFiUjdpVDFENkEzakdOVXM2Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdW5mKzV5L3JDdkZUcEN5RC90eGhOVVRuVFZzVForR3hlbHJxMlJscWdxcS9udnhQCnc3T0Zub3Jlc2RaelV1OEJlS3ZheUpVTGZmcldvWUFyaGN2bnIrSXdhck1LaU9WcSsrWU9jakVPUUk0MkpsS1kKMm05ZDc4K21hT3FIaStLdzRzd0VZa0svV2tBYnBrZjNlSTJpTTlQaVpDSHRKTXZNRlQ2d1VOQVkrbW5UQjZMeAphTCtmb3VBZ3gzUnlzdnFiTGVZdkx6N01UbklnWS9yc053Y2xCK0JraGx3b29JLzRJaXFuVWVTc1crTVhzby9nCnNNNkZSbW5DZVQ3cUkvcDBxSzhGVTl2WnYzemVLcitMQytUazI4OW9WTWRIN05XdWZWQXJYb2QvNEFNT2wrbnEKUXRDbXg5QzlDSmk3L2Z2Nm9tVm9FakZ1cHMvanBmTTdOcHdLUVFJREFRQUJBb0lCQUdoZHl6MEljK3l1LzlxTwowOTRzNlBlUXRrbDBwVnJxVnBTZUdINGtuSm5BQ2ZwcFRCZkQvaENydDFNZ0xYSUl0ZkVkZHhuM1dmUk1GaDlVCmhvZWZoZkRLajhEWXJ4ZktHR1FlOG96MWFmMjEyeGI5K2ZHZ2pab3d4ZnBJOGs3WU5acnJCN1VibU5CaHUxZ0oKUmJpaXhWdHV4M0syRG00ZTV2NHBGVFJXRlBUcW1wdzV0N2xBREllS0dkVG4zUHN5a1dZaDJiUGc3Zm9xaTZucgovOUZFSzk4QlpXeGpVNkdZTWpYeGRDMUFMY3JSZTBWaytxSTdoczBaNk9ZV2Iyd2hzV3FkUGZSTXhzRGxjZzdICldJUHUxbC9ZVmxBMTc2NW5DUWNVekVLMGhwc1BHUVJCMVlkTk1Jd0gvVHkxd3BzOHJES3B6SmJyZ0srMzIzQngKRU90V05hVUNnWUVBN3FZcmdLK1FSOWx2U2VRbkNodi9RdjF4Qjd2ZmoxVVVSSEh2bEhOcExEaDdaQTNLVkNsWgovNnJicGZIL05IOEozVENWZWxoTHBjbTVIS2pCMm0rSEMzZ0ttTm83NXZXRGU1dGtYL2k4ZHBXSDhZNU9YODNzCmlOanRoY25COEFpV3psNEZybno2dHRjUy82VlBQcVBweDlrOFZkSGpmSUVWaysxT2JRTFBWWDhDZ1lFQXlBYWYKMjBtT1ZISmZTcGdjbmxlZzk5VEI5QUo3RjcxdS9LNWUxQm9MMUN6MzQwUFdYeGVGajd5aVhxaS9wQ2l6emxpKwpjVFh4VXVjakd0TnEyemZhTWZMSU1jL2pZeEJaay8rUUtJOTNqcnJCVk94QlhpMDZFUXZJSW1SRXZ5UkZqU0liCm0ybk43U1Btc1BRRSt3OHBuZjhJTkhxRi9hQmVGcStoVjJGcUFEOENnWUExUHNIcC9rRzBwaUNjWGRrUCtsc2oKZVNSazAxZjN4TVcyMTZ6YWREMTg3a1VwZDZJeTBOOFJtZTlUd1FCdG1BSjlaVCtVZ21xdVhLbCthWENHNmVjNQplZGp6YlkxNzVEOG5ydTNnTThEb3ZFZ09idSt4bEdJM3poNkFnUmxTRXJpQzVwdGg2T1NQTXNFOFpJZWZ0RGFPCnJqczE4cFJNelFnaGJ3cldhNUFTeFFLQmdGb1M0Wm1XSGduWkZ5QTRMMnIrZXZZZlVOZlk1aVZpb01BWXBZdE4KejFYVWlpeEZPQnZLTTlMdVZ3L1pYYk5Hd1BHQzlQOTJFeDRLQjd6a3g1SEFMUG1oSXBXTDBCR2tJektLT3hpSQp3b1g3ZzJRQ244MFJBTHo4V1R0amU3RzNXN3FhU1dSSzJQaVkyaUdGUVZqdEV3aWE5ODdwL2J5Z29yNEVpTnNZCmV1dHhBb0dCQUlUdkJXOFBoMWFJTHI2ZlVhQld4MGFCN25pN3VlRUJsRFUrTzRyZ21mRk52SkxQSzNRWG9qeGkKazE3Q1Q3RjJrWWpEWUJjaVk1L0gvTXc4OForZEI3QWwvV3JralNkWU5LakNKVTYwS1BvNW5ySjN1QU5LY2VvVgpVNjVudFZJdlM3dDN3bjEyMjZ4bFd4N1ZiUW4yS2lpODBkNy9oQndrcjlnVncxU2I5T25kCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9wU20xcDlLdEQ5UFBoUmI1bDBYdVl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNVFUwTmxvWERUSTJNVEV3TmpJeQpNVFUwTmxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF2YUNncU05Myt4UlR5aDM0MHVNbVk4Q1BlZDNGdkwwUFNjQlpIZExPcjdEc2VYOG8KMVRsTkw0bll1Y1dOZXRaTUpCZnN4a2NUNklUdHBVblZxeS93TUxWYnpzSE1rdis0c1daaXdqc2UvaHFOZVpIUwowMmZCQUJWRDNGdzljWVNOQW9nYjQwTHUycTI2eVo5RlVqcUF1Z0tnMVhwQytTdHNGckxQUEk5K0JqRHJEc0E2ClpySVlhNnZrTUNMOGkwdkFuakxydngzZXNyVG0yMnNuZHRlQUQvY2NEYndlLy8zU2RQSlplcnNzYmlGYndUL1oKVnZad0F4bENBZ0gyZ2hZS05kcnNoWWVmWDJUbnpYcloxa25XR3BjcXVjUWdJZ05hZ21CUkhudnBMRHNSNGJGRApucVFwOE5NUlFTdVJ2bTNOcER5dFBZS3lmTWpxb1FOSUhaU3liUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSUtoSXkvSk84RTRmOHIrVWtHZGhZbEJFODJBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2I0YnlKcW4zeUhnRktlWU5UUlFYcENMdlZrQU9tOGNGeHY0RS9NaHhXcG1rV3A2d1lKNnVUCmZGa3g1NTh5UG9EdjZ6STZNZ0tDeG9jeDErc1ZmQXdOWERaNC9Pc1JaZ2hvVEdsbGk3Qzg1Rnc4UE85L0g2b2EKaE5ReEpsOW9tYlo3VHhDcnRsc1ZhWjAvL0c0WUxFdm5ETEw2QkN3d1BBMUhZT3hzdkUvR0VYRmtqeVhoL1ZqNQpQRFgwbzIwUUEwWTJTN0M3dXhVVGxrZE1kNXBsL3hHcU9tcXQrOHhCeTJkMUpibnlyZnNpRzN3V1V4T2tXSnBOCkJEc2RhMzBNS0U3V01SY1dxSldpQ3VrNmp1aWVxLzM2VThmejU2V3BWUi9tVmRsTXZkZTIwVnI2bDBKZnNoR1YKVVVWY1ErUndacTZIZU9VYkxtK2N2dUhKK25oUExSSUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTRENDQWpDZ0F3SUJBZ0lRY3JmWDVKSmhTbzdWVVQ5K2tJS1lLVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qSXhOVFEyV2hjTk1qWXhNVEEyTWpJeApOVFEyV2pBak1TRXdId1lEVlFRRERCZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEVm9yK2RSWW9OcURTcUxNNG8xcE9OeDdZaXp2bHYKZU1nMjRuaEJRWDJTM2E0RWx0VUZPQVlGM0F4SmkySEpjWU41NkZCeHN3WFFWVWNGTzhqa2g0WEdwRGxZQjA1ZApSRDBxQ3JsTWVzVXlEWFlNUlpwSmp4QXc5b3huMTVUcUt4N0JmRWp1dTcrTGZSMTV5Z1ZtRHRxN1VSZWtRc0NYCjNoYU5pYmp1Y0s0amVzVjVsbGhpUldha0NBT3VMMkhGSk1XeGhHbU96SEFqZFhNYW5yWmtLeHdkNUttdnNmdWoKUzlmdEo2SFgwMUZSc1BkVUdKSnBPRUwxaW1IUUtvYzFITVFmZ0t4VUd6bVkvYjJmSDVWMEQ1eHJBSzhOZjBvNApPMHgzdzh2a1lmOEFHN2JJbVZ3emlTekI1S1N3ZXE2Vnc4ek16aW8yVXg1ZVFyaURuSnBFcmxMSkFnTUJBQUdqCmdZWXdnWU13RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZJS2hJeS9KTzhFNGY4citVa0dkaFlsQgpFODJBTUNNR0ExVWRFUVFjTUJxQ0dDb3VhSFZpWW14bExYSmxiR0Y1TG1OcGJHbDFiUzVwYnpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFEQ3lBeXhSbkIvYjZKMFdTRklIbitsUm85L2Q3M1hEOGw3OTljQ21EbUh3ZGU2NkkKbUFESmVFNHJrYVhlRjZwdDA0d3k2WjNBVDNxMHRaRmQzcXhHN2pZd09LYWJiRWw3aTlsbm5oUGRjS3NseGYyTQp3Ly9ZWnlNakt3M1h4VjZRTW1JTFhIR2hscDBHczVWSS9tSDlnU2dOVkpuZ0JJcGJDb2lJR29oOUxGMWQ4a05sCi9uRTJ5ZWw3S2p0M3E0ekRmZU8vWW45YmNLSWNLNiswVTJ1a3BVQ2IrekJVQ2k3cW5zbE1uMGIrVGsremw2cnUKdk9uWGdwWXpNY0h0L1diZVRXa3orZjBpZjlpZ2tCY3NyNGU4N1BKVVNXNGw3VzVWTGNjUDZNcUFVZ1piV3VsNApOcEc5V0x4UE8xR2hzRXE3WmNXbXRqZjZZbFhuODdYQVRUYVBJQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMWFLL25VV0tEYWcwcWl6T0tOYVRqY2UySXM3NWIzaklOdUo0UVVGOWt0MnVCSmJWCkJUZ0dCZHdNU1l0aHlYR0RlZWhRY2JNRjBGVkhCVHZJNUllRnhxUTVXQWRPWFVROUtncTVUSHJGTWcxMkRFV2EKU1k4UU1QYU1aOWVVNmlzZXdYeEk3cnUvaTMwZGVjb0ZaZzdhdTFFWHBFTEFsOTRXalltNDduQ3VJM3JGZVpaWQpZa1ZtcEFnRHJpOWh4U1RGc1lScGpzeHdJM1Z6R3A2MlpDc2NIZVNwcjdIN28wdlg3U2VoMTlOUlViRDNWQmlTCmFUaEM5WXBoMENxSE5SekVINENzVkJzNW1QMjlueCtWZEErY2F3Q3ZEWDlLT0R0TWQ4UEw1R0gvQUJ1MnlKbGMKTTRrc3dlU2tzSHF1bGNQTXpNNHFObE1lWGtLNGc1eWFSSzVTeVFJREFRQUJBb0lCQUhiRGFBUjFVUjd3Z0g2TwpNL210K0E5Y2s5dGI5bnpLeDNzRGdWaTlvS0tSekJqUEJSTkdwc3FCSHUrUHBjZ0g2OUJNbnRQbWN2ZnpRRzBmClpEbnZRU1pCeTRNdFpKb2l3bUhwM2tNdkNRc2ZRcDNsMzdTKzdJQmJ2NGhHNTRrYWVabVVqekx3ZXJaLzBuQVAKSjlzcHJOMXZZbFkxcWIyRGdFUWs2UUxjNzJIVzdUOWcrQWNHNXJFVlcwM1l0VjZDQ3oycW0vNFcxaTdrdWJ5cQpWZThRL1FjT1BFaDlKSWZKTVAydUpYVDFmYW9WOEUzYm5LTmh3di8rZUxSTVVya29IWWpFNGhsa1hGWE1NdjBvCkFQejNjenkvWks4RWJkRE5zOVpoZGpjRHZRN1pZQ216b0E5RHZQRUZUTGVLUFJKODlHYjdmb2lDWTBSR3AxNHQKQlgrNWFWVUNnWUVBMzBuUzRtL0lFam53L2NIRUxISktSMFZwTWQ2c00zUEg0S1lGZnpRWGVxbUZ4QkFxWU9ScgoyMDZITHdsZU4vQy9EUDZvNEpwODJmVzFjUi85Yk9sUFV4aGthN3RuMlIyMHpTK2JsWEFvNGNNc0FqQWJRbVBhCm9FOE5jOWRyUHZNZHJHak9rT3N2dThGeXhIRVR2bStyVHdHSy84K0ZmbVR5ek5OUkJEa1ZxYWNDZ1lFQTlPN3AKM1lGWFBaUDlPNWtuVFQ5b2NtaXFFaFZ4a1dobW5yL1BpTE5WaExjcDVtWGxBa2FtM29FcHk5LzMweGc0OVdOVQpGekhCVFlOVXpGcnpUVUd6QzNXSmxIL0grVWZsU2gwU2x2dGNZMWQ2S2FJWmVzVGZrWDRWVlJNMStabjZXOGJhClRhN1hPdWZabklpU0E0dE1yNHJ4RG1TK3QwMzJVQjc1dUxXVHpnOENnWUVBcXlXUnY4QkFVVUFhS05heGdBUG0KVFRTMXllVE1odStTMysxQlAxdjFOeTdpK2dJT0NaQnIzNEFVZkFncE1LV1dPdWFqR08weEQzdVhKR3VKdTBZbAphQ0xGTGhKS0tnL3IrbTRvU2VYYllCaFNEaWREYmFMTis1dzhTbk51bjZTSE5SUnNhSVhzWTNTR2ZHM1QzVjhJCnBwa2ZLcTZzdXRHempTM1g1bTIrM2ZjQ2dZQjNNZEVqbDI3eUs1T2ZyajkvQ3kxMEI5VkQ2YVdUNHArVi83Z3EKU1VPRHkzTWJpVml5QzlubkRDcGY2Y1Y3dUJ6MzVmZWxOZlJoR1ZscC9aVExjdjZEeEJaSTZ3cFJHSmpQd1dncgppM1dCYnErbmxSZ2JNN1dzNHhQVWkvM0hVeFNRRnl4amc0T0FTaFlQWkRMU2dMYTM4c0N1aFg1K1MvVmpOai9HCmtLNjJKd0tCZ1FDdEFuTE5BVjlyTUwwcUdQaTZxYUJrenVORy9tZlpVcG9FS2pQbWVnNVNxcWQvVkMrU2FjQVgKQURtY0loRkpWcEN0dEdSdzcrcmxCb2FQRllSWnQ5dlV1Q2FaemhYdFJ3eDdJVGNqR3FzUTNtT2VFVHptZ0dlTQo0d3h0OFNMeXRhejRyZkZIWWcwcWt5R0JnM1RhNDZqSklCaDVvbWVOZ0hwdjBCbmZURlVlUFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU9wU20xcDlLdEQ5UFBoUmI1bDBYdVl3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNVFUwTmxvWERUSTJNVEV3TmpJeQpNVFUwTmxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUF2YUNncU05Myt4UlR5aDM0MHVNbVk4Q1BlZDNGdkwwUFNjQlpIZExPcjdEc2VYOG8KMVRsTkw0bll1Y1dOZXRaTUpCZnN4a2NUNklUdHBVblZxeS93TUxWYnpzSE1rdis0c1daaXdqc2UvaHFOZVpIUwowMmZCQUJWRDNGdzljWVNOQW9nYjQwTHUycTI2eVo5RlVqcUF1Z0tnMVhwQytTdHNGckxQUEk5K0JqRHJEc0E2ClpySVlhNnZrTUNMOGkwdkFuakxydngzZXNyVG0yMnNuZHRlQUQvY2NEYndlLy8zU2RQSlplcnNzYmlGYndUL1oKVnZad0F4bENBZ0gyZ2hZS05kcnNoWWVmWDJUbnpYcloxa25XR3BjcXVjUWdJZ05hZ21CUkhudnBMRHNSNGJGRApucVFwOE5NUlFTdVJ2bTNOcER5dFBZS3lmTWpxb1FOSUhaU3liUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSUtoSXkvSk84RTRmOHIrVWtHZGhZbEJFODJBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ2I0YnlKcW4zeUhnRktlWU5UUlFYcENMdlZrQU9tOGNGeHY0RS9NaHhXcG1rV3A2d1lKNnVUCmZGa3g1NTh5UG9EdjZ6STZNZ0tDeG9jeDErc1ZmQXdOWERaNC9Pc1JaZ2hvVEdsbGk3Qzg1Rnc4UE85L0g2b2EKaE5ReEpsOW9tYlo3VHhDcnRsc1ZhWjAvL0c0WUxFdm5ETEw2QkN3d1BBMUhZT3hzdkUvR0VYRmtqeVhoL1ZqNQpQRFgwbzIwUUEwWTJTN0M3dXhVVGxrZE1kNXBsL3hHcU9tcXQrOHhCeTJkMUpibnlyZnNpRzN3V1V4T2tXSnBOCkJEc2RhMzBNS0U3V01SY1dxSldpQ3VrNmp1aWVxLzM2VThmejU2V3BWUi9tVmRsTXZkZTIwVnI2bDBKZnNoR1YKVVVWY1ErUndacTZIZU9VYkxtK2N2dUhKK25oUExSSUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURURENDQWpTZ0F3SUJBZ0lRRWxJUmFsUVVxMGNFK20zZmhnbHA3REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qSXhOVFEyV2hjTk1qWXhNVEEyTWpJeApOVFEyV2pBbE1TTXdJUVlEVlFRRERCb3FMbU14TG1oMVltSnNaUzFuY25CakxtTnBiR2wxYlM1cGJ6Q0NBU0l3CkRRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFLcUE2Q2UrVDNzV2hKdkEvTnRKRW5xL2wvVFQKcnV6QW16ZGNQN0hPMXdrLzVqajRiQ2dKRCsxU2VnV2lLL3lCNWVrZ3JFNFdkeEtzR2o5b2V3NEhjY3pWSVQwRApXY25UY2VxclNqMTllZUJFaktjL01mMm1Ib0d6SlJkUjBsb0w4S1hXQkp0Mnl0aVVaMjNDb3dyMTZkRlFzeWNpCjhpTTd4MDBvN2c3WTNwaytQMTlYUXZwVmppT1hhK0sxMW1DT3pmQXlzVmgzQzF2MjFlZFdRbkt1ekFweHlMM20KeWliOGVNcHN4VDUrZ0Z2bDNIY3BqRGppVGVuUmdWUTYyUVdnVk9zQUZoczY2L1dPbnlTWWtkejZUY1pRdG5HdQpWL2JDQnZlWDYxMVFwb2sxcm5hMHBjd0JYeTVtTWwxOThBTm9lL2ZUcklkaFcySnVNczI2Z3NmUEV0RUNBd0VBCkFhT0JpRENCaFRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0cKQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVncUVqTDhrN3dUaC95djVTUVoyRgppVUVUellBd0pRWURWUjBSQkI0d0hJSWFLaTVqTVM1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQUZoT2NZcUhoTWo3R3oxTjZWNGZvbzVaVVc3VFprRGg1bmlQZHFlRG5FbGUKVUdoWGEyUEF5MmFpemJuVFoxVm1zMWlVczdYekFWNFBRLytTTVlXRTR4ZlkxVk9vQ3ZlYXE5aXlINWJtbWxUZgp1VWJRWDRrMTIrb0VGejJrUHBPWDZUcjFsamtrUXVXdDRzZHc3UFpkN1FBWTZSN3Q5K0lBQ2xxZ0REUzQ5QVZxCjJHYXZMd1VSQVJBRzBjRWZLbFNOWHZ4Z3A2SzV5RmhGbW5vTm1iWkplbkhOTGVOSU80MXJEMlVKdGM5TUo5K1MKVm1CQTczS0VzbTJveDU3aWxBTEpuSkc4NlA4dUFBK01PejM2U3ZOTnJnalJIMGJDYllDRkFoSDdQWEJsZlFrVwo4QVdOTmUwdWFRNzlUSUV2RnVncFZ2L1hockxHQkdBU1FXYk9ZRG05RURvPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcW9Eb0o3NVBleGFFbThEODIwa1NlcitYOU5PdTdNQ2JOMXcvc2M3WENUL21PUGhzCktBa1A3Vko2QmFJci9JSGw2U0NzVGhaM0Vxd2FQMmg3RGdkeHpOVWhQUU5aeWROeDZxdEtQWDE1NEVTTXB6OHgKL2FZZWdiTWxGMUhTV2d2d3BkWUVtM2JLMkpSbmJjS2pDdlhwMFZDekp5THlJenZIVFNqdUR0amVtVDQvWDFkQworbFdPSTVkcjRyWFdZSTdOOERLeFdIY0xXL2JWNTFaQ2NxN01DbkhJdmViS0p2eDR5bXpGUG42QVcrWGNkeW1NCk9PSk42ZEdCVkRyWkJhQlU2d0FXR3pycjlZNmZKSmlSM1BwTnhsQzJjYTVYOXNJRzk1ZnJYVkNtaVRXdWRyU2wKekFGZkxtWXlYWDN3QTJoNzk5T3NoMkZiWW00eXpicUN4ODhTMFFJREFRQUJBb0lCQUU4cVRTQnU1MzV5SlI0ZwpUQWNROVlpU3Z0NUpEeFlVRTcxdmtvOWZSMDZmSWFqZ0IyL0xUVjdXaFp0cUFkeGEvOEh2anJFdkV4aFRXbGlJCmpXSWxLTHgvVk5COFpzc2o1dWVib252TWI3TW1nTndDcHBacjlBd3FmcFZHUTFIVjYyVkVhcDA0V2RTWGl6SlcKUmRlSCtJbGNXK0pYQW5CRGlEVVdSUG9WemJ6K2ZPdHhBUWlTN2lLQmMvbGFSdnordUxobmQ3ZFNVYVVpWmVJeQp1N3dFSE5TdURPTld3S2RWZzdtK0NQd3BHWGRjWmhZWllEM2JuWkpjMTJOMk1hMG1Db2NMMWI5WUloRVY2YlorCmQ0cDFkdlE4ODhGV0JLQVd0QVpNeXlTV0RDY1RDREdRTHZ6TVBBekdtRE9MazIyUisxbm8xOXZaM3kwTzFDY1YKOWxVSzIrVUNnWUVBMURzMGhmSnRwUXdvQmtCWmdLZ0RnV0Q5ZW50dEw3L2VsbitTYloxVVNvNWdjVThsdVIxLwp4dzhiTFBrcjY1M0l2UDBpeXg2TWNFdWNyWEtFR200aDRBTThpYkVlV2s1L1NPOUUreks2QmNQcmJIbk1YZjY0CjVVTHQrSHlxSlpXV2pCdHdUQld6L0R2ejQ2T3d6WUxUeVE0Q3NKVlZZMGRuU3FKY2tIajgvWU1DZ1lFQXphcXQKYm50a1R0ZnJsZ2szVzFKWVdpZGZhYjBncW5UL3Y3REk2L3o0eGVBNXo5UUVNYlJBMSs3Z01xbyttbTBNQmgvQQpMdGNtY2o0aWNGcGdnb0x2VmtPc1VtV1J6emVmQWZsQmlLeS83YjExeVhUMkNyVzgvaWtnZmpQV09YK3dSTy85ClE1NmljN0JiVk96TmpqOG1PRHhKb1FEVXFXVFZuUHVmUU5vVWNoc0NnWUVBcWlJQUcvVFkwcnVwQmtIbHZnNXkKS1BCUW96UjR0aE9RNDRMSEpwbzk3VHF2czRYb1RycUlLVkpCemM2OTE3YjRLaENmS01lSGU2b1Jvcld2a3VTQQp3V3kyeGdhM3QxdEFESDdMQkxpSWlZQ2lwS1lMSDdySUMvbVlmVitxb2xDRmpER2UxMDk2cHBTRkVoS3g5RDJSCmU1YUFyNEEzSUV3b1VKdFJxdnRpaS9NQ2dZQkFtajVFR0FwWUljYmtxQngxV1JaYnEwWnpSbTgrVytZQjVwd1cKVks0b0tkaS9DWkFQdE5reGV0MTl6TEJCZmNOcklRb1RMSTN0RU10c2sxY0JaL09hRzBQRDFoZkpDV1d2RHdhZwowZkt2MFBWd3hJYU1zcTJkQUhvdWFrWCtaYmVPei91MEE5NXZqSlFEeHlhQ2FoK3RSbkt5V2pweXd6TytUZU9tClVWcGV4UUtCZ1FDYzc3cVhITCtTQzFIa1FWbExjRjdqc0RhdGoyY0E4NEJPVENnRFE1RjRLN29MZXNIRGdkQUIKMUFpMGpFZkFFMythck1pb2lGUm95NFp1WFg4L2FoMjFMckxYSUVmbzJ5UHRGLytPdkI4dmNVV1JSSnhqMnBaSgpZZmJ5L1VnOGdVQ2xrMWxFd3p4TzVNVHJGMFpRVW9HNVZHTlhlTUR4eStSeXpLV2tab3YvMkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c1
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "11"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-wireguard: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"
  ipv4-native-routing-cidr: 10.0.0.0/16

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.1.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "false"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c1
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.2@sha256:52f70250dea22e506959439a7c4ea31b10fe8375db62f5c27ab746e3a2af866d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          rm -rf /var/run/etcd/*;
          /usr/local/bin/etcd --data-dir=/var/run/etcd --name=clustermesh-apiserver --listen-client-urls=http://127.0.0.1:2379 --advertise-client-urls=http://127.0.0.1:2379 --initial-cluster-token=clustermesh-apiserver --initial-cluster-state=new --auto-compaction-retention=1 &

          # The following key needs to be created before that the cilium agents
          # have the possibility of connecting to etcd.
          etcdctl put cilium/.has-cluster-config true

          etcdctl user add root --no-password;
          etcdctl user grant-role root root;
          etcdctl user add admin-c1 --no-password;
          etcdctl user grant-role admin-c1 root;
          etcdctl user add externalworkload --no-password;
          etcdctl role add externalworkload;
          etcdctl role grant-permission externalworkload --from-key read '';
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/state/noderegister/v1/;
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/.initlock/;
          etcdctl user grant-role externalworkload externalworkload;
          etcdctl user add remote --no-password;
          etcdctl role add remote;
          etcdctl role grant-permission remote --from-key read '';
          etcdctl user grant-role remote remote;
          etcdctl auth enable;
          exit
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=clustermesh-apiserver
        - --auto-compaction-retention=1
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.14.2@sha256:0650beac6633a483261640b6539c9609f5a761f4ab4504fd1e6ffe7f2bb82e9a"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.2@sha256:a89030b31f333e8fb1c10d2473250399a1a537c27d022cd8becc1a65d1bef1d6"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
