---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU90SjdKZ29tYjBuRGZQdStLRjdaaHd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3T0ZvWERUSTJNVEV3TmpJdwpNall3T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUE4dThxMi9MZDZldVdmdXJGMzRMUmZZVktWc2FldlNkWmpXZFh5bGlOWEpyTTRObVEKRjUzOUxGWjhIeUczQjF6RDJzbW5kdnhnbHovQlJHVXhOekJyYkNDZFVHYjh0OG1YcUhHTmJOc2JsQzUxVkFregpUWXlWRVcvRVFDemllN1FnQ1JyVWhPc1hXSU1IRko4UjBMVVc5dyszRzJ0TVZKbHJHYmpjTHYrVURqSFBiZ1NLCi9xbWx4cmpRTmswNUV3cjR0dEpOZ2xFMmR1WWhKZG5RYloxTmdUS1dCMDJBQzNEMWpHL21SeDFuS2hxU01BbDkKeVRXWFgweU54bWxoZ2Zsd0QzaWlYaFEwYmpNVnFjMWphZGs3U2pvTm1qQ2RRa2syVU9mUU1Bb3VMMWJ3RTNRcQpCWTBkRWQ4c045ZnNqdFdrZjdaL1dzakFiTnFKZEpEOHJ0MkJEUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQjlmV2VZblJ4VlViTnZSTlpKYi9kWEVXaVZNTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRRHVNZTh3MjN5blU3Q1FuY2tJK3YxZEpkYU5BSW1TVWc4MXFFN05ZeWxZK1BiU2QyaWxveHNoCmFaVlZodGlIOGRVZU9odjBBMjVTR29rZFh2cUU3WnlpK2t3RmY3UkxmMkJNaHBwY2NFNDJGcXZjR0lqWTM3emUKODVvM3ZZOVNNMVNVOWVKY2ZXZ0FoNDBtSFJ5VUQwUjhNcDBzMk5vWVgzWExNNlBDei85bFJHYUFZNjFMWGhjMwpzUHdaUjJpTys0bXNjNHdTYUZpQ0ZXWm1CSldyOVNrVEM4UTdSdXlsWUxPY2xhS2dLeGd4OVZZY2pqV1IwbXpNCmFCdzkvTGdZV3JKaFEvS25TcVF0YnRTTGhHN01oRDN5MldsWHhhQTc4Qmo2TGZZeWgrVUpuN0VTVEVlLzJjd2MKSzI5TjMzd3pBM0l3TENTUXpWbjVxdWFRV1YwWFNvWUUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBOHU4cTIvTGQ2ZXVXZnVyRjM0TFJmWVZLVnNhZXZTZFpqV2RYeWxpTlhKck00Tm1RCkY1MzlMRlo4SHlHM0IxekQyc21uZHZ4Z2x6L0JSR1V4TnpCcmJDQ2RVR2I4dDhtWHFIR05iTnNibEM1MVZBa3oKVFl5VkVXL0VRQ3ppZTdRZ0NSclVoT3NYV0lNSEZKOFIwTFVXOXcrM0cydE1WSmxyR2JqY0x2K1VEakhQYmdTSwovcW1seHJqUU5rMDVFd3I0dHRKTmdsRTJkdVloSmRuUWJaMU5nVEtXQjAyQUMzRDFqRy9tUngxbktocVNNQWw5CnlUV1hYMHlOeG1saGdmbHdEM2lpWGhRMGJqTVZxYzFqYWRrN1Nqb05takNkUWtrMlVPZlFNQW91TDFid0UzUXEKQlkwZEVkOHNOOWZzanRXa2Y3Wi9Xc2pBYk5xSmRKRDhydDJCRFFJREFRQUJBb0lCQUVVVG9xRTJGc21yOW5nUwpNNytSU0JZajczWnJOYm5kVllaeXF6RGJLeDc0MldiYUZqSFE5NnRDMERwZDhOaEVGV0RCMUQ5dUZkME1BTjE4CjFKaTN5T1BQQmt4VmJHaXFCdGlicVRZWnUyYlFLd2FCTXpoSzBCeE1Kb2FFL01WbCszSDdVaENWZEdiem92REgKSmw2dEQyR2k4MUwxbUplNXBBMkZWZjU3SjlNODRzWUQ0QzVWNEF3NEZScWtyckx6T3hOUVl1Z0FiZHlRTlhSdgpRcUtwTVRWMHZGc3VQcFFWby9xZTNVQ2tscTVraFdlK0d4VmdDMFNiU0VZVWFKSEpCTmNaVUpUOXQzMTdwKzRVCmF3Y1EzTGp1SjBmSlRBMDBmRlpuZW9MWUZQMnFQTDlIb3JnQStYTU1rV3k0SjNiWkkyMTJWaE9MalVIVFFSZ1kKTWxUeFhEVUNnWUVBKzA5Y1EwUDJlRTdmSjBCT3Jzcm5kTElLc2pQWDQrQVhSUGphWWtJaHpRSE04d3NKUU5qTgp3aExTOHlwbW83U3JqOXhINFZ3dE0vL0trOW5HRGM1U0R3VjBuYms1bGNvNldkTHZmZjhKeitVdlQ5eFFPa0k4CnBrbEtLYXBHbUtqZVJQSkZjK2cySUNGR2dpWEZENnVpUFNPbG12VnRsenlmNjJrNjdRcSttdk1DZ1lFQTkzZksKcWFYZmVlQVcyMFdRdXh3NGVwblhCK3loVkE4aWQzOTBaNnhOVy9KZUgvR1ZrQjhWL2RPQUV6STZxdHJlaFJkMwovbUhPc2ZoN1lrVW5WaGJtVzNsSnZhVFdEVnpkSkpzVytYQ2k4S3A1TThhaUZzYnl3WWNkN3VwSm5EdVNKV01YCkZTOEdOL0ZFN1YzNnlzU0FzNDNGbHNzOU9ybmk1MmwyVDZTQ2MvOENnWUFUQkJOSUo3bGJxeVFwbFMwZS9zMTYKd0FvZEo5MGJLaGE0cWxmai9Yc1BSeWFaOFdqVzFsRGpjWWN5elMrTkRadTV2QUpZWkNBcmdoeHpDWlI1OFBXMgptMFFTdHpSTFNFMFlCT1VJVktjS2F4NGtYZGhZUUREVXFGRUxUQTRoZVEyd2krQ0RmN3V3dkxQWUgwR0ZDUWl5CnRhTFBVZWpqKzd0aUZjbFdyR3gxendLQmdFNVZUQUNCY2dqNUp5TUhsVFcxVENkNjFQYzhMeUVWblZwb0xPZTQKUWRDT0dyOVAwSUVMWmdHdjFrVzlTNWJUcTBaRDFJYmdYUFkyNm8rRHhselk2TmdodjNiWlc2eGxMZGN0aElzMgozVTBER1ZTTFZybVJCankrVVhwVURUTDRKRjNUVFBZMnFXaEI1Z2loREFidFJyUVBkM0V4S2xPUmpjS2t2bitkClduSHZBb0dCQU1BblZhNVo1RTlPNDFJampmdEN6YTJQSzFVTWNMRGVkUWlLMm00cm9zeTIydkMvc3JmWTNOZGMKaVQ0M0FPdmQxMjBtTFIrUmVLTS9FaGZNMHY3THAwdG5XcU5SQWgweUNBS3FoaXpjeGQ4L3JSNG04THAyMjhzYQpoM1huaW96VnZNKzhhM1AxTTBGWENUdkRoV0FKWTBNdU40cENqQVZDRHJ2azA0bVV6ZEJWCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU90SjdKZ29tYjBuRGZQdStLRjdaaHd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3T0ZvWERUSTJNVEV3TmpJdwpNall3T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUE4dThxMi9MZDZldVdmdXJGMzRMUmZZVktWc2FldlNkWmpXZFh5bGlOWEpyTTRObVEKRjUzOUxGWjhIeUczQjF6RDJzbW5kdnhnbHovQlJHVXhOekJyYkNDZFVHYjh0OG1YcUhHTmJOc2JsQzUxVkFregpUWXlWRVcvRVFDemllN1FnQ1JyVWhPc1hXSU1IRko4UjBMVVc5dyszRzJ0TVZKbHJHYmpjTHYrVURqSFBiZ1NLCi9xbWx4cmpRTmswNUV3cjR0dEpOZ2xFMmR1WWhKZG5RYloxTmdUS1dCMDJBQzNEMWpHL21SeDFuS2hxU01BbDkKeVRXWFgweU54bWxoZ2Zsd0QzaWlYaFEwYmpNVnFjMWphZGs3U2pvTm1qQ2RRa2syVU9mUU1Bb3VMMWJ3RTNRcQpCWTBkRWQ4c045ZnNqdFdrZjdaL1dzakFiTnFKZEpEOHJ0MkJEUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQjlmV2VZblJ4VlViTnZSTlpKYi9kWEVXaVZNTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRRHVNZTh3MjN5blU3Q1FuY2tJK3YxZEpkYU5BSW1TVWc4MXFFN05ZeWxZK1BiU2QyaWxveHNoCmFaVlZodGlIOGRVZU9odjBBMjVTR29rZFh2cUU3WnlpK2t3RmY3UkxmMkJNaHBwY2NFNDJGcXZjR0lqWTM3emUKODVvM3ZZOVNNMVNVOWVKY2ZXZ0FoNDBtSFJ5VUQwUjhNcDBzMk5vWVgzWExNNlBDei85bFJHYUFZNjFMWGhjMwpzUHdaUjJpTys0bXNjNHdTYUZpQ0ZXWm1CSldyOVNrVEM4UTdSdXlsWUxPY2xhS2dLeGd4OVZZY2pqV1IwbXpNCmFCdzkvTGdZV3JKaFEvS25TcVF0YnRTTGhHN01oRDN5MldsWHhhQTc4Qmo2TGZZeWgrVUpuN0VTVEVlLzJjd2MKSzI5TjMzd3pBM0l3TENTUXpWbjVxdWFRV1YwWFNvWUUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lRU0pteEY1YXR3WmFXdXl2TVlRNlJmREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qQXlOakE1V2hjTk1qWXhNVEEyTWpBeQpOakE1V2pBVE1SRXdEd1lEVlFRREV3aGhaRzFwYmkxak1UQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQCkFEQ0NBUW9DZ2dFQkFNQVkzbFB1N0pRRHUzcWZlb0YzYUZLbjhIY3N5R1R6T1dEeWVIWUpmcVE0enRJODJpa0YKWWduK0poWEZWNVFqTWxZcGlkSEo2WU04bTlOaXpjU2Jydm1pM3hFUTh6UkoyaTZPSWRrRkg1QW93OXBpaEo2RQpjWHJBRlBMOE9LZWh1T1FOTnNxY0NhUFNydmdIelhJTTdybFVTUm5XN0FPK1lLbEdFdXErZlYyaWpDbU0zZy93CllHVWw0QlA3akFDV0EvWFVHWnhHZjdtNlMrNm5pb09tdG1wNG5JMEpmcGFzQmRoQy9HWE1WZXVtNUlNNDV5WkYKZkZhSGYzaVVPNndJTjIrUlpuMi8vaEg5ZERpa3UyY0NjYnBrcS80Nys4OElqQndaeVd1cG03WUZnTGFmcWh3QQpyUDdGbW5PVjNLVUtGaGFjVm44TDNOSXY4ZlpnUVhVZi9SMENBd0VBQWFOMk1IUXdEZ1lEVlIwUEFRSC9CQVFECkFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUEKTUI4R0ExVWRJd1FZTUJhQUZCOWZXZVluUnhWVWJOdlJOWkpiL2RYRVdpVk1NQlFHQTFVZEVRUU5NQXVDQ1d4dgpZMkZzYUc5emREQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUF2RElrcjRnTDczS2pwZStEeWdlMFpmRWJEeHVPCjVsTjE2MFAvMS9YN3MvLysrdVV6SDdwN1U5MTh4VHBSVStpR1Y2eTBMUmpkdmNuM3crWjFoWUc3NlJRZTI0VE0KVjhPdnRUYUx3Rks3ajd4YjZlQkZHWUZmODArM21oN1VHQzUxSllSbkVrdzdicm5QZmptWjdPSUpxUVBKcmJsdApCdXpuR2tUOGM0SExvRUZacTV0d2dVbTdjS2UzQks3NzhBYXV0QUZsYXB3MWszL2RZSnJIVTRCMFpLVnFXaVNzCnhiVDhzZStZL3VSRDBaVkZseC9uU3l4eFF4MnJia2crc1o2OGFhSzFqWEhyb1AxZG5tOUxteEIxcXUrRHM0K3AKbDAxcmJLdS80VHRLdnFTTFl4OGJ6a0RoaUpvMWswd1VqdFlZdGRMZ2Z5N05SU1dHbUR1QWRVdHlzdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd0JqZVUrN3NsQU83ZXA5NmdYZG9VcWZ3ZHl6SVpQTTVZUEo0ZGdsK3BEak8wanphCktRVmlDZjRtRmNWWGxDTXlWaW1KMGNucGd6eWIwMkxOeEp1dSthTGZFUkR6TkVuYUxvNGgyUVVma0NqRDJtS0UKbm9SeGVzQVU4dnc0cDZHNDVBMDJ5cHdKbzlLdStBZk5jZ3p1dVZSSkdkYnNBNzVncVVZUzZyNTlYYUtNS1l6ZQpEL0JnWlNYZ0UvdU1BSllEOWRRWm5FWi91YnBMN3FlS2c2YTJhbmljalFsK2xxd0YyRUw4WmN4VjY2YmtnempuCkprVjhWb2QvZUpRN3JBZzNiNUZtZmIvK0VmMTBPS1M3WndKeHVtU3IvanY3endpTUhCbkphNm1idGdXQXRwK3EKSEFDcy9zV2FjNVhjcFFvV0ZweFdmd3ZjMGkveDltQkJkUi85SFFJREFRQUJBb0lCQVFDc3hERUJEL3RhUzlrTAp1ZTcyRGF5WDJrN2RBRHZpL3hWMTZkMEpYQlM0SWhkdzRpWGJpdW5YenVuMTNweWJzT1FPdGlFcnV3cjNhMFZDCllyUnB4Uk1qbGFaRnRSYm15aDBlamRwSFV1SkdSME9PWDlpaXNMOVhCUFpTYXlHUk1sUVZWd1VXU0N3cldNcmcKYkRRTUJUR1hJUVQxNW1ReUljRFJ2U0k2V2NScXRyc2szdFY0ZUs2VDBvWWFPS0tiVm5LQ3NZMXRoWlRyU1RsSwpBTFBacUJiT0pxU2VkZGlpNDc1T3BFdEJSZkpNQ2x3QTAxd3JmaVlCazJyQnBJTmxza2FKSFQ0Z3VjOWxzSnFzClFVYk5HL1lHTnUzVVlEcFdVZlI5Q21HaUxDSXUrdHlXR1JuUDBUK2NqUmhrZFBLeVRDY3FaZDdIeHNuUlNGMFMKS3J5a1VLdkpBb0dCQVBoQ1ZvR1JaajJzZVF1RlVmVnQrTXV6NVhBYTRsUlNmQzBnLzVVRmozOFNYVEdYdkYxSgpJM2R4dVcweGlXWTlkQ2xXeEdSMXUzRS85ZGxZeXBTRjFPQSt6aVhpbzdHNEhnc3pYQXhsaUtZekQ3ZVBlNWo3CkNEWjFzWW5aUUNEcnN0S1FLTVlXSitSUDc0WjFIZ0RwMWNtM3ZPZWYwa2tPWlhDTlJtTFF4SmRMQW9HQkFNWVcKTzRVRkZZN2thbU0yWjRQWVA5QitCblp1ekR0aCtDWGxGNklnYURDVnhDMEcvbUhVNjIzMnBOT24yelF3NUhsbgpLVW9yNTFJNUlGbHhtK3d5aFBteEM4VkdhS0JEenhoc2EwVEpGcDNFY2lyVzEzYUcyTFFHU3pUWGVJT3lwYy9nCk0xeTUvZHhEWVkvWklMWFYxNVMxbkpwSjVhWmpiQkt1YmN1U0VQUTNBb0dCQUk2YkhMSUU0YVFmeE5CM1h1TUsKcnRYa21yRlE0QjNyMitUWWhiZ0duNjB3MFZQQmc3UmFaUU1oMHBBRTJwWmVTckhNWTdnSllRam00c1JkR3RGQwpKMHhCQjQzL3FHUllEUG9HSUtRR1Z2NlJhai9aTGZoc2l3VXRpalJURldGVHd6N3RERjd0THpFWk1kQWN5b1ZmCnpTeTRYTXo0bzRUUHZqbHZEYldKa3NRTkFvR0FNWTBhTW5wRkhFdVRPV0pBbnNDWHBnWUFnOXZQaHdOSTJlSG0KK1kxMXdzR1VJMWRlaHdhR0ppbk9yWXVOMEE1eStOT1BocGhZOHo2TEV4VFNWbEdFNWhrZHdxbU1QcHIzMFRvOQoweVVpWFREcEJrSmIvN0JYd1NEWjYwd0RQNTZPeitOYnRkUm81cEtNY3psemIwa2c5bmcveG5DNTI5ZC9EMlZHCjNlZWFDaDBDZ1lCV0VuRlJpbzFJS29zTFduUVN6d1djWmxibm9UdGtKQ3NrWUxwa0xMSCtvaEFCRXN0ODl1NTUKQU5VNkIzeWIrb2RnRTlObUQrUDczcWErZEhIQ25VM3hqNm9IdkRSeGFQbEpmRzc5MHBHVDhUWWk4TzlrTENQeQpKNHpaVHoxaTZsM0UxZTUrYk9sQ1JLVEVrZDJGU3dFTDVEOHdpNmc2eXZxeVlDU0IwOGJiRXc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-ca-cert
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU90SjdKZ29tYjBuRGZQdStLRjdaaHd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3T0ZvWERUSTJNVEV3TmpJdwpNall3T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUE4dThxMi9MZDZldVdmdXJGMzRMUmZZVktWc2FldlNkWmpXZFh5bGlOWEpyTTRObVEKRjUzOUxGWjhIeUczQjF6RDJzbW5kdnhnbHovQlJHVXhOekJyYkNDZFVHYjh0OG1YcUhHTmJOc2JsQzUxVkFregpUWXlWRVcvRVFDemllN1FnQ1JyVWhPc1hXSU1IRko4UjBMVVc5dyszRzJ0TVZKbHJHYmpjTHYrVURqSFBiZ1NLCi9xbWx4cmpRTmswNUV3cjR0dEpOZ2xFMmR1WWhKZG5RYloxTmdUS1dCMDJBQzNEMWpHL21SeDFuS2hxU01BbDkKeVRXWFgweU54bWxoZ2Zsd0QzaWlYaFEwYmpNVnFjMWphZGs3U2pvTm1qQ2RRa2syVU9mUU1Bb3VMMWJ3RTNRcQpCWTBkRWQ4c045ZnNqdFdrZjdaL1dzakFiTnFKZEpEOHJ0MkJEUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQjlmV2VZblJ4VlViTnZSTlpKYi9kWEVXaVZNTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRRHVNZTh3MjN5blU3Q1FuY2tJK3YxZEpkYU5BSW1TVWc4MXFFN05ZeWxZK1BiU2QyaWxveHNoCmFaVlZodGlIOGRVZU9odjBBMjVTR29rZFh2cUU3WnlpK2t3RmY3UkxmMkJNaHBwY2NFNDJGcXZjR0lqWTM3emUKODVvM3ZZOVNNMVNVOWVKY2ZXZ0FoNDBtSFJ5VUQwUjhNcDBzMk5vWVgzWExNNlBDei85bFJHYUFZNjFMWGhjMwpzUHdaUjJpTys0bXNjNHdTYUZpQ0ZXWm1CSldyOVNrVEM4UTdSdXlsWUxPY2xhS2dLeGd4OVZZY2pqV1IwbXpNCmFCdzkvTGdZV3JKaFEvS25TcVF0YnRTTGhHN01oRDN5MldsWHhhQTc4Qmo2TGZZeWgrVUpuN0VTVEVlLzJjd2MKSzI5TjMzd3pBM0l3TENTUXpWbjVxdWFRV1YwWFNvWUUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBOHU4cTIvTGQ2ZXVXZnVyRjM0TFJmWVZLVnNhZXZTZFpqV2RYeWxpTlhKck00Tm1RCkY1MzlMRlo4SHlHM0IxekQyc21uZHZ4Z2x6L0JSR1V4TnpCcmJDQ2RVR2I4dDhtWHFIR05iTnNibEM1MVZBa3oKVFl5VkVXL0VRQ3ppZTdRZ0NSclVoT3NYV0lNSEZKOFIwTFVXOXcrM0cydE1WSmxyR2JqY0x2K1VEakhQYmdTSwovcW1seHJqUU5rMDVFd3I0dHRKTmdsRTJkdVloSmRuUWJaMU5nVEtXQjAyQUMzRDFqRy9tUngxbktocVNNQWw5CnlUV1hYMHlOeG1saGdmbHdEM2lpWGhRMGJqTVZxYzFqYWRrN1Nqb05takNkUWtrMlVPZlFNQW91TDFid0UzUXEKQlkwZEVkOHNOOWZzanRXa2Y3Wi9Xc2pBYk5xSmRKRDhydDJCRFFJREFRQUJBb0lCQUVVVG9xRTJGc21yOW5nUwpNNytSU0JZajczWnJOYm5kVllaeXF6RGJLeDc0MldiYUZqSFE5NnRDMERwZDhOaEVGV0RCMUQ5dUZkME1BTjE4CjFKaTN5T1BQQmt4VmJHaXFCdGlicVRZWnUyYlFLd2FCTXpoSzBCeE1Kb2FFL01WbCszSDdVaENWZEdiem92REgKSmw2dEQyR2k4MUwxbUplNXBBMkZWZjU3SjlNODRzWUQ0QzVWNEF3NEZScWtyckx6T3hOUVl1Z0FiZHlRTlhSdgpRcUtwTVRWMHZGc3VQcFFWby9xZTNVQ2tscTVraFdlK0d4VmdDMFNiU0VZVWFKSEpCTmNaVUpUOXQzMTdwKzRVCmF3Y1EzTGp1SjBmSlRBMDBmRlpuZW9MWUZQMnFQTDlIb3JnQStYTU1rV3k0SjNiWkkyMTJWaE9MalVIVFFSZ1kKTWxUeFhEVUNnWUVBKzA5Y1EwUDJlRTdmSjBCT3Jzcm5kTElLc2pQWDQrQVhSUGphWWtJaHpRSE04d3NKUU5qTgp3aExTOHlwbW83U3JqOXhINFZ3dE0vL0trOW5HRGM1U0R3VjBuYms1bGNvNldkTHZmZjhKeitVdlQ5eFFPa0k4CnBrbEtLYXBHbUtqZVJQSkZjK2cySUNGR2dpWEZENnVpUFNPbG12VnRsenlmNjJrNjdRcSttdk1DZ1lFQTkzZksKcWFYZmVlQVcyMFdRdXh3NGVwblhCK3loVkE4aWQzOTBaNnhOVy9KZUgvR1ZrQjhWL2RPQUV6STZxdHJlaFJkMwovbUhPc2ZoN1lrVW5WaGJtVzNsSnZhVFdEVnpkSkpzVytYQ2k4S3A1TThhaUZzYnl3WWNkN3VwSm5EdVNKV01YCkZTOEdOL0ZFN1YzNnlzU0FzNDNGbHNzOU9ybmk1MmwyVDZTQ2MvOENnWUFUQkJOSUo3bGJxeVFwbFMwZS9zMTYKd0FvZEo5MGJLaGE0cWxmai9Yc1BSeWFaOFdqVzFsRGpjWWN5elMrTkRadTV2QUpZWkNBcmdoeHpDWlI1OFBXMgptMFFTdHpSTFNFMFlCT1VJVktjS2F4NGtYZGhZUUREVXFGRUxUQTRoZVEyd2krQ0RmN3V3dkxQWUgwR0ZDUWl5CnRhTFBVZWpqKzd0aUZjbFdyR3gxendLQmdFNVZUQUNCY2dqNUp5TUhsVFcxVENkNjFQYzhMeUVWblZwb0xPZTQKUWRDT0dyOVAwSUVMWmdHdjFrVzlTNWJUcTBaRDFJYmdYUFkyNm8rRHhselk2TmdodjNiWlc2eGxMZGN0aElzMgozVTBER1ZTTFZybVJCankrVVhwVURUTDRKRjNUVFBZMnFXaEI1Z2loREFidFJyUVBkM0V4S2xPUmpjS2t2bitkClduSHZBb0dCQU1BblZhNVo1RTlPNDFJampmdEN6YTJQSzFVTWNMRGVkUWlLMm00cm9zeTIydkMvc3JmWTNOZGMKaVQ0M0FPdmQxMjBtTFIrUmVLTS9FaGZNMHY3THAwdG5XcU5SQWgweUNBS3FoaXpjeGQ4L3JSNG04THAyMjhzYQpoM1huaW96VnZNKzhhM1AxTTBGWENUdkRoV0FKWTBNdU40cENqQVZDRHJ2azA0bVV6ZEJWCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU90SjdKZ29tYjBuRGZQdStLRjdaaHd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3T0ZvWERUSTJNVEV3TmpJdwpNall3T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUE4dThxMi9MZDZldVdmdXJGMzRMUmZZVktWc2FldlNkWmpXZFh5bGlOWEpyTTRObVEKRjUzOUxGWjhIeUczQjF6RDJzbW5kdnhnbHovQlJHVXhOekJyYkNDZFVHYjh0OG1YcUhHTmJOc2JsQzUxVkFregpUWXlWRVcvRVFDemllN1FnQ1JyVWhPc1hXSU1IRko4UjBMVVc5dyszRzJ0TVZKbHJHYmpjTHYrVURqSFBiZ1NLCi9xbWx4cmpRTmswNUV3cjR0dEpOZ2xFMmR1WWhKZG5RYloxTmdUS1dCMDJBQzNEMWpHL21SeDFuS2hxU01BbDkKeVRXWFgweU54bWxoZ2Zsd0QzaWlYaFEwYmpNVnFjMWphZGs3U2pvTm1qQ2RRa2syVU9mUU1Bb3VMMWJ3RTNRcQpCWTBkRWQ4c045ZnNqdFdrZjdaL1dzakFiTnFKZEpEOHJ0MkJEUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQjlmV2VZblJ4VlViTnZSTlpKYi9kWEVXaVZNTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRRHVNZTh3MjN5blU3Q1FuY2tJK3YxZEpkYU5BSW1TVWc4MXFFN05ZeWxZK1BiU2QyaWxveHNoCmFaVlZodGlIOGRVZU9odjBBMjVTR29rZFh2cUU3WnlpK2t3RmY3UkxmMkJNaHBwY2NFNDJGcXZjR0lqWTM3emUKODVvM3ZZOVNNMVNVOWVKY2ZXZ0FoNDBtSFJ5VUQwUjhNcDBzMk5vWVgzWExNNlBDei85bFJHYUFZNjFMWGhjMwpzUHdaUjJpTys0bXNjNHdTYUZpQ0ZXWm1CSldyOVNrVEM4UTdSdXlsWUxPY2xhS2dLeGd4OVZZY2pqV1IwbXpNCmFCdzkvTGdZV3JKaFEvS25TcVF0YnRTTGhHN01oRDN5MldsWHhhQTc4Qmo2TGZZeWgrVUpuN0VTVEVlLzJjd2MKSzI5TjMzd3pBM0l3TENTUXpWbjVxdWFRV1YwWFNvWUUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQU9ZTUo5eHo5ZWZwTUJ6cERaNkpSK2d3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3T1ZvWERUSTJNVEV3TmpJdwpNall3T1Zvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQXRpRWZpSTFWRmFOSFZYaDZwa3cyaFVqSG9hWEF1MTUydXlzeFJzYWFFdjVVM3VXT2VhSWgKRkhjK3JRM2hPaENaeWxESWx3S0I4UjE3WU11dnVoNnlZMDJySXR6cytQOU93VmtVTDVLQWhKejBEbFBtNk5taQpNQ2p0aitoaGIwcHNHdkNxb2grSG1ObDNKSklwT3RmT0p6Nlg4ZHM5cFdEcEllT05FMzBkSzRYMDVBWkJpZi9wCkdzS0N5WXcreC92S1RuRDJiV2E5aERGbVJOR0J4RnRSNVJyZkRzUSt0VlVkc1JadnF2TXJuZVhVd0N4RkpiR0sKVnRRUnpxRTBGRHVuclVOcjB5ZkFlTmNUc05saEtydkw5UFJ0TkNqWS9IeFZVZXV3TTFaVVFya3J1SEZYWG9OWgo5eVRWSmNXcWE1QTJ6eUZtK2FGYUkwNXFpWkp2c0kwNGdRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVUgxOVo1aWRIRlZSczI5RTFrbHY5MWNSYUpVd3dEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUtzVGgyU0VhVzZ6OEpFY0ZHRWxjTktDdVFuTXkvbUhTd240OEI2Y2N4dTM5cURneW5nN1h0NUE3TCtxCjAxQU8yOHNmOGVrNFJoRkQxQ20xai94YTFJV2dmMktyby9lbWFzOW0rVkNJNFBqK000dTlRang3azRNZDhtNTUKT2M5eXl0b24wNGVpblFsWWFJWFE4eUQyNXZVL1oraHpVdXgrZisxUWhSbDZqQk0za3poeVdFVzJTc05qSEE3aQpXK3hycWNSQ0oyQytaRXY2Q0tQV1ovbFErc09rM0VQa041aTlBcXNaa1pBWWpCTFk5R3dNY1JIY2pud2xydzFhCnpJUzhoSHhzdmhNdmxqV1hBNDZuejR1SmplbnNTN3JKZ3VVbkxiZjE3RkREekY1bjRxWS9sYnFqMk1ZYUlVUjIKUnJhbFozaFQyZDZSeGlEeURyckxYK3kxc1FFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdGlFZmlJMVZGYU5IVlhoNnBrdzJoVWpIb2FYQXUxNTJ1eXN4UnNhYUV2NVUzdVdPCmVhSWhGSGMrclEzaE9oQ1p5bERJbHdLQjhSMTdZTXV2dWg2eVkwMnJJdHpzK1A5T3dWa1VMNUtBaEp6MERsUG0KNk5taU1DanRqK2hoYjBwc0d2Q3FvaCtIbU5sM0pKSXBPdGZPSno2WDhkczlwV0RwSWVPTkUzMGRLNFgwNUFaQgppZi9wR3NLQ3lZdyt4L3ZLVG5EMmJXYTloREZtUk5HQnhGdFI1UnJmRHNRK3RWVWRzUlp2cXZNcm5lWFV3Q3hGCkpiR0tWdFFSenFFMEZEdW5yVU5yMHlmQWVOY1RzTmxoS3J2TDlQUnROQ2pZL0h4VlVldXdNMVpVUXJrcnVIRlgKWG9OWjl5VFZKY1dxYTVBMnp5Rm0rYUZhSTA1cWlaSnZzSTA0Z1FJREFRQUJBb0lCQUJCWE9IVVArU3BQMC82ZgpLS0h6QkpGQXptaDZicWhnK1ZZaHNmSWZyNE0wdm5paEwvOUp4SjRKZE40aCtLczFBaGRjMkNKMFh5UTYrTzdlClY0M2pZeTMxc2YwV3hVd3gyK2NORHZxVnNtSXprdElXUlFsdlBWWUUxZ3VyVmRLZVlzU29BeWM0blBuaHlRYkcKOWx3Sk1MM2twODFUVmx5WUxWS1ZEL3RIcG01WkYzM2VnSWVMMEYwSlgrM3padm11VW45bkh6aVlmSEE1c0hBUAo1amZjZmFnSHR0aTJuSkNpem9TeFdzdDhlTUlrUE5jRkF2alFPVTJwY0pkYjBsd0hoVDZ5YmF6R2M2YzdvWnlvCjBCa1ZnMTBrejkzM0g1a1lyeG1QNTZWUUdsMWVYbWsreDNzM2E2SW5JMDBmRGVpUGdrTm1qRmFYZEdqckNBczEKODhQZVMrRUNnWUVBd2JBclBURGpqNGdtN0U5TUt1L3lYMENKcGg2dFo4ME54YmdTdU9ocjdSSTROZGRuaDc0NApuU092UWlLZmNyK0ZlSjE1ZWo1UHZoZnZVd1NJbWR2UEhzK1BNbkFUUWErNFVIK3pEd28yazBiZTJmalpMbkx6CnZIVy83M095MFk4SS9KOWpjMUszTUVPMVd6K0l0bndxTDQxTWdWbU9XTWJpbEZoQTk2a2cyMDhDZ1lFQThMaisKUTlMVGp5eDYrdEV1R1lzdUorNThjaHJYRWNRYmxsOXpvSGVCeWFJODYxL2dKRjB3dlliS2R5bEY5Q1BSbWYyeQp0TFVXZVJnYzVjT2lkRU1qcjBHdUhOeDA5SnlScWhvT2JlaU1WNUFmZFNneTNRZjBOb3EyVXM2Z1k5QTNnZ0tKCmdXUDNEY1M2MGRWcXkrWENOR2pPU21pSGpnN0dXa1pOcnFINmV5OENnWUF6eHBNWWJXdzNYeThBZG9ZbTZET0QKTU81YTROSjc3LzJoZi81SlBhQTBKRzJ3UHQrbkVydHhqaXQ0WTJiNk5xWklRdGhKVEVUbXpPRWw4UTFQQzhwSApNemJWUmM1di9iZ29sS3BaOStIMDVyb0Z6SmJKNnVLcTIxTXVnR0FwMHJHVlRrbzRkc0VQZnRvSkJXZlhXRU95CnFIUHVFL0dRVzhJUDQ3T2lRS3pPMHdLQmdRQ1RvT0JPdC8wRzBVQ2FrYTZ6KzZkUzFlOThDdm5hNjJuL3pvb2EKM3krNWVNWGprK2ppWkVSLzl5b3o2aHY4bmZydGRha2pLZXVlV0N0Z3ZabmpzMGt2TWhpVm1wNGZaZVh2YkF0dApYREMxZ3EzSUs5OEZydHNXbC9zNHpYK1B0eUpUbVRxN0g1Tmoza0swYlM0UjNkWThUZ28xbCtXS09ZVnIxN0hNClo0bzJBUUtCZ0RBMDVmOUtHUFEzQXR1bDVkQmMxV1ZCNElZcjkzVTVEeE9Bc2pGTm1MRXJYbmxKZ1JEV3UrcDgKOHJpaktvMjJOTGd2VEd4ZkRVeERXMm5hYkNSRmVCM05kQ0JxdDZhVmp5WUJpbkVkV1Z3V3o4MFIxbG9LS04zRgo1RzQzd0s1eVZpbmcxd0o4NnNJSjhNZVVTdEFWb3ZVS2krL3Nqdmt4K2VQcVJjZ2VyTURtCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU90SjdKZ29tYjBuRGZQdStLRjdaaHd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3T0ZvWERUSTJNVEV3TmpJdwpNall3T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUE4dThxMi9MZDZldVdmdXJGMzRMUmZZVktWc2FldlNkWmpXZFh5bGlOWEpyTTRObVEKRjUzOUxGWjhIeUczQjF6RDJzbW5kdnhnbHovQlJHVXhOekJyYkNDZFVHYjh0OG1YcUhHTmJOc2JsQzUxVkFregpUWXlWRVcvRVFDemllN1FnQ1JyVWhPc1hXSU1IRko4UjBMVVc5dyszRzJ0TVZKbHJHYmpjTHYrVURqSFBiZ1NLCi9xbWx4cmpRTmswNUV3cjR0dEpOZ2xFMmR1WWhKZG5RYloxTmdUS1dCMDJBQzNEMWpHL21SeDFuS2hxU01BbDkKeVRXWFgweU54bWxoZ2Zsd0QzaWlYaFEwYmpNVnFjMWphZGs3U2pvTm1qQ2RRa2syVU9mUU1Bb3VMMWJ3RTNRcQpCWTBkRWQ4c045ZnNqdFdrZjdaL1dzakFiTnFKZEpEOHJ0MkJEUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQjlmV2VZblJ4VlViTnZSTlpKYi9kWEVXaVZNTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRRHVNZTh3MjN5blU3Q1FuY2tJK3YxZEpkYU5BSW1TVWc4MXFFN05ZeWxZK1BiU2QyaWxveHNoCmFaVlZodGlIOGRVZU9odjBBMjVTR29rZFh2cUU3WnlpK2t3RmY3UkxmMkJNaHBwY2NFNDJGcXZjR0lqWTM3emUKODVvM3ZZOVNNMVNVOWVKY2ZXZ0FoNDBtSFJ5VUQwUjhNcDBzMk5vWVgzWExNNlBDei85bFJHYUFZNjFMWGhjMwpzUHdaUjJpTys0bXNjNHdTYUZpQ0ZXWm1CSldyOVNrVEM4UTdSdXlsWUxPY2xhS2dLeGd4OVZZY2pqV1IwbXpNCmFCdzkvTGdZV3JKaFEvS25TcVF0YnRTTGhHN01oRDN5MldsWHhhQTc4Qmo2TGZZeWgrVUpuN0VTVEVlLzJjd2MKSzI5TjMzd3pBM0l3TENTUXpWbjVxdWFRV1YwWFNvWUUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRZDMrQnZhVFJLcEZSUVQ0S1BYazF6REFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qQXlOakE0V2hjTk1qWXhNVEEyTWpBeQpOakE0V2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBMitidlU2NUpRZjcvOW1XWUNPYVkKZm9ENS8zMmVZNkcyYVdsc25HOXArOGk0Y0pPZUd2NDB2SG4waE14TVhzemxvc2NKQmsxVXBOU0ZZeUlPanE5egpGdWNqVWxLcUIxV2VtWnRJNHlGOW8wbW1GLzJlRjRzaXBLWktxR3RScWROYjRjc2JvSUc0em9oYXpvQWgyRnVqCnNaWXJrSStjaTc2bzJ6eUlKdVNlUXdYWjgyeGx5WVJvb1BMT3M2ZkczQU1LaldtN1ZqNW9Pd3RBOWwxdXA4OGoKeE00Y3lYQjJWMVdLQXFjTnRBS1JRaFF5WWl5L0VYOUlueCtOQ2R3emt2RFBTamZxV3dreFVET2x4YUdINGZyZgpFUTJWVFEwc1ppYXpXdjVBalhGblF5MWNYbm5BNUJxSjN1ZDdxdTBvVmhpcEF0TTdFMWR3M2xkc2ttY0pUNnBwCmh3SURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JRZlgxbm1KMGNWVkd6YgowVFdTVy8zVnhGb2xUREI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUURDdjhjY2NRQVZmdHpKd055Y0FtSkgrMkdiUFBKY0ZrUjhSSEluYlpjRGs1UWZMa0RuCjNObjVJakJRYzhrWmVjbzVGaGo2blIyVURSVGxpc2NiNjVkdU1nYnRuR2RhVERWeFd5aVlpemVrVTA1cUhEMmMKTE9oN0pWUmxJL0IySDZoZTc2c3prV3ZrWWxNeEozRHJrdEpyZDNqRkp5ZXgyZ3FkK0lnZlczUlEzTGRKSU1KbwoyZDlva3RZUit3ZkREN3orZitBQ2ZlYkZIdGd2QnJhaEEyNEJpMXVxSUpHTHpwSDJyV0FIMGNrdVl2NFJuU3VHClZVVStPQlh6YVAwSFZKcFhkbHBIaDFVbGZjcEp4b214cEE3ZW5tRis3QkQzOFVaa0ZUYTlFSDFiVGNRWmxoMDAKd21CRm1QVFlRbkh6OXRGN3NXRWdoKzhOamIwSlA2eXNaMlhOCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMitidlU2NUpRZjcvOW1XWUNPYVlmb0Q1LzMyZVk2RzJhV2xzbkc5cCs4aTRjSk9lCkd2NDB2SG4waE14TVhzemxvc2NKQmsxVXBOU0ZZeUlPanE5ekZ1Y2pVbEtxQjFXZW1adEk0eUY5bzBtbUYvMmUKRjRzaXBLWktxR3RScWROYjRjc2JvSUc0em9oYXpvQWgyRnVqc1pZcmtJK2NpNzZvMnp5SUp1U2VRd1haODJ4bAp5WVJvb1BMT3M2ZkczQU1LaldtN1ZqNW9Pd3RBOWwxdXA4OGp4TTRjeVhCMlYxV0tBcWNOdEFLUlFoUXlZaXkvCkVYOUlueCtOQ2R3emt2RFBTamZxV3dreFVET2x4YUdINGZyZkVRMlZUUTBzWmlheld2NUFqWEZuUXkxY1hubkEKNUJxSjN1ZDdxdTBvVmhpcEF0TTdFMWR3M2xkc2ttY0pUNnBwaHdJREFRQUJBb0lCQVFDK3NtQy9IN2dWekU0cQpYZVhmYWlHNktwMGg2OHpzTjdPWmJEd3MyUTErdEkwRnkyM2ptS2tnL1YySHdDZEdXc2VWUnFkVDJNSGJneFQ5ClorNVozRnFnOU9hVG9HNGttQ0pHc1B3ZlE4N1JTTEFKdy8xU0MyMktmVTduQ05JenhMKzhha2RXQk1qQUNrMDkKSUs2NUVwYzlESzVRMmNsM0Ftc3FYQzd5RTNZUFJhckYxNENLaXJUZi9hWGFsWmJaNGRuN1RFR0FSQVpZRmJ6NwplcHBsNGFVVkZRL3M1MUZDdXQzVkhWeExCU3RnT0lQSmVyd2VaMWtSaVNna0EyZ2hPaTFHVFpsbmdMU21KMUpnCkNBR2xFWHFzMklCSVBUekkyZTQvUkxCMWZaVzB6WlVpTlo4aHB3WlVNQm9MdjMyOUtsY1EvMStKVE90elRGVmEKaS9YbTRLTXBBb0dCQU9JNDJPWldRTzYyS2NLdFlxaTZqb1gxZk9LanliN3ZvV1hJR3FQTDFqaWtVamVxUjVUUgplVnR5ZWNuYjZZaWZoaEtUNWJDSjJMMzN2OGUxQ2VubmhxTE1IUTF0U3dkdEFWcE9yUGJLMjVucDFYOTRhNkcvCkY5dTg1MEVrRHdRTVRobjJYN0xrZXJqVWxqelo0dHFETlJPQmdZSFB1eWlXc0EzdTVHc2xHTXlsQW9HQkFQaloKSHBNampvRXJyYUVWZVpWUjljdXA0aDBEYTU1QTlWY0Q4RzhldGErQjdwckxXcEJqazRwK2ZMQ1EwNkhjT2M5MApzMEUrblJ0eTlzOW5COFhOMzBsZVNVY2xwcmpQSElKTjhOb2hGZHRtdm9QSHdDSzBHOHZxQlc2Q0M3MVMyUWpaCm5DSEd0dlMwbEFTV3FqeGwwR0Z1dHNjdkt0YnFnZndKa2ZDYlpLbTdBb0dBVlRtNWJUMTloUEVYMW9IZnMxVmwKTUU2RjJCU0FndkJnUzZvUmJ6Zng0ckQxVUlkVUpGcXViNmMyL3JkY3lkM2Zjc3hKTWpNY2RxVUptVUU1Rk9mbQpyeHBhcjU1SEwrci9JWGlXYlB1THMvYUdPbG14b3VRTkp2bUozZDZwMFlxWk9lcTVydm1veWswOHRId1puTnpsCmVBM0lMcEdHSHdwMkZTbTA0REMvb1FrQ2dZRUF4Ui9oSzNlUUxGeTRSeEZtNWRVdUcyNXdzc0VCNERQZTVWWTIKZ1IvWGxyY2JsejJkZVNHWVA2NWhBZEZJQkVFYS9tNllqUWVYbHFYa1EzbC9XNzd3c1FMaWsxeU5ESHJzUDRDVQpXWWE1OUxvWUV2WUtDck9ZRFZsTmdqTzhMdlpRL01TOC9MaVlONUpRYXE0Ykhvc2NuZ0lCQWhvb0dtVmNJSlpJCktFeEFXbjhDZ1lFQTFFa2VuL0R6c3RXeGkva001Rko0eHU0T1hrbjcyYVI5Vkk3UGdaMnl2bEpjdkVoOXZWVlcKeFA2bnR1WUhodzBqQmVqK1IvbGxTeFE3eXlnNU8vUWxZMThTYkQ0UmxuQ1dPRXIvOXVkY1UvMWRJSTdSdFBTeQpGSWJYTkFmMVR1SUdhZVBoVFJ4T3BrU29VRjNkbW5CT3FvNG42WXdrZTdtZEdJeWVnN3JmRW1BPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU90SjdKZ29tYjBuRGZQdStLRjdaaHd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3T0ZvWERUSTJNVEV3TmpJdwpNall3T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUE4dThxMi9MZDZldVdmdXJGMzRMUmZZVktWc2FldlNkWmpXZFh5bGlOWEpyTTRObVEKRjUzOUxGWjhIeUczQjF6RDJzbW5kdnhnbHovQlJHVXhOekJyYkNDZFVHYjh0OG1YcUhHTmJOc2JsQzUxVkFregpUWXlWRVcvRVFDemllN1FnQ1JyVWhPc1hXSU1IRko4UjBMVVc5dyszRzJ0TVZKbHJHYmpjTHYrVURqSFBiZ1NLCi9xbWx4cmpRTmswNUV3cjR0dEpOZ2xFMmR1WWhKZG5RYloxTmdUS1dCMDJBQzNEMWpHL21SeDFuS2hxU01BbDkKeVRXWFgweU54bWxoZ2Zsd0QzaWlYaFEwYmpNVnFjMWphZGs3U2pvTm1qQ2RRa2syVU9mUU1Bb3VMMWJ3RTNRcQpCWTBkRWQ4c045ZnNqdFdrZjdaL1dzakFiTnFKZEpEOHJ0MkJEUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQjlmV2VZblJ4VlViTnZSTlpKYi9kWEVXaVZNTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRRHVNZTh3MjN5blU3Q1FuY2tJK3YxZEpkYU5BSW1TVWc4MXFFN05ZeWxZK1BiU2QyaWxveHNoCmFaVlZodGlIOGRVZU9odjBBMjVTR29rZFh2cUU3WnlpK2t3RmY3UkxmMkJNaHBwY2NFNDJGcXZjR0lqWTM3emUKODVvM3ZZOVNNMVNVOWVKY2ZXZ0FoNDBtSFJ5VUQwUjhNcDBzMk5vWVgzWExNNlBDei85bFJHYUFZNjFMWGhjMwpzUHdaUjJpTys0bXNjNHdTYUZpQ0ZXWm1CSldyOVNrVEM4UTdSdXlsWUxPY2xhS2dLeGd4OVZZY2pqV1IwbXpNCmFCdzkvTGdZV3JKaFEvS25TcVF0YnRTTGhHN01oRDN5MldsWHhhQTc4Qmo2TGZZeWgrVUpuN0VTVEVlLzJjd2MKSzI5TjMzd3pBM0l3TENTUXpWbjVxdWFRV1YwWFNvWUUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQUxwUlZxN3E4OElWK0pzakJHc21OUjh3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3T0ZvWERUSTJNVEV3TmpJdwpNall3T0Zvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXNSQXpkdFZtanhQWUZucVJrdEdkUmx6aDdNc2YKeVBWZ2Q3UklGalN3WVdNWDZlNmVseEcxeTFPMjRrbHZMb29TVkthdDcvUnA4QkxnaWtpY0J6dHRDR2ZtUnFOLwpnQ1NQVzFTVE5FSytoTm1peTVpNE5GYVVEamk3cWpaYWczd0pkSGRadjgxeGE4M3B6a3Y3SFJjQVB5OXJxcVdKCmZEcHNtNDQzOTNBdzRDNzFOVWNxYTA1T3Y5cjZBN2thWjc1bmR2SURxaGU2SmtFSFBoWk5WYU1aTWFPSlRrOTAKbHQreVM0L21iMDlmcXRDMVFodWZKSWxLZEJhZENXV3pvTVhRSXN5Y0tGeGFZQ0NwK3VDNkZqZlVjSnNwMThmWgpZNSs0RCtVc0ZYRG1NRzg4NDl4dVFRVkhMYlFDTENoUHh5M0c0dkhFeld2bVp5VnRwWERGbHl1SE53SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUWZYMW5tSjBjVlZHemIwVFdTVy8zVgp4Rm9sVERBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBQlJsYnM1Tk8xb3Q0b3hnTVVjWVQrNVZ5OXZ5L0E5VmdQbTlQcEEwbG16VGN4WVYKSXVnd2dEbll0bTdVU1l3TmFYbnBiS25rOTZldHlDZExwbk84QjBrUWpsbXJrSEM5RnVnNGYzYWo1aU9wRlMvcgpoN0pVMjlhZjI3Y3J3V0lrOHBkT21PenE1eXQ5UFBwVHpTeEVtWUlPMHAyOEIyV1dtdFVEOTlpdm11T1RpVFlXCnMyTnBSNTBWZkRhSGlneFE4VWVrQnVSbGY2aDU5d09CcUVnZDMrZE9qdG9BbExic25hNTdoc25hRGtPTS9JRGMKL09FdnFoTnM4NUpDQVJUUzZzK2NCS0FVUnE1QktqblFZblZMZnZBYkgrNCtxSEljTE93c3IveGZDMWNLeFozZQpzL21xakVqeGlETkh5OHA5RFZITzJhTzUxdGs1VUZtNGdaOXIyWmM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc1JBemR0Vm1qeFBZRm5xUmt0R2RSbHpoN01zZnlQVmdkN1JJRmpTd1lXTVg2ZTZlCmx4RzF5MU8yNGtsdkxvb1NWS2F0Ny9ScDhCTGdpa2ljQnp0dENHZm1ScU4vZ0NTUFcxU1RORUsraE5taXk1aTQKTkZhVURqaTdxalphZzN3SmRIZFp2ODF4YTgzcHprdjdIUmNBUHk5cnFxV0pmRHBzbTQ0MzkzQXc0QzcxTlVjcQphMDVPdjlyNkE3a2FaNzVuZHZJRHFoZTZKa0VIUGhaTlZhTVpNYU9KVGs5MGx0K3lTNC9tYjA5ZnF0QzFRaHVmCkpJbEtkQmFkQ1dXem9NWFFJc3ljS0Z4YVlDQ3ArdUM2RmpmVWNKc3AxOGZaWTUrNEQrVXNGWERtTUc4ODQ5eHUKUVFWSExiUUNMQ2hQeHkzRzR2SEV6V3ZtWnlWdHBYREZseXVITndJREFRQUJBb0lCQUg4RytYVHlpajV4WlNCVApWS2E1SFJVQ3c4Nm10eW5yNkFaWTN6S1hJRWJ0MlpVcGJMdENxR0t6cjB2T2xTWVZSaXRXM1FoK0Y1WjFaSU93CnJjZCtlYTJESkxCZTBiVDBCYWpuRnloeURjNnZlRnlLTnZUTmZEQnJ3UzdQQ2NhMHNPL09SQ1FYVnB5WndIZ1IKQ0ptSkM5Tkl5UHhIQUVpUWZhUm50bjBkRHVOMWUwMXVVeVFVSUozWXlZSmQ1Y1RhalBiak42a1crUUZrWXJ5awpRcFlFQU8xSzcrc0RYSkpVa0hJb1QwcGRkSW5Qc1d0ODd2Z29CWUlxcXFDZ3VTaC9kc0p2ZzkwUjZQV2dKS2pQCjJuYm9rZ3V6VHVaZ24zMStKbUwwS0lqRlEwcDRkbDM0UmpCbzAxRzk3UkxyMkRuNnRVd2lTYm1BaTc0MnA0aW8KNXJpR0Fma0NnWUVBMFlacmw1SnVXOTlkRTdwZWdnK29md0JGOEoxT1JVc0wvby9SQU1GZjd0RXM1OHZZQk5qWApUdUFtbDNpRERzdTdRWWpCdVcvMTdLWXJ3T1NWS2JsT0RIeXBHQXFRS3pZMGRYdlhlY0I0MnZDNVFsdzFCRmsxCmhyazJTMm05TzliQ1RlZVVnL1lDU0JOZmxNbFBwMmxqU1doZEpxL01WbWF2WWhjc3Y3ZU9IdDBDZ1lFQTJGWjgKQzljV1llaUJJRnhBTG5MaUlsTFB2REUwT3Eva0xzdGlYNU1mQmVPckhqVWw5N1puWC9LQkxScTRGcjhPVlpvcApSRllRYmtZamRjME81N0M0MXU0QThKR25kQVFxNkFIam9EOUF6LzljUzZYT2E5VzZJUXFveUQxM2VsUUpPQkJSCjQ2aFFlOFV1bThLNWxVdEhaS3hKNmt1c25NbWZ2TmFGbFFtc0d5TUNnWUVBdzIrSXFFY1QzV3BKWFg5M2JBWEMKKzBONytXWWhmZ3owVVN4QW5WM0NaL2FBMW0yVFAySXI0d3k5c29mY1owNnRpZ0ZRQWZKbkI2Z3dJNnFUWCtuUwozVjdpTXVTWGVWY0VNNW1pY1pTUXBsZm4xZmhBRTZCS2h6SDNiUHhpWUpCL2lUODdqcU5IbVlkSW5uWHdjSTJpCjZQUUovMjMzUVpoaWV6SjJzUlU3NFprQ2dZQnZILzJZRjJQbjV3WnRHUFhlNWlSQ2ZVYzM1QTV3RnVtZkg5bm8KUGlveFhFRUp3ME05ZXZTZTFIS0dPTE5XKzh6aEs4OEd5eTZsZG1IQW9SU0c3c0FEcHozVVZQMHZHdlR2T0FrMAp4MGtEanFoYU0xRlZFdlFKQlBDdDZ1VDBjVFpMRmhiNldmcjltTXZZTnE0ZGdnMnFLTlhQQkJBbWVXc1VGUjJJCjhPNzNBUUtCZ0NTcDhyOG81cGxXUEpXME9TRWYrdDA5eFcrR0RTTzkySnNBZzJ4V3FVYytJRDBYODRUTW8wVTkKRlM5VU9BNWtOR1BUZEZGRjV5bGJ1dnV4RDlFL0NsSkVMZjlxU1ZGaVNGbkF2MnNLR2Z6dGQ5Y294c1Q0ejk4MwpxTlNlTmhOMWVQUnB3SHBqSlFuRVllSS85cFViVFJOMmZqU0NnSVNjbWQ5dDc0NnZheUppCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQU90SjdKZ29tYjBuRGZQdStLRjdaaHd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3T0ZvWERUSTJNVEV3TmpJdwpNall3T0Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUE4dThxMi9MZDZldVdmdXJGMzRMUmZZVktWc2FldlNkWmpXZFh5bGlOWEpyTTRObVEKRjUzOUxGWjhIeUczQjF6RDJzbW5kdnhnbHovQlJHVXhOekJyYkNDZFVHYjh0OG1YcUhHTmJOc2JsQzUxVkFregpUWXlWRVcvRVFDemllN1FnQ1JyVWhPc1hXSU1IRko4UjBMVVc5dyszRzJ0TVZKbHJHYmpjTHYrVURqSFBiZ1NLCi9xbWx4cmpRTmswNUV3cjR0dEpOZ2xFMmR1WWhKZG5RYloxTmdUS1dCMDJBQzNEMWpHL21SeDFuS2hxU01BbDkKeVRXWFgweU54bWxoZ2Zsd0QzaWlYaFEwYmpNVnFjMWphZGs3U2pvTm1qQ2RRa2syVU9mUU1Bb3VMMWJ3RTNRcQpCWTBkRWQ4c045ZnNqdFdrZjdaL1dzakFiTnFKZEpEOHJ0MkJEUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQjlmV2VZblJ4VlViTnZSTlpKYi9kWEVXaVZNTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRRHVNZTh3MjN5blU3Q1FuY2tJK3YxZEpkYU5BSW1TVWc4MXFFN05ZeWxZK1BiU2QyaWxveHNoCmFaVlZodGlIOGRVZU9odjBBMjVTR29rZFh2cUU3WnlpK2t3RmY3UkxmMkJNaHBwY2NFNDJGcXZjR0lqWTM3emUKODVvM3ZZOVNNMVNVOWVKY2ZXZ0FoNDBtSFJ5VUQwUjhNcDBzMk5vWVgzWExNNlBDei85bFJHYUFZNjFMWGhjMwpzUHdaUjJpTys0bXNjNHdTYUZpQ0ZXWm1CSldyOVNrVEM4UTdSdXlsWUxPY2xhS2dLeGd4OVZZY2pqV1IwbXpNCmFCdzkvTGdZV3JKaFEvS25TcVF0YnRTTGhHN01oRDN5MldsWHhhQTc4Qmo2TGZZeWgrVUpuN0VTVEVlLzJjd2MKSzI5TjMzd3pBM0l3TENTUXpWbjVxdWFRV1YwWFNvWUUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQVA4ejdUaTdITWkrazFLTi9pUzM3YW93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXdNall3T0ZvWERUSTJNVEV3TmpJdwpNall3T0Zvd0pURWpNQ0VHQTFVRUF3d2FLaTVqTVM1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREZiSDJ5OEpLaDFHRjNmSDZNeVI2Ry9aa3oKM3M3NHZWc2VoOXNZNDZrTVU4UjhWaGVZTy91TlFaSTM5aHNBRDVna1ZldXJMNVR0NTRiOWpFRTdxQVlCMnV5TgppUktWWVNxRHhjenJpaDJWMzNyMEw3bkNLM0xSTm15emlHZ3NiQUtQaXJDaG5VRnlVMzVGaFRHVDNPcUdnMEd4CmVseVVTL1diN25IMlQ4OU9UMk9IK0tBNXAvenFRQ2RXQUlvZ3h5Wnl2MlBlVFBjcG1hWVVMRUhOT0FpYm0zV1YKSWQ2Z2l4UFVUcG1kRkxOenNNZW9WaFNsbENWakdyOHByYTFSYlRBTzFKdEhQQWR5M1FHbWh1anlVVkQ2aWd0QQpUZGVTdXNQcG9abkx4amVXNFRkT2NjMDhOOUpQVGYzenNnalF3SzhlUzlYMFJocWRLbjl5azBYVFFtalJBZ01CCkFBR2pnWWd3Z1lVd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGQjlmV2VZblJ4VlViTnZSTlpKYgovZFhFV2lWTU1DVUdBMVVkRVFRZU1CeUNHaW91WXpFdWFIVmlZbXhsTFdkeWNHTXVZMmxzYVhWdExtbHZNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFDUEVnQ2s4b2JNQ1FjOS9QWGtPMEltelNwMnZNOEFVRFMrR3R3YzllRlgKQWQ2NkphNTZybktJQWw4bHlUMVRibFg4L3FyOW41Vkk2T0phamY3VHhTaUxwSFoxZ1ZxMnhYUnRxb2F1U3RSUApUck11NE9OeDE4U3IvdUc1RkY1bk9Zeks4RHA1NU5USkJOelNQTnA3WGtWM2NVV1NSZ2N6a3VwNTFuaGZrUTVrCjVQMUE1SjZ5d2hxOGtueDd5ZDFGSGxjaWhpMVpxalBxY3JRMWN1cHRBV3B3Qk1mRjZSUnlJekpIR2krL3RmdlgKMFpLV1JReVdpdDNDSjBVdFA0bGd6MEl4cUsvcTRSVVpXQlFOcUhRWUZNZWJoNjNoUkFLSzlTbjFiRzdiZit3ZwpmazNLKzRlaS9KbEJHSVBDRTR2OWdRM3V6NjZvelZYcWZiUTlFN3EvZ2ZNagotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeFd4OXN2Q1NvZFJoZDN4K2pNa2VodjJaTTk3TytMMWJIb2ZiR09PcERGUEVmRllYCm1EdjdqVUdTTi9ZYkFBK1lKRlhycXkrVTdlZUcvWXhCTzZnR0FkcnNqWWtTbFdFcWc4WE02NG9kbGQ5NjlDKzUKd2l0eTBUWnNzNGhvTEd3Q2o0cXdvWjFCY2xOK1JZVXhrOXpxaG9OQnNYcGNsRXYxbSs1eDlrL1BUazlqaC9pZwpPYWY4NmtBblZnQ0tJTWNtY3I5ajNrejNLWm1tRkN4QnpUZ0ltNXQxbFNIZW9Jc1QxRTZablJTemM3REhxRllVCnBaUWxZeHEvS2EydFVXMHdEdFNiUnp3SGN0MEJwb2JvOGxGUStvb0xRRTNYa3JyRDZhR1p5OFkzbHVFM1RuSE4KUERmU1QwMzk4N0lJME1DdkhrdlY5RVlhblNwL2NwTkYwMEpvMFFJREFRQUJBb0lCQVFDRHdhWWFPQWdFVE5OSApoU1NJSE9sc3VlNzIrU28wUTF0K2dyaXNZYk8rY0dGZmdhMTVnZjZlQlRicWRpc0szVjF5VW8xWDBBZWF4cndHCmx3WXFKRGJ1SWdkaFppdXEyaEFmcFhEZmVXdkpURDZvblBsaUp0RVg0elNrbE5MQllzeEt0QXF4c1Z1dVN4Nm8Ka3YzRmF0aHlNVU0waVM4a0laV25IWG1kSXlKOVpiMngzU2ZNTUVxMDZWWWJzMURvTHU2Z2ZPV1lwV1UzMHRtYgorWlAveHJjdWJKMklNZUt4ck1KYXN3bkpzWkRlWWhFcGY2bXR0ZGtoWEl2MnJHMERrOFZsVjlIbVBVZG0vQXNpCnNNUzJOejd0YXczaDlhL1k3WldSNzNoYW1mWFF3VktjdG9GRWFDRHV2bHYxVFNlZWVGWFovdElVRURPOHlxV24KbmVkZjdMSkpBb0dCQU5QT2RtbElpaWNnUVZUWTdEVm81QU1MeFlweTF4MlAvTVF3aC9YaFoxUU9ZOG4rWWZRcwpQUzNTQUYxbHFxdk8wbldjakxnVGlBR21VbW9wUnMyNkR5TndZUHQyVHdyZUwya0x0ZXd4VWZMMFp6dFBZeEJ6Cnh6Z1ZTank4dldtQ3JTcnJ3ejBPUi9ENmZVZ3UwcFh3dXJwWHBXdWcvR0NwbWRCSUhVZXZYVEFEQW9HQkFPNmQKeUtEcnRUTjNOYmU3OGNKbE9FNlEzL0Y2ZVRMZ0JrQ0VLUDhvRXV2QU10WCt4ZkJ6VFA4M0lIOHJ2endyWUp5WAp3MDE4SytxcHpCVDVWRUE1aitOV090UzBLekhkZ1RxNndFWkpJSzBTTjMxQlZCOHhtam5hekFORjFDTVBqNkR2CmJkb29EV3NoU2hBUFZ5Qk5mS3BleWpaSlpReXNJZXMzYVJBOUloMmJBb0dCQUovZE1HQ013TUdCUmU0OWdDTmIKMU9VN3FGQzBGd3NZRjRjWXZqWG1lQy9vWUljZ09seXFXMDdQTnpsSE9BZFBKbWhnelpGT0pKUmlMY2cwK1Z6agp0dk5mcWNPQ2EyeGZnTmMvWUlNeVFwRW15UmZwOW5KL2dIa2pFSkpCUHBGNWNTeDVJRFpnSmdxTGRhM2FzVlU4CmlpT0ZiYlNMb0pGdzBVaDBkYTBhZmpKekFvR0FBbHNPYXdCSXRxeGJuR2UvbUVLMWpwa0JqUG0vanBBRm44ZHUKUEM2aUdTKzVrTUZHSlB5T2F3cVpTSWdmQ0RJSmJ5SlViRVJvanBXRWpVUjAzM2x5QVRXTnVTSGFOMURQZ012dApNQVJ5elNLYjU2R29lZkpjYW12TmpjNjNyR3p2NXcvV0RzeE1iWjFUaE5zUjZpQzV0VmpnT0M3N1QyZTNvZ0hYCkNMRUIwRGNDZ1lFQXJqd0x2clM4UFd4alVnSVAweTg2QUdpNCtoOVluRkVrcTh2dHY4VU9CU21FajU0QXpxZUcKbGNPc0xNdHYvMUtZL051cHlVSjFrQ2VVVlhid2FDV2crSFBmT2JhTXdOdDU3VkNhT1pDWmlETzJtaHBJK29PcQoxWmFNSFU3cWpTNC95bDlmMWN0dVNEaDk1aXNnRkFGZ2R4ZWRmZHN1VDdEa1E2Q3NIaUxoc1dnPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c1
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "11"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-wireguard: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.1.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "false"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c1
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.2@sha256:52f70250dea22e506959439a7c4ea31b10fe8375db62f5c27ab746e3a2af866d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          rm -rf /var/run/etcd/*;
          /usr/local/bin/etcd --data-dir=/var/run/etcd --name=clustermesh-apiserver --listen-client-urls=http://127.0.0.1:2379 --advertise-client-urls=http://127.0.0.1:2379 --initial-cluster-token=clustermesh-apiserver --initial-cluster-state=new --auto-compaction-retention=1 &

          # The following key needs to be created before that the cilium agents
          # have the possibility of connecting to etcd.
          etcdctl put cilium/.has-cluster-config true

          etcdctl user add root --no-password;
          etcdctl user grant-role root root;
          etcdctl user add admin-c1 --no-password;
          etcdctl user grant-role admin-c1 root;
          etcdctl user add externalworkload --no-password;
          etcdctl role add externalworkload;
          etcdctl role grant-permission externalworkload --from-key read '';
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/state/noderegister/v1/;
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/.initlock/;
          etcdctl user grant-role externalworkload externalworkload;
          etcdctl user add remote --no-password;
          etcdctl role add remote;
          etcdctl role grant-permission remote --from-key read '';
          etcdctl user grant-role remote remote;
          etcdctl auth enable;
          exit
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=clustermesh-apiserver
        - --auto-compaction-retention=1
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.14.2@sha256:0650beac6633a483261640b6539c9609f5a761f4ab4504fd1e6ffe7f2bb82e9a"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.2@sha256:a89030b31f333e8fb1c10d2473250399a1a537c27d022cd8becc1a65d1bef1d6"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
