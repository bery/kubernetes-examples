---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpsdmNzNlE4QXVIaENtanV1SjZBWm93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl5T1ZvWERUSTJNVEV3TmpJeQpNakl5T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFwYlg0eFBOL1E0Z3Y5RFYvRjZaNTg1Z2dhdmk1bkk4dUN3eVBPY3U0OXY3Vm52UVoKMGs2Zmt2ZWVOTWZ6c3JzR3QzVDVIV2plYy9aSjZxUEFmc1oxVytBNS9NT2tLWWZJSGdUSDJYdjdFWk83b2tMNwpoVWpPQ1hjcG5OdExULzVOYXpoait6N1lzRWQ1Zm1iK29hRTNuMlhjTnpsOFc3MEtaUXpobjJzMDlmSXFNUGRTCkhuQmp0UDF5N1c2cXlyRWx0Ukl4S3AwN0JYZW9QUTFCbERLWUhFSCtGLzFYNFNRLzNxZGZjdXliT3ExTE4ybWwKSWpHUktCL0NDejZPbU9DdEJ2Skl5SWgzU2Z5ajJuMlhQYkdwZTZVRkpveWRsNTE1ZUJjMzBLVGNKUDBkeVN6RgpSc0xqYkl1cUNvL2JXQ2hER3REa2k2SGtXaG95MlpYOENMLzFwUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQmhpS3JKL1lEWnZzT1VxekQ0YjBJalVUanFRTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQlgvUkZtdzhKbitiNTZHQmhyVStrL2IyZUFKODg1eE4zR3cwUEVuY21zeTBlbUJ6VTRQR204CnBsdXovRCtkT1huVXI0VmlFUVlmRnBZeFEzbnVIRWRIc2htbzdVaSt3Rktaa3RWWnRablRwQlpUUEhqazd0OSsKWVBmczA0cFVMRjhFUUdEaW9HK2V5WXBaR2IwdW03dndZN1ArSmFsdldHYS9xVTVBL1dpWUFxMG44Q1plOEFpcQpkUm8rc1huREprNU5FTWp3TE9sMUtwWW8xQWM3RmtCKzRQcWRVR0l6QXJlaEVPV2FQOWIyUnZEb3d1cmFpdjNZCmlqcEFnMk9ES1VjZVFpNWF2KzF4UnN1VHBzVDV1dHhKQ1hvT0l1YzVYVVpsWEM5bXhRajM1SGFlbVRrTGZaRTYKL1g2VGFoS1JFd2lpVzU5blpRTlk2NWE0Q2E5NUl4MUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcGJYNHhQTi9RNGd2OURWL0Y2WjU4NWdnYXZpNW5JOHVDd3lQT2N1NDl2N1ZudlFaCjBrNmZrdmVlTk1menNyc0d0M1Q1SFdqZWMvWko2cVBBZnNaMVcrQTUvTU9rS1lmSUhnVEgyWHY3RVpPN29rTDcKaFVqT0NYY3BuTnRMVC81TmF6aGorejdZc0VkNWZtYitvYUUzbjJYY056bDhXNzBLWlF6aG4yczA5ZklxTVBkUwpIbkJqdFAxeTdXNnF5ckVsdFJJeEtwMDdCWGVvUFExQmxES1lIRUgrRi8xWDRTUS8zcWRmY3V5Yk9xMUxOMm1sCklqR1JLQi9DQ3o2T21PQ3RCdkpJeUloM1NmeWoybjJYUGJHcGU2VUZKb3lkbDUxNWVCYzMwS1RjSlAwZHlTekYKUnNMamJJdXFDby9iV0NoREd0RGtpNkhrV2hveTJaWDhDTC8xcFFJREFRQUJBb0lCQUZvd2VVNFFUT0tmZTZJSgpmN3VLZ3ZNK2g5NVFzd3p2ckpxYzRsTU5ld1VMVzQ3Z3dqRUJVNzUwZ0ttdmJnYUgzamI1TmlCNGxDSS9HS25aCktBcVh6d1lMT3VSRVF0UExyL0lPbmdyVGZLbHJZNE1EdThzbC9lV084cG9KaktyaitKVHpvdzc2Zklzc3k0WXQKWGtidjdNc1hjRXlxUC9IYUtJOG8vSjk4aE4yYWFJRk5WM2NkRExzWmVNT0hHL1N3VHpDQmpHbmswb1VaQ3RZQwprODV2MnJMWEsxc2JoU3A0N2VEcitzUHdBalJqM1JUejlQNXZlelYwNGF2TnpwY0U4RFUxd3NaSkVGTUVQRGRuCkoxTjcrNDRXUDhRcmI1OWtxRzVoN0pZaldoQ3FCdy9YRDFCa0w3RUNXNlZxaVJjenU0dmMyZUl0SDlBd0lBNnAKV0R6ZkFjRUNnWUVBekhIR0QwMEJETTFYbUdVV3g5U1cvbzVySVhndlJyREtTSW1POVpuRG5ISE5hSlhpWWxweApUVEVVQ0luU0QvS3ByUkpoN3ZvNnQ0NHR6cXpUTGVRK29IZFlHWTUzZHROQ00vMi9UV0hyQm9uYTZSUXo0czljCldzdUtLVXBneWJUeG14bklKakR5WjkyQ3hRZFJwWmZPMW52SXJCTzY2SEpZdllOMG0xTGQrbkVDZ1lFQXozK3cKeHpta2lZbktuYUN5TlBmbEFBMHMvbWQ0WFl3eC9FL3hxYTZ3V0EwNlJNYzR2OUFUdHR1am9qM3o5MVJtdkwvRwplckRtWVpDVjVYQzVqRVBCUkpBVGdaeklDczR2Tk90YWJhT1I0Sm82OHZjazJReWZGV3dsK09aQXZZb2x2TklTCmFlOS8yc0VmbFhoeG1mN3RmekxPUmtVTmJvcjZUbkFtMDI5VWdIVUNnWUVBcFlBUXdvQW1zbk5rVHJTK3pVTzIKZkJsVWRrS3htcnN3OWFtTnRob2t0UGVYUGV2ZjJKaTRrYkdDTXl0R2hxeDlXT0xCcnRDWVNkRnFHWjNrVW9rcgpmWUUvSzJrZUltNEFjTkFnVmdkSFdBS3UyUElHMHJ2a1dvZmNyM0pMaWQzVm5DWXgxV0RZU3VhUm51ZysyeHRhClVGemlaUktQd3U0V0VreGhULyswUExFQ2dZQWZnWlQyK3lLbm01dC9TYW9sYnNwL3NvQjFkSUtMT2NGUlBWWkYKWEhmOE5xMzFTWWF0WVV2TkJSYVlpTzJsVFZSNExtcFZzTXlhWGRqVXlNUHpyMG9HUGhZb0pRVWUxdVhHRkVKYgp5VzFaL0RFZE9UZUlHV21DV0RSLzBYNWRDVC9ucHNJVEFjR1pGcC9VRTBDMGtFZkJlNVpraHhHZUNrNHRZTXdVCmFLQWREUUtCZ1FDZHZuemxOaG9hOGhQZjcvUW5xNnVUSVlVS2NNM3NaQWp3bXd0M1BrL2NWakVPUWtuR0RhRDYKNktUd2NHNGJveFhIWnZvV0ZjMU5OeFhCU3UwUHEzbThHUEgzNllNVFIzWHBKeDhWdW0zQWZQeEhKVEFYSnA4QwpkTWQrdmxFVGF3UzErL2luUng1OStzQ2FOVzNtSEZYSW1oS0tmeVo2L292NDVhM1NFY2pnSkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpsdmNzNlE4QXVIaENtanV1SjZBWm93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl5T1ZvWERUSTJNVEV3TmpJeQpNakl5T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFwYlg0eFBOL1E0Z3Y5RFYvRjZaNTg1Z2dhdmk1bkk4dUN3eVBPY3U0OXY3Vm52UVoKMGs2Zmt2ZWVOTWZ6c3JzR3QzVDVIV2plYy9aSjZxUEFmc1oxVytBNS9NT2tLWWZJSGdUSDJYdjdFWk83b2tMNwpoVWpPQ1hjcG5OdExULzVOYXpoait6N1lzRWQ1Zm1iK29hRTNuMlhjTnpsOFc3MEtaUXpobjJzMDlmSXFNUGRTCkhuQmp0UDF5N1c2cXlyRWx0Ukl4S3AwN0JYZW9QUTFCbERLWUhFSCtGLzFYNFNRLzNxZGZjdXliT3ExTE4ybWwKSWpHUktCL0NDejZPbU9DdEJ2Skl5SWgzU2Z5ajJuMlhQYkdwZTZVRkpveWRsNTE1ZUJjMzBLVGNKUDBkeVN6RgpSc0xqYkl1cUNvL2JXQ2hER3REa2k2SGtXaG95MlpYOENMLzFwUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQmhpS3JKL1lEWnZzT1VxekQ0YjBJalVUanFRTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQlgvUkZtdzhKbitiNTZHQmhyVStrL2IyZUFKODg1eE4zR3cwUEVuY21zeTBlbUJ6VTRQR204CnBsdXovRCtkT1huVXI0VmlFUVlmRnBZeFEzbnVIRWRIc2htbzdVaSt3Rktaa3RWWnRablRwQlpUUEhqazd0OSsKWVBmczA0cFVMRjhFUUdEaW9HK2V5WXBaR2IwdW03dndZN1ArSmFsdldHYS9xVTVBL1dpWUFxMG44Q1plOEFpcQpkUm8rc1huREprNU5FTWp3TE9sMUtwWW8xQWM3RmtCKzRQcWRVR0l6QXJlaEVPV2FQOWIyUnZEb3d1cmFpdjNZCmlqcEFnMk9ES1VjZVFpNWF2KzF4UnN1VHBzVDV1dHhKQ1hvT0l1YzVYVVpsWEM5bXhRajM1SGFlbVRrTGZaRTYKL1g2VGFoS1JFd2lpVzU5blpRTlk2NWE0Q2E5NUl4MUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lSQUpGdC9MTzZvaEQ1aE80UTF0SWREdE13RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl6TUZvWERUSTJNVEV3TmpJeQpNakl6TUZvd0V6RVJNQThHQTFVRUF4TUlZV1J0YVc0dFl6RXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRHJqVVJxNUEwVlBzbFlDQlEwZjZ1ZlYrKzdpak1pbXRyL3hJaSszMXh2MVlMNDAwSnoKR1A2SDRTeks1RmFDdUtUZ1g2RGV6NDNUWk9UNlRCeG1OdE1BVDNLZmdicmdXeURuL0FTcCtsV0NxUnZHVEtQVAp6clRWNmtxcGtMUXFMa2xtN1VZOHo4LzRIdGNEbzJOMzFvc0QxYitEWXZ1QVlKZE44b1llcW5iOHA4YmM3MjNnCmF1cU1wMzJlMWQrZE9xUldZMWZ6bDRFYXJ4ZVR1K0daMDRxaW1UcHJuTjdLdjdtM1dOM3paV1poKzcwalpZRG0KUUdJWStHM09aVlM2S2ZXemNzbDBBTTdUZXo4RTNDVFd6Z25paTZsS1Z0ZG5TNGh1Q0UxZVcvUnRna1JhVGFPdgp1L3NPYkJXM05COTEyN2dndUYzM1prYjFZdW04R05uazdyR1pBZ01CQUFHamRqQjBNQTRHQTFVZER3RUIvd1FFCkF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXcKQURBZkJnTlZIU01FR0RBV2dCUVlZaXF5ZjJBMmI3RGxLc3crRzlDSTFFNDZrREFVQmdOVkhSRUVEVEFMZ2dscwpiMk5oYkdodmMzUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSFhMYW90eXRVeERXejRUZGtxazdXRUV6c2xEClQ0WEpwYkRkOTNlZ2tsdTIzWWNCQmQ3aUlDYXRONFo3TjR3YTU4TTg2VnZkV1lXQmFOeGRjSnlTTDlqanlOd3MKMWY3WmFwekc1cEk1aGJRbjRMMmxnZHJhbE5JUjZ3Z21NQ2xjMUVlSlFyQjJEWDdiU1UwNjZIYVZTOTBNckI0TgprRG81ZHFWQitNcGFuSlpXZXl2SVRhbWlpdGtoTnlhUUp4ZjNPVTh6bVFXbWtnZ01EQk1ISklhZUx2V1BtL25JCnBScWRmNEs5WkxnV1ExUklCcnUvTW12Wk1wMkwwWmhISSt5ajJtV2wxbm1FN0tnQ3NxbC9tVXhsWlVkV2QyWDEKenIrV2JUenVQRUpxUC9YWVNMemdxVE85SUVxQXFQUGtxUHJhZUVpOFh1QXkzWDNYZnJ4T05LMU1PRU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBNjQxRWF1UU5GVDdKV0FnVU5IK3JuMWZ2dTRveklwcmEvOFNJdnQ5Y2I5V0MrTk5DCmN4aitoK0VzeXVSV2dyaWs0RitnM3MrTjAyVGsra3djWmpiVEFFOXluNEc2NEZzZzUvd0VxZnBWZ3FrYnhreWoKMDg2MDFlcEtxWkMwS2k1Slp1MUdQTS9QK0I3WEE2TmpkOWFMQTlXL2cyTDdnR0NYVGZLR0hxcDIvS2ZHM085dAo0R3JxaktkOW50WGZuVHFrVm1OWDg1ZUJHcThYazd2aG1kT0tvcGs2YTV6ZXlyKzV0MWpkODJWbVlmdTlJMldBCjVrQmlHUGh0em1WVXVpbjFzM0xKZEFETzAzcy9CTndrMXM0SjRvdXBTbGJYWjB1SWJnaE5YbHYwYllKRVdrMmoKcjd2N0Rtd1Z0elFmZGR1NElMaGQ5MlpHOVdMcHZCalo1TzZ4bVFJREFRQUJBb0lCQVFDdmZ5VUdicnJBcFhMbAp2Nzh1RGlFVUt6UldDZlZuUnZEN3RyWWJYOWREQzFUMWhwRHZxQ09ib1V6NkxYMjNEMUxvU05kV3FsVUV0eHRTCjBQb252WmtmbGhIVWZaZDZLT3N2YkRrZFc0SHlRNFNLRGZmUml5UjRiSU1NS3QvUXZZTzZ4L1dZd1V3MWxPU2wKdFVvYXN5SUh6VzFPdXFTZlZWZmxuMWdGNlFPVjRRei9TbWFNSkYrbnVpTEswdG1La1RBcmNSVHk1Q3dDMlFCbAp2L2lCRHF0THYxZlNCK3JUOVRKNm9WRUNUd1B2M1NCc0xuZmczS1h3MU45a0krazRhRGRBaWVjam5hRE1sR2F0Cm5lWTV6cDRIZFpoOXliQU81dElhNTMyMFMxcXRNNHNMaGdqK1FSNmpjbC9YN0Z1OXhVb1d3VUN3K0ZWZVJESGcKKzhrdm9XQUJBb0dCQVBPYStwb3pObUNNcGxVTTNJQS9UMW96Y29vKyt5VDNaa2JXdVQ0czhtQ2ZYVmZNMXE0WgpxWHQ2eG1HZXdLRExnSlJUSml6VU5lNkNLbGdQRml2TkdoRVJBRmxaTkt3Yyt6UGs1cWRIR2ZIdnozQy81VHpYCjR5MmFFNWFaVGpsTTVSVm04TFdVRVNoTTQ4dk9yS2xtWXFGUitvbTBXNjVUa2diL1hyMURZQThCQW9HQkFQZUoKWTRGVUw4STBDK3kyV2VjYndxeWRuaWNMWi8vbzlRbTBJeXlvYkJQMWRuWUxEVUlrQ0MzcjhBVlJwUUwvbXlPNwpRcm01STdxQjF2UnJESkZubk1nc0U5RGNDK01TMU90WG9xeXZuaWg3M3MyaGhhU1UzYm8zOWdMUVZLN2w1eVliCkE3dzhkS3VENUVDMThkU3NTd1BwZG5jOXhhdmUwR2NQeVdPRW43cVpBbjkxQ3dGZEZUNExKWWpGVkdpZE5jM3EKaU0xL25zTUwvOUlrTndiSjJNNmJuZlk3T1Mvc2RtZjM3QVZrNGVHcllCdG5LSXd1L2NicjBaNkdzTGoyVXBVegpuZmVNOWs5WVlwUlBXcXQzczdIRGpIVWV0eFJ0SjB6L25BZk5VOXRCckxCa21CRVBMUlVSUitBckRDSHBRa2doCk9rSWw1NElsUUFIcFdza3FKalVCQW9HQkFLZU16MVdTN21DOWFmVG4yU0tkbjcvSFVHMk5RdS90ZHk4Q1IyeksKODV6dTRTZzFndHZxRjc4OW5GRjlXZndWbDZVdjg1SlN4dVJQVG5oU25VY3VvdWk3TFE2S1kyRm9OY2Eyb3QzUQpZWFYxb3ZIOUNzREVJdkVSUCt2WHAvcGFrNE12ZGUvTDNBemNVWHVicS8wUVFoWjd5RHdlQzlheUVzNHYyVmtMClJETEJBb0dBZm1TQmxrNWN6SEJxbjQySzNPdWJ0NkZmWDVWVTZTVG4rSWNDRW51S081d1lDSk9qOXY3YkRHV2YKVWVyU0VoTUowTDFtYkNFdnJnUmNkTDArcXg3Q1JDOGF4SDJDWlN4OS9rUmJDa2FmMnNza3VmV1J5VUlOWmk3bQpZYjBHZ1cxSGFGR1pPOVMrcG1JamdNZ2tLTkowaDJoS3BScFYyNzZ2OVMwTFBrWUlrRHc9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-ca-cert
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpsdmNzNlE4QXVIaENtanV1SjZBWm93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl5T1ZvWERUSTJNVEV3TmpJeQpNakl5T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFwYlg0eFBOL1E0Z3Y5RFYvRjZaNTg1Z2dhdmk1bkk4dUN3eVBPY3U0OXY3Vm52UVoKMGs2Zmt2ZWVOTWZ6c3JzR3QzVDVIV2plYy9aSjZxUEFmc1oxVytBNS9NT2tLWWZJSGdUSDJYdjdFWk83b2tMNwpoVWpPQ1hjcG5OdExULzVOYXpoait6N1lzRWQ1Zm1iK29hRTNuMlhjTnpsOFc3MEtaUXpobjJzMDlmSXFNUGRTCkhuQmp0UDF5N1c2cXlyRWx0Ukl4S3AwN0JYZW9QUTFCbERLWUhFSCtGLzFYNFNRLzNxZGZjdXliT3ExTE4ybWwKSWpHUktCL0NDejZPbU9DdEJ2Skl5SWgzU2Z5ajJuMlhQYkdwZTZVRkpveWRsNTE1ZUJjMzBLVGNKUDBkeVN6RgpSc0xqYkl1cUNvL2JXQ2hER3REa2k2SGtXaG95MlpYOENMLzFwUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQmhpS3JKL1lEWnZzT1VxekQ0YjBJalVUanFRTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQlgvUkZtdzhKbitiNTZHQmhyVStrL2IyZUFKODg1eE4zR3cwUEVuY21zeTBlbUJ6VTRQR204CnBsdXovRCtkT1huVXI0VmlFUVlmRnBZeFEzbnVIRWRIc2htbzdVaSt3Rktaa3RWWnRablRwQlpUUEhqazd0OSsKWVBmczA0cFVMRjhFUUdEaW9HK2V5WXBaR2IwdW03dndZN1ArSmFsdldHYS9xVTVBL1dpWUFxMG44Q1plOEFpcQpkUm8rc1huREprNU5FTWp3TE9sMUtwWW8xQWM3RmtCKzRQcWRVR0l6QXJlaEVPV2FQOWIyUnZEb3d1cmFpdjNZCmlqcEFnMk9ES1VjZVFpNWF2KzF4UnN1VHBzVDV1dHhKQ1hvT0l1YzVYVVpsWEM5bXhRajM1SGFlbVRrTGZaRTYKL1g2VGFoS1JFd2lpVzU5blpRTlk2NWE0Q2E5NUl4MUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcGJYNHhQTi9RNGd2OURWL0Y2WjU4NWdnYXZpNW5JOHVDd3lQT2N1NDl2N1ZudlFaCjBrNmZrdmVlTk1menNyc0d0M1Q1SFdqZWMvWko2cVBBZnNaMVcrQTUvTU9rS1lmSUhnVEgyWHY3RVpPN29rTDcKaFVqT0NYY3BuTnRMVC81TmF6aGorejdZc0VkNWZtYitvYUUzbjJYY056bDhXNzBLWlF6aG4yczA5ZklxTVBkUwpIbkJqdFAxeTdXNnF5ckVsdFJJeEtwMDdCWGVvUFExQmxES1lIRUgrRi8xWDRTUS8zcWRmY3V5Yk9xMUxOMm1sCklqR1JLQi9DQ3o2T21PQ3RCdkpJeUloM1NmeWoybjJYUGJHcGU2VUZKb3lkbDUxNWVCYzMwS1RjSlAwZHlTekYKUnNMamJJdXFDby9iV0NoREd0RGtpNkhrV2hveTJaWDhDTC8xcFFJREFRQUJBb0lCQUZvd2VVNFFUT0tmZTZJSgpmN3VLZ3ZNK2g5NVFzd3p2ckpxYzRsTU5ld1VMVzQ3Z3dqRUJVNzUwZ0ttdmJnYUgzamI1TmlCNGxDSS9HS25aCktBcVh6d1lMT3VSRVF0UExyL0lPbmdyVGZLbHJZNE1EdThzbC9lV084cG9KaktyaitKVHpvdzc2Zklzc3k0WXQKWGtidjdNc1hjRXlxUC9IYUtJOG8vSjk4aE4yYWFJRk5WM2NkRExzWmVNT0hHL1N3VHpDQmpHbmswb1VaQ3RZQwprODV2MnJMWEsxc2JoU3A0N2VEcitzUHdBalJqM1JUejlQNXZlelYwNGF2TnpwY0U4RFUxd3NaSkVGTUVQRGRuCkoxTjcrNDRXUDhRcmI1OWtxRzVoN0pZaldoQ3FCdy9YRDFCa0w3RUNXNlZxaVJjenU0dmMyZUl0SDlBd0lBNnAKV0R6ZkFjRUNnWUVBekhIR0QwMEJETTFYbUdVV3g5U1cvbzVySVhndlJyREtTSW1POVpuRG5ISE5hSlhpWWxweApUVEVVQ0luU0QvS3ByUkpoN3ZvNnQ0NHR6cXpUTGVRK29IZFlHWTUzZHROQ00vMi9UV0hyQm9uYTZSUXo0czljCldzdUtLVXBneWJUeG14bklKakR5WjkyQ3hRZFJwWmZPMW52SXJCTzY2SEpZdllOMG0xTGQrbkVDZ1lFQXozK3cKeHpta2lZbktuYUN5TlBmbEFBMHMvbWQ0WFl3eC9FL3hxYTZ3V0EwNlJNYzR2OUFUdHR1am9qM3o5MVJtdkwvRwplckRtWVpDVjVYQzVqRVBCUkpBVGdaeklDczR2Tk90YWJhT1I0Sm82OHZjazJReWZGV3dsK09aQXZZb2x2TklTCmFlOS8yc0VmbFhoeG1mN3RmekxPUmtVTmJvcjZUbkFtMDI5VWdIVUNnWUVBcFlBUXdvQW1zbk5rVHJTK3pVTzIKZkJsVWRrS3htcnN3OWFtTnRob2t0UGVYUGV2ZjJKaTRrYkdDTXl0R2hxeDlXT0xCcnRDWVNkRnFHWjNrVW9rcgpmWUUvSzJrZUltNEFjTkFnVmdkSFdBS3UyUElHMHJ2a1dvZmNyM0pMaWQzVm5DWXgxV0RZU3VhUm51ZysyeHRhClVGemlaUktQd3U0V0VreGhULyswUExFQ2dZQWZnWlQyK3lLbm01dC9TYW9sYnNwL3NvQjFkSUtMT2NGUlBWWkYKWEhmOE5xMzFTWWF0WVV2TkJSYVlpTzJsVFZSNExtcFZzTXlhWGRqVXlNUHpyMG9HUGhZb0pRVWUxdVhHRkVKYgp5VzFaL0RFZE9UZUlHV21DV0RSLzBYNWRDVC9ucHNJVEFjR1pGcC9VRTBDMGtFZkJlNVpraHhHZUNrNHRZTXdVCmFLQWREUUtCZ1FDZHZuemxOaG9hOGhQZjcvUW5xNnVUSVlVS2NNM3NaQWp3bXd0M1BrL2NWakVPUWtuR0RhRDYKNktUd2NHNGJveFhIWnZvV0ZjMU5OeFhCU3UwUHEzbThHUEgzNllNVFIzWHBKeDhWdW0zQWZQeEhKVEFYSnA4QwpkTWQrdmxFVGF3UzErL2luUng1OStzQ2FOVzNtSEZYSW1oS0tmeVo2L292NDVhM1NFY2pnSkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpsdmNzNlE4QXVIaENtanV1SjZBWm93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl5T1ZvWERUSTJNVEV3TmpJeQpNakl5T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFwYlg0eFBOL1E0Z3Y5RFYvRjZaNTg1Z2dhdmk1bkk4dUN3eVBPY3U0OXY3Vm52UVoKMGs2Zmt2ZWVOTWZ6c3JzR3QzVDVIV2plYy9aSjZxUEFmc1oxVytBNS9NT2tLWWZJSGdUSDJYdjdFWk83b2tMNwpoVWpPQ1hjcG5OdExULzVOYXpoait6N1lzRWQ1Zm1iK29hRTNuMlhjTnpsOFc3MEtaUXpobjJzMDlmSXFNUGRTCkhuQmp0UDF5N1c2cXlyRWx0Ukl4S3AwN0JYZW9QUTFCbERLWUhFSCtGLzFYNFNRLzNxZGZjdXliT3ExTE4ybWwKSWpHUktCL0NDejZPbU9DdEJ2Skl5SWgzU2Z5ajJuMlhQYkdwZTZVRkpveWRsNTE1ZUJjMzBLVGNKUDBkeVN6RgpSc0xqYkl1cUNvL2JXQ2hER3REa2k2SGtXaG95MlpYOENMLzFwUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQmhpS3JKL1lEWnZzT1VxekQ0YjBJalVUanFRTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQlgvUkZtdzhKbitiNTZHQmhyVStrL2IyZUFKODg1eE4zR3cwUEVuY21zeTBlbUJ6VTRQR204CnBsdXovRCtkT1huVXI0VmlFUVlmRnBZeFEzbnVIRWRIc2htbzdVaSt3Rktaa3RWWnRablRwQlpUUEhqazd0OSsKWVBmczA0cFVMRjhFUUdEaW9HK2V5WXBaR2IwdW03dndZN1ArSmFsdldHYS9xVTVBL1dpWUFxMG44Q1plOEFpcQpkUm8rc1huREprNU5FTWp3TE9sMUtwWW8xQWM3RmtCKzRQcWRVR0l6QXJlaEVPV2FQOWIyUnZEb3d1cmFpdjNZCmlqcEFnMk9ES1VjZVFpNWF2KzF4UnN1VHBzVDV1dHhKQ1hvT0l1YzVYVVpsWEM5bXhRajM1SGFlbVRrTGZaRTYKL1g2VGFoS1JFd2lpVzU5blpRTlk2NWE0Q2E5NUl4MUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUREekNDQWZlZ0F3SUJBZ0lRYWhaTXdLaUtoMC9PSjZnTUNJQUlMekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qSXlNakk1V2hjTk1qWXhNVEEyTWpJeQpNakk1V2pBUk1ROHdEUVlEVlFRREV3WnlaVzF2ZEdVd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3CmdnRUtBb0lCQVFDeVc4MVlJSldBOHpwOTlvdkhrcnpZL29VWHJaUjE3YnBZSUk3K2VDU0ZkNEkxdjIrTTI5ZmcKbnQyWTIyMnlic1FXR3FadHFxekhnZFhCWjR1UWdDNFpKU3ZVVFRCUjNkTkpQSTdzU1NRblBpNGw3TXBhV1E0RgpkRlZ3ZjAvTlNnQkU2ZVZ5SEJ6andQWFZtQ3RtTUdlTXlTcEFJVHFFL0lydzRzM0FDb3FLVWtvVHNaYklQRHlaCnFoODFlbEllaE0xQjZWTmhLRStCaEtoN1ByTkFtd1JxbjNJWUl2WDVMNmljNE94ZkRsOG1IOWV0TFRFU0UyamMKOGpsVHRxaU5NcWRuQmtsTm83dWlhNGdVVEhVUHRNdHRNM3JCNmtqWWNnVmhMWm9qZk9yc2dXUUJSLzNIVjBFOQpzWmgwcUQ2QlA0OExRY0JzQTBmSVpIRnBJQzhsb0o1akFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGCm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JRWVlpcXlmMkEyYjdEbEtzdytHOUNJMUU0NmtEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQwpBUUVBU211cjNlUVAvckI3WGRiZVlEQTMyNUY3NjBrOCtyY25RNHpiNVRXTVNhRUtodDNVVjcwRWRWU2RxNWF2Cld6ZDJ0UEduVVRpVE9paEFpL0tXdy8wa3U1QWgxcXVBeHdUaHRub2hkQURzU3NzRkx3OUdGVHltMjdoZk9jUVgKckhDaDVUS3RDUHdvR2VBREFCdGhNenMvcnc1dmM2UDZHYUdCYUIyMVVXeVlJaWhISmJDVGhiNDU4RWRGYTlVTQp5UFBIMVZFdmxRMlZNcWhoMUVGZ2FKZmFUbTJVSFlHNy9TT3ZRV0sxU2xuUjdtZ2pqekRoZlFDQm40SWZNOWp1CnlOTVVpUTlXM2JLNVBQaHZBaSt2ME53S1hybmpWWHdNelI2emFhbkdGU2lWc0ZLVnEwWWNaODRVMFUwVEhQSHEKZGx0ZS9OWjBheU5iOENMU2FDNVNScGMwMlE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc2x2TldDQ1ZnUE02ZmZhTHg1SzgyUDZGRjYyVWRlMjZXQ0NPL25na2hYZUNOYjl2CmpOdlg0SjdkbU50dHNtN0VGaHFtYmFxc3g0SFZ3V2VMa0lBdUdTVXIxRTB3VWQzVFNUeU83RWtrSno0dUpleksKV2xrT0JYUlZjSDlQelVvQVJPbmxjaHdjNDhEMTFaZ3JaakJuak1rcVFDRTZoUHlLOE9MTndBcUtpbEpLRTdHVwp5RHc4bWFvZk5YcFNIb1ROUWVsVFlTaFBnWVNvZXo2elFKc0VhcDl5R0NMMStTK29uT0RzWHc1ZkpoL1hyUzB4CkVoTm8zUEk1VTdhb2pUS25ad1pKVGFPN29tdUlGRXgxRDdUTGJUTjZ3ZXBJMkhJRllTMmFJM3pxN0lGa0FVZjkKeDFkQlBiR1lkS2crZ1QrUEMwSEFiQU5IeUdSeGFTQXZKYUNlWXdJREFRQUJBb0lCQUFkVTZyNENxT0tpSFBkcwptUlpkRzlJM3REVGk5OFZaUGwyOUNPUEJBSTlUK0ZCSlRFYVlDdW02M2hVWWdBdmpyYi9TM0tDSmNZeko4NFY5CndpandlL1NncUlxVG1iYmp6WG1uT2FEUTZPR01GczJNVEUwbWVBTVZZeVc2dGdjVVVhcURpdUVEOHRRUjdJa1oKTmo5L0llS1JxbUQwZkxsV3dFZGlxMTZIa0daYkpnb3I4cXZmbmhlbXFtRnlZZnVWVE5IOXJ4V1QvUFJKR3RJSApWQ3hQWERFY2tKVUNsQUYyOFNaTWtNZ1JXWWNnZmdOd0V5cUVoY3VFRldsd2JPVUpwUnphcFNTcnMwZ0VUQTk5ClBhWGQxOURyWE1aR0hZQUVoQ2JqaEt5SE5CWGI5YUREZWFLbTZCU3NIM1dlM1Vmdnp1dEVEeWlCWEU0SXlKYVkKZmIzQnAwRUNnWUVBMmZ5eXJBN09pV3grZE85dmZScjloSWE1TU5haHArZS9WVWhJamVtdGpRblBRQlVRM2greQpLRHBjTmdNQjEza3dqbjFmYUpQRnErS0EvWXl0R0lQZ1VaMXU3V01WYXBOZmM2dHlYd1liWm9kWnovRFhtbW9uCnFsOVMyemZqYXUrS3loZTBLL1AvSUZ6RWdCWk5Fc0xubmkxMjF6dVg0dVNxY3lDc2ZUNkVGbkVDZ1lFQTBYWUYKM21OT3VZU0Z2eXNzSlRnTkN0ZDFOaS9FOE85SjRFekxYWEJ3WFV2VjdSQkRtYWFvQThocHovVFdsL21HRkNzNwo5TGdiNmpUOVoxaEFwVitOenB6enVYeWdMNkx5bXZ5V3N4cnhPbkdkMUhqK2pxMzAwT1ZneGlOTDVvUGxXdSsrCml4MDVGSkMwY25wRFZDWUNKV2lncmRiYkVWTCtXbFBBb2t1RU5CTUNnWUJxREZpMEFlUVMwUmhZTlIvTkFqTngKcE1VMWNFVm0xUVN0TGFRMmZnZHpoT0V4c00zcThncVBMWTBzclp2WXd0bVBpSWpBN0pzTyt2dDczbE5iaU5TNQpmOWkyWGl6T0UzSXRhS3dVZEhraUVSanRZNkxRT1hLZ25RMUhIdEpoZExYVmlXQ2F2WEpSd1MvTGpJM2tZYk9pCnJVV1NnaWhyTm9tQnh0U0RmY1Z1MFFLQmdHZmFhc0orM3BPaEgyZFBrbzNKb3IzVFlpeEJ0eFgycnR4bGR4ZVgKSGo5RDBJZS8zcVNhT3dmVklKR1pSYVVJZFBBZkY1VVlpODZ1QTA1d05XMUpXVmd0L2JIa0Z0QkhySjRueXRoMgo3VkFhOFRSZDRXa0EyemVQNDFHYVFwSENwNzlVeTFiU1lIRFA1b2cwRXBud1ZuUVIwa2tmRkhNY2dUeHI5a0VCCnpFUzlBb0dCQU1MaHVvbmhLZWVWQitteTc3RW9FRjNtOFo4dmJRQzJ0YW5pRUtTdlN5TjJaZm1DWTd3cHJtTzAKcTdGQVpIRnpibWRhSXlZOC91V0dlN25WVWFpc2xRWDVLWXpyQVlISkxkWEE0TXU0elJGdlVnQ3BFb29qaTNSbgpHUzd2YnZoNGNBcTV3SGtDOTBGQWdrNXYvYWh0QmFoUEZlOXZBdHBhSmpuelV2WnQ3NitvCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpsdmNzNlE4QXVIaENtanV1SjZBWm93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl5T1ZvWERUSTJNVEV3TmpJeQpNakl5T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFwYlg0eFBOL1E0Z3Y5RFYvRjZaNTg1Z2dhdmk1bkk4dUN3eVBPY3U0OXY3Vm52UVoKMGs2Zmt2ZWVOTWZ6c3JzR3QzVDVIV2plYy9aSjZxUEFmc1oxVytBNS9NT2tLWWZJSGdUSDJYdjdFWk83b2tMNwpoVWpPQ1hjcG5OdExULzVOYXpoait6N1lzRWQ1Zm1iK29hRTNuMlhjTnpsOFc3MEtaUXpobjJzMDlmSXFNUGRTCkhuQmp0UDF5N1c2cXlyRWx0Ukl4S3AwN0JYZW9QUTFCbERLWUhFSCtGLzFYNFNRLzNxZGZjdXliT3ExTE4ybWwKSWpHUktCL0NDejZPbU9DdEJ2Skl5SWgzU2Z5ajJuMlhQYkdwZTZVRkpveWRsNTE1ZUJjMzBLVGNKUDBkeVN6RgpSc0xqYkl1cUNvL2JXQ2hER3REa2k2SGtXaG95MlpYOENMLzFwUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQmhpS3JKL1lEWnZzT1VxekQ0YjBJalVUanFRTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQlgvUkZtdzhKbitiNTZHQmhyVStrL2IyZUFKODg1eE4zR3cwUEVuY21zeTBlbUJ6VTRQR204CnBsdXovRCtkT1huVXI0VmlFUVlmRnBZeFEzbnVIRWRIc2htbzdVaSt3Rktaa3RWWnRablRwQlpUUEhqazd0OSsKWVBmczA0cFVMRjhFUUdEaW9HK2V5WXBaR2IwdW03dndZN1ArSmFsdldHYS9xVTVBL1dpWUFxMG44Q1plOEFpcQpkUm8rc1huREprNU5FTWp3TE9sMUtwWW8xQWM3RmtCKzRQcWRVR0l6QXJlaEVPV2FQOWIyUnZEb3d1cmFpdjNZCmlqcEFnMk9ES1VjZVFpNWF2KzF4UnN1VHBzVDV1dHhKQ1hvT0l1YzVYVVpsWEM5bXhRajM1SGFlbVRrTGZaRTYKL1g2VGFoS1JFd2lpVzU5blpRTlk2NWE0Q2E5NUl4MUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRVnBER2JuZWphaURMMTlveGlDWG15VEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qSXlNakk1V2hjTk1qWXhNVEEyTWpJeQpNakk1V2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBcDFHcEYzOWRXMHlBb3hmL3NJMGMKa1JrT1I2WE0rQ01TOGk2K1MrQ0UzZzdDNFY4UUxBeGdNVzBTblo1UDFzUWtzdVpYZ0twYW9ZSG40VWFtc01XUgpWNzJ4dGpPYUUrVWZ1L1VoODJzbXh0OWMrSk9KQ3Y3cjJBTWN3ZUp5S3FoZ3VJQ2xzaWdrT0VJa20xUzk0b1FJCk81N1M0ZjdKZzc3aDBYMHZJNG0yOTl6ZktoR2h1V2MwOVVDUHRQL1dpTHYrdHdkUkpzbUdSVFhEaC84Rm0vYmsKS2dNVXA2bHRhaFdWb2Jucyt4aDI0dlZGSURQLzkxLzlpVXQvZGRMcXYvU3c4WmJpVHNGbitrOTRJMldFMW5UZQoyRVZ2dW9ROUljV2dmZFh3TFNGVlpWMXlDWXkzQmx6UVRPeFVOakVhV1EyNEVobGc5a0ZIWEw1NVRxc0ZLVGV0CmFRSURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JRWVlpcXlmMkEyYjdEbApLc3crRzlDSTFFNDZrREI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUNYT1hFUW9SYVdnc3R0UTladXl5K2dLYWpGb0pMZmt3bG0xVkQ3ZVZIVmIxY0dhTHZICnRHRWgrWURmS2loMjhRT21tN0NKT3UxeS9MNjNOUDdTR3JMVEtBMVFseC94djhYbDIyVXVNY1lhSytGU2ZXV2YKZjJyWU1NaFN6aE4wL1ltdDRLRTZ6dFp5ektUUG9yOG44bjhjaTdZaUM3NlRTOFlwdGN4S011SzhxYkZGM2ZNUQpNM2tCcHh6enA1R203cDRiUjN3Q0VXT3h4YzVHNWtxWnNDWkR0VW5vV0M1K2orOVBObnpLK245aXpwUUdCR1RrCmpIQXVKak5CREFXS01VL3RsUzIzK0FvKzBzRFIzUXNWL2xGQVRjWUZMSUtTbVZLd3MydGxuYWw1QU80YlBNdksKR2hpREEwd2NQQSsybmIwbUphWjdZcmNkRm8zZXViT3dZZ25WCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcDFHcEYzOWRXMHlBb3hmL3NJMGNrUmtPUjZYTStDTVM4aTYrUytDRTNnN0M0VjhRCkxBeGdNVzBTblo1UDFzUWtzdVpYZ0twYW9ZSG40VWFtc01XUlY3Mnh0ak9hRStVZnUvVWg4MnNteHQ5YytKT0oKQ3Y3cjJBTWN3ZUp5S3FoZ3VJQ2xzaWdrT0VJa20xUzk0b1FJTzU3UzRmN0pnNzdoMFgwdkk0bTI5OXpmS2hHaAp1V2MwOVVDUHRQL1dpTHYrdHdkUkpzbUdSVFhEaC84Rm0vYmtLZ01VcDZsdGFoV1ZvYm5zK3hoMjR2VkZJRFAvCjkxLzlpVXQvZGRMcXYvU3c4WmJpVHNGbitrOTRJMldFMW5UZTJFVnZ1b1E5SWNXZ2ZkWHdMU0ZWWlYxeUNZeTMKQmx6UVRPeFVOakVhV1EyNEVobGc5a0ZIWEw1NVRxc0ZLVGV0YVFJREFRQUJBb0lCQUM2d3F1N1RxOGwrWDZjagpXMFo1R2kralBramdDNEp5eHlhdHhJeUg2b3ZNc3JVUlFnSUlzZzhZME1rTEZGeHAvNU9zazE1a0swWkdhZDZEClNLQ3JnUk5xNjl4Y0tmTERUVWUxNy9OdFF6VGJ2NlhlQmEvNzB2UkVhaEh3anNzNGtVVHJJVkhGd2RXeEgyWDUKRDhQVjlEWXU2OG9FdjFiMFBTK29MeTlManJNN2k2d1grWkYzUVU3SlUraU5ub2YxeDdvM0phNU4yU2paS2U4WQp5ZSt0SFFQTERWK0NZNFUzc0RacEh5SkJqaUhWUHVSWG9yRWMwclB5Tlg5RWtVU3dRa3k2WEtnNmVRRENUVEh5CktIZE9jRzNGU1A2V29melFJOVNTN001cDU5Z1l4Z2pDQ21TSWxlSFh5SnkyT1dUam5tWDZJb0FwN3g5WG1TS0oKY3RCQnlNRUNnWUVBMkU1eHhoRkpBUW1WL20vc29CVXFNRlBIN0ZBV1VLd1JHeU9UQlJGZnFNY0ZvZDBkUkp1LwpLelpOaGUxTlFxZncxTlluNG4wV2ZzU0FRazFkemVpbi9kYTJJd2pDV3RPWDRzNHhaVjNzdG9BcXloQUJkZlVLCm5mSlc0WGN3NUpERy9hRlJ4aFRNNS8ybFRtdHF3aE1URGQrY056MmxoaG9BRityTzduaG9GWDhDZ1lFQXhnWG4KY3lkU2tzelZUdktoeUtDSEQxYng1cXFITk5VaW1tUHZranFJdUZteHVzTW81YnRkOUdtNW1HUjJGdGZBSGZVUwpFRjFteURpRXg0MVQ5UkdDelpOcjdTYkRybnBUREcwdGUyUU53cmJEcHJ0UVlGTEdwY0Vuc0daVnovMlE0YThkCng5MWM2NFgxa3c0MDVzbTNiVjNSN2dBYSt5TzkwRmFiOVM3WHdSY0NnWUVBdHhjSEpNRml5dmNET0dBaXFZbmcKc1JGcGl6UnEveFAyVXNOMDRYaElRVU5kR0JwaWVMMWdQa0p6c2lZZ0hJaXN5R3NSVFp2VjI2Mldad2kzbXVBUQp1a0x3M295K2ZrVFdMb3Vic2hLam1BSzZ0VmlBOUFoYldVQlVtL25ZcjgrQU1CVkpjMklONDF5R2ZPOWRhVExlCkVRTXlabXZPM01qTFJYTmlmdVg2TEI4Q2dZRUFsVHNyMG5kRzNrU3BXQWEzNzRjeVlWZ0hrdXJlVysxblYyeUsKeGV1QXoxVWhBSHRFM2VSWENQT0lINVZOL1NiNHJGcmRFeUlnYkRGVHQwTUZpNEYzenM4VG5iUUI4Z0pUaGVEZApUc2ozS2M4c0lRRzJyL0NScmFhajcyY2ZzbEFJR0Z3dEdFcjFWTFV1ZlhWT1hzS1Rqa01QQ3NwZml2WERmVGRYCjd1MHZRVjhDZ1lCVmVORHVuZ2NqMlZvR2FSbkhjN3BtckFvY29vZ2JsczExQWRNeGU2emtybHdySlZSWTF3b2EKTHBmb2E0VittSUdLT0RrbUEwV0t0alNCd2EwRVNrU1AzYjltZHBjcDE4SzRIK0t1UTlPZXY5eUtFeEM1TS9hdwpic2dHRnNQMklYbUFPdklzVmFSQUc2RnJ0aWtUTmRySmdFYklaYnpZQkdLbWl6NitjOWgwNFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpsdmNzNlE4QXVIaENtanV1SjZBWm93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl5T1ZvWERUSTJNVEV3TmpJeQpNakl5T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFwYlg0eFBOL1E0Z3Y5RFYvRjZaNTg1Z2dhdmk1bkk4dUN3eVBPY3U0OXY3Vm52UVoKMGs2Zmt2ZWVOTWZ6c3JzR3QzVDVIV2plYy9aSjZxUEFmc1oxVytBNS9NT2tLWWZJSGdUSDJYdjdFWk83b2tMNwpoVWpPQ1hjcG5OdExULzVOYXpoait6N1lzRWQ1Zm1iK29hRTNuMlhjTnpsOFc3MEtaUXpobjJzMDlmSXFNUGRTCkhuQmp0UDF5N1c2cXlyRWx0Ukl4S3AwN0JYZW9QUTFCbERLWUhFSCtGLzFYNFNRLzNxZGZjdXliT3ExTE4ybWwKSWpHUktCL0NDejZPbU9DdEJ2Skl5SWgzU2Z5ajJuMlhQYkdwZTZVRkpveWRsNTE1ZUJjMzBLVGNKUDBkeVN6RgpSc0xqYkl1cUNvL2JXQ2hER3REa2k2SGtXaG95MlpYOENMLzFwUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQmhpS3JKL1lEWnZzT1VxekQ0YjBJalVUanFRTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQlgvUkZtdzhKbitiNTZHQmhyVStrL2IyZUFKODg1eE4zR3cwUEVuY21zeTBlbUJ6VTRQR204CnBsdXovRCtkT1huVXI0VmlFUVlmRnBZeFEzbnVIRWRIc2htbzdVaSt3Rktaa3RWWnRablRwQlpUUEhqazd0OSsKWVBmczA0cFVMRjhFUUdEaW9HK2V5WXBaR2IwdW03dndZN1ArSmFsdldHYS9xVTVBL1dpWUFxMG44Q1plOEFpcQpkUm8rc1huREprNU5FTWp3TE9sMUtwWW8xQWM3RmtCKzRQcWRVR0l6QXJlaEVPV2FQOWIyUnZEb3d1cmFpdjNZCmlqcEFnMk9ES1VjZVFpNWF2KzF4UnN1VHBzVDV1dHhKQ1hvT0l1YzVYVVpsWEM5bXhRajM1SGFlbVRrTGZaRTYKL1g2VGFoS1JFd2lpVzU5blpRTlk2NWE0Q2E5NUl4MUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTRENDQWpDZ0F3SUJBZ0lRTGNmbmlXQUtXNHZPS2ZmUzBaNGtDVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qSXlNakk1V2hjTk1qWXhNVEEyTWpJeQpNakk1V2pBak1TRXdId1lEVlFRRERCZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEYjA2VkhvdmJ1SGpPNCtqS1dCOWpLWUhQRzZpbmMKbjkvTUxKMUNuSnNLMzNIWjBTWTJGbm9EMHZobVhNSGR5M1lyenNVYnpFdlpTY3B4Y205VFFyakFmaURteS9QRQo5OGt4aEZMS2grdzYxeVdWT2FCU05qbkNsZk4zZUFTSEViTGNSZHJWVXZreEFGMGZxMmhKT0pEejFlQ0VONWpOCnZSTlNxclgrdGtTL3dIRGVJdXJLVWYvOEh2a3M5TWlFZ0Urd1JROWEvakJKWkxabVNTcC8yN0hpUXZNY056UEsKV2FhRDYzSklMQVo2b0xGVWdXVzA3MDJSYU10R011SlRCdE5wOG5sMlppNXA2WjBQTVluMEJSYlRacG1ReUxTdApzck1zdm5rTzZaazN5d3pTajF6OVRHZzgyS3lJVGdET3JQQTcrZS9rNkNhRjFhSUxnbjVDSFgrREFnTUJBQUdqCmdZWXdnWU13RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZCaGlLckovWURadnNPVXF6RDRiMElqVQpUanFRTUNNR0ExVWRFUVFjTUJxQ0dDb3VhSFZpWW14bExYSmxiR0Y1TG1OcGJHbDFiUzVwYnpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFaZU10M3hmaExiazlkYnlqTU5ZRlB5OFFpOWxBQ0hES0drbUFMckNzV0tHN2FlcEoKK1JYeXlzZVZqcTcvZHlrK2luaG1WZi9SbUNMb2Y2RzFkWmpyYUtSbm14WGg0STRQQURRM2JSS2JqUjh5Z2s1WApjVEtCN1BtZG1FY2RuQU9XcFZGeWw2WStDeC9NT1p2QnR0M0FEWnJMNmNmR1NNNHRkQnMrcXhaVm0yRytEdmVzCmFIMzhWYVFKMVlZK3FaMm5CSUhZbVNKa1hUZTFwVS9tZVhUSXRLWDk0K0cycGlWSktMdG5yM09JeS9TSnR2ajgKNXVFY3AxNWd1ZCtlRjM5UXg3U1NtRjhWSm5rOHEzL3Q3KzFQQzJZa1lTTjJIZHJZRDRzZzNlcXVCY05KWWFOVwpwQTJ3VnJJbTdQN044MnFsUHl1MDluSUdWdllJS0lvbEFEYmt4UT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBMjlPbFI2TDI3aDR6dVBveWxnZll5bUJ6eHVvcDNKL2Z6Q3lkUXB5YkN0OXgyZEVtCk5oWjZBOUw0Wmx6QjNjdDJLODdGRzh4TDJVbktjWEp2VTBLNHdINGc1c3Z6eFBmSk1ZUlN5b2ZzT3RjbGxUbWcKVWpZNXdwWHpkM2dFaHhHeTNFWGExVkw1TVFCZEg2dG9TVGlRODlYZ2hEZVl6YjBUVXFxMS9yWkV2OEJ3M2lMcQp5bEgvL0I3NUxQVEloSUJQc0VVUFd2NHdTV1MyWmtrcWY5dXg0a0x6SERjenlsbW1nK3R5U0N3R2VxQ3hWSUZsCnRPOU5rV2pMUmpMaVV3YlRhZko1ZG1ZdWFlbWREekdKOUFVVzAyYVprTWkwcmJLekxMNTVEdW1aTjhzTTBvOWMKL1V4b1BOaXNpRTRBenF6d08vbnY1T2dtaGRXaUM0SitRaDEvZ3dJREFRQUJBb0lCQUhXUURkOXU1eEpYc3ArbApwdklYeGpnTk56M1ZNNGdiTkV2MFBESklvSjVDKzVkYXhFMiszWWc0QnNKdnJ2cVgrbDNaV2c3UXhtdXhqQVA2CkNGR0Y2RnFCMmNTMHBHemRlNHJ3MG5vZ0VSVXl4SlcyMk9lK3VrczNlSnFXNUF6OFNTU0djMDhNN2RubjhPV2oKL01UVDdLbUs0MlN5ZXhUa25uWGllQ3g5ZSt6ejF5d3lUNk5tNDV0QUE3UnRNdWxhd2ZqajBmWGVQbzVvQTdqVgpmN2xHaE5iYWNIS05YelR1REtneUpobkdVaGRRWWNncDdXTmNFa3h2SGkvMmg4SVBwTEE5dWx2SXBLT1JDWTNmCnh6anNYT01UUnMzd2w4R0RPeTFWYlVhRTIvTC9teHNKRU8yMHFrZFYwclBZbFR4T1o4OHBzWFZjT2wvTlpsNSsKWVBNZGo1RUNnWUVBNHZMTHFEUUlYRHlaSngzZTQrVkEvRmY0K2dWR2xuWEkwb3M0M0trZUQwSE5SaUNIRy9mVgpJR1l5bDBvUmo5SnFGUnhUdHlvbTNuZG40bTlrK1BYU2ZtNlpRRlFmQlFyVkY2Vmd4Sm0rdkZmMDhDSW1GUjMyClp3eFU4c1pNMUZ2aHRHMnhRZk44aENiZ0c3bzRkWDgxangxQXZwT2xzS2xxMHphMU9Gc3ptNHNDZ1lFQTkvZDQKS0tjR1UwcjdYMWFRVWp6REI2MXJsRnl0TE1Xd3gxczcxUW5qcXFwMDl3dmYvcTMzWGw5M3BJTWRVZ1BwanhyTAozSjhRSGxnZFBxZGxUK3FEWFJ5eUlaRTRKZyttbjVXZGszZlVmOGZrOXZEM1MwN3crZjBESjFpS293clNTUjNWCm1MNHNtQjNGWFNrUm1YSFFDUU9vZjVLZVhvdlZTdVlYcDRSa2l1a0NnWUFrOU1TVkwyUHRJVEVQWFozZUhvYm0Ka0t6S2lmRmtydWwwMzVieTE5YzlSTW5Za1pOdXlueTZPZW9qR0x5alh2QkhYOFdDSGlzV0x2dUxzL2dOVW5wawpmRDRZYTVwaGg5SUxkN0s2VVE3dVBLUjJOaGxkZHZPWTlEa2hENG1UU3lNRjdwYmUxbmVBVFpSUTc1SWlFQVQ0CnVSckI3ZWtkUzNsSnk2N1c3b01JNFFLQmdHY3M1Q1ZlSWdha1MyWEcrZlFON2tTU2h4SExZZzhnRHNkVWtkZTUKN3E0RGtQbCtTbXlJN0VXclNYZjlTa1RtOWRhaW1yS295S2NubUx1S0lXQ1lQcUtPbnh2U2RkOTRZYWRETkxhNApoSVhLb2QyU05BTjB6RlhvVGRpZ1FjZEhhR29kN05OS1JmbmhZVTY3R09TVTg2L2NnczdhTGVVL0g3ZXpkNkl2Ck56cUpBb0dBYTQ3L2dDZFRZRXB0ZmprTlVlZmpHbEFkQkdBTHY5a1FVVHBWS2QvNXF6aWpRMjFYV2ZWSzZtdG4KMGhmeUZRWXJjdGdPUjRUOUkyY01pVWJGZXdONU8wRTdJRi9WUXZqOFBnR3hRcXBXVXVkRXNiOUZpQWx1ODBhYwpkYzI1Tk5kN3RsaHJ5dTFHck45NnZkRklnUkt0dm41dmMrdXlXZTdkSHhXTVQxWjdtRFk9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUpsdmNzNlE4QXVIaENtanV1SjZBWm93RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl5T1ZvWERUSTJNVEV3TmpJeQpNakl5T1Zvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFwYlg0eFBOL1E0Z3Y5RFYvRjZaNTg1Z2dhdmk1bkk4dUN3eVBPY3U0OXY3Vm52UVoKMGs2Zmt2ZWVOTWZ6c3JzR3QzVDVIV2plYy9aSjZxUEFmc1oxVytBNS9NT2tLWWZJSGdUSDJYdjdFWk83b2tMNwpoVWpPQ1hjcG5OdExULzVOYXpoait6N1lzRWQ1Zm1iK29hRTNuMlhjTnpsOFc3MEtaUXpobjJzMDlmSXFNUGRTCkhuQmp0UDF5N1c2cXlyRWx0Ukl4S3AwN0JYZW9QUTFCbERLWUhFSCtGLzFYNFNRLzNxZGZjdXliT3ExTE4ybWwKSWpHUktCL0NDejZPbU9DdEJ2Skl5SWgzU2Z5ajJuMlhQYkdwZTZVRkpveWRsNTE1ZUJjMzBLVGNKUDBkeVN6RgpSc0xqYkl1cUNvL2JXQ2hER3REa2k2SGtXaG95MlpYOENMLzFwUUlEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGQmhpS3JKL1lEWnZzT1VxekQ0YjBJalVUanFRTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQlgvUkZtdzhKbitiNTZHQmhyVStrL2IyZUFKODg1eE4zR3cwUEVuY21zeTBlbUJ6VTRQR204CnBsdXovRCtkT1huVXI0VmlFUVlmRnBZeFEzbnVIRWRIc2htbzdVaSt3Rktaa3RWWnRablRwQlpUUEhqazd0OSsKWVBmczA0cFVMRjhFUUdEaW9HK2V5WXBaR2IwdW03dndZN1ArSmFsdldHYS9xVTVBL1dpWUFxMG44Q1plOEFpcQpkUm8rc1huREprNU5FTWp3TE9sMUtwWW8xQWM3RmtCKzRQcWRVR0l6QXJlaEVPV2FQOWIyUnZEb3d1cmFpdjNZCmlqcEFnMk9ES1VjZVFpNWF2KzF4UnN1VHBzVDV1dHhKQ1hvT0l1YzVYVVpsWEM5bXhRajM1SGFlbVRrTGZaRTYKL1g2VGFoS1JFd2lpVzU5blpRTlk2NWE0Q2E5NUl4MUwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURURENDQWpTZ0F3SUJBZ0lRUC80Snd6OWkyOHcxZjdsbnl1V2VTVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qSXlNakk1V2hjTk1qWXhNVEEyTWpJeQpNakk1V2pBbE1TTXdJUVlEVlFRRERCb3FMbU14TG1oMVltSnNaUzFuY25CakxtTnBiR2wxYlM1cGJ6Q0NBU0l3CkRRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFOKzh1cDlKOUlIL1FaUHpET2xRb0o2aExocDEKNEZjT1E3VVJnOEFoQms5clI0dG1CVEZzeVArYjBtSjVVN1haZUlhQ2NxNEk3OHg5MnFwRVNqN1hLVk5rQVJoawpaR0tDWmNWVG5BamtsZktRZnd1dVBycVkxRWErNmprbXpBWGdOWWRsaWZVL3BvTW0rdFBHRVBoRWJCazRlbk01CjloTlRxd1Q0bGZDeFkvVllvYTNpb0pKYzRjenVPMGxGbFJNNjd4bXhxbVdZcFlxWWg2eWpxV0Zrd2NpRzZnNzgKaWYxQTVad0FCaVMzUjVHMTdCSnR0cVY4d0I4eHlpcFg4MGRSYldwUVVjSHVkUTducGNVS0plajFpZ211SVJYKwpBQlVPcThxcGpDTzUyUHhSeTRrb093WGJNLyt0N2tZb0pXdFpvK2dYdC9WV3ZuQVp5MzFpSkd6dVRKRUNBd0VBCkFhT0JpRENCaFRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0cKQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVHR0lxc245Z05tK3c1U3JNUGh2UQppTlJPT3BBd0pRWURWUjBSQkI0d0hJSWFLaTVqTVM1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQUd6R2NUWCsxN0lHUndBcXJ3OFd2U0F2WGg2SzFWUDRCQkVvKzhGcENjNUUKNlRWcVpwa0FCbFEraWovMXJMdXVZaUMwejNkRkxMcjVDbldoT1d2Tlc1M2ZzczhoYm9IWWpMOVoyV2ZhNEtoOQpjb3ErYmY1VWkzME1kMWVTOTQ4SHdYbCt4a1YzaHIrR3B5VitSZjlNbVNCMHFTVkJPc3g0RnpidlZHTnNVZzdwCjRMS0JDUkxZSUk4YXZlck5GU3FFMUdNZDdHZFZldjlTdWNFdDJhVTVDQkJub3l2Z0hhVllCY1pudXh1L3c5TEQKV3lzdStpU0d5RTJhZWhUM09wSW1aQ1FyVzlERUpXVGZXcndpQjFCTGlld0xLQU1BUFVlZXFLdXd4aUEvSk5ORwppdkkxbXpVcTZMaEFhTUhhbG5qNTNJV1lIQ0JrcmNDLzF1cWFBNGJTSmRvPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMzd5Nm4wbjBnZjlCay9NTTZWQ2ducUV1R25YZ1Z3NUR0UkdEd0NFR1QydEhpMllGCk1XekkvNXZTWW5sVHRkbDRob0p5cmdqdnpIM2Fxa1JLUHRjcFUyUUJHR1JrWW9KbHhWT2NDT1NWOHBCL0M2NCsKdXBqVVJyN3FPU2JNQmVBMWgyV0o5VCttZ3liNjA4WVErRVJzR1RoNmN6bjJFMU9yQlBpVjhMRmo5VmlocmVLZwprbHpoek80N1NVV1ZFenJ2R2JHcVpaaWxpcGlIcktPcFlXVEJ5SWJxRHZ5Si9VRGxuQUFHSkxkSGtiWHNFbTIyCnBYekFIekhLS2xmelIxRnRhbEJSd2U1MUR1ZWx4UW9sNlBXS0NhNGhGZjRBRlE2cnlxbU1JN25ZL0ZITGlTZzcKQmRzei82M3VSaWdsYTFtajZCZTM5VmErY0JuTGZXSWtiTzVNa1FJREFRQUJBb0lCQUFZQlM4VUF1Q1pSRXBLRgpBSUMyb0VrQnJIb2JWZFVnVmVMalFIVUVyZVd0ekhMS1h6TlBaeW10SmYxc29qbU1SN2JjZzNWMldmRlVJMjFVCmZlV240cjBSUHhKSGg0WTVWNy92R1k0SGpKckJGQmZkS21QWnZFRFYyUFdGdkE0Z1VXOTc0ek1JN1ZBeDJLT2MKZWxJZmpBTTFSOXdWM3l2dm4vUjNNNWNOTzlDVzdvNUprNU1RL083ZWxDZStkR1E2bDk2K3NybHpCa0hpbGJZVApLYVg0ZDdoN3VGV2NneUpJeEdEdG5hbEFqbEh1czlKK0J5U2Zickl0M0ZjZWw4R0lvTHFPeUxkZ3N3b2xkMkJDCmF4NGI1RU9OQTRWRS9LejFPcEhSU2hTalhGeUI2a0U0VmtyMHF1T0s3czNqckM3M1ppQWREYnZoWlJaOXp0SjMKKzhrU2djRUNnWUVBNmZ5TXRCU3pFMUhzck41K0t1aFd0b2pXMFcrK2tublUvSk1JamFsVGlYTkRPRUlINlA3aApFUGN0SzBpQVNkdGNaZmlqZlNBM1ZQUHlBME5lcWRYbUhLbGJVQVBMaHFRbnZDR2ZYVGtsY1VKU05yS1dXcjdTCmROMXVwRUJGWVRTWmJXS25EM28vbEZQQjNpL3RzQ2I1QzM3dm9lSWlieUt3MlJ5d3ZjSGF6Q2tDZ1lFQTlNbFUKZlEremFYK1d1bmZKM245emFrcFZCODFJbEhZVXFwWHB2Um0wdEF2K3ZJV3FKcUJmSnVxdXJRa0NPU3A4TW9pMgpERTh4YndKcTdRa3ZUS0JmTXBtN29CQk44eGk5RWtoOGZBNnpxYXRnSURJanNCMVlGTGY3NXl2ZVJnYU5Vc2RoCjgxTktiOEpjWGZtaU55emNieVl1OHQxV09YMEVDemx0RzJyYUNpa0NnWUVBZzN1NktUdDBnWWZJd2o5b2tIM3MKdERmaTF0Ky9MQm93R0JvYmRWZFFMTzNMT1NMSnhTRHNvaGJ6bDkzdTBSSG1NeHJyNjlVZG9xeE9NNDA0OWFEUAo1UTA1MVpXOFdaV0hDbzJ1T3JseEU5cmJ6Z2ErdkpGOE85VnVaZmdEeEtMRkVKV2VJUEZtSnRpR0dXKy9WZndnCmVGaEZHaWV6aDlYcm9LVWhvQS85L2prQ2dZQXRZcEsycVUyVGR1T0VhU2RWaUgzbXJDZDl6ZEx5Szc2RExrNXIKRURRUDJkVitNSzR1Z1RlREtLb0FUUlpMY1JRYjduc0taemg4STQrZHFVRkt6TVU1eFlVakZVTE9tcnliZ2pNSwpjVk5nVnZUNG96TTR1UWdXdDFJT04zVDd1TVZGSHRDTFk5citRNlFLakhsR0Q1eERRMm9hLzJ5NE5mU2svQjI5Cm9wOFFtUUtCZ0hKOTdxdkF6SXhXSitDQ0xZMnJUTkRYQUoxN2x2Q2htNERNWXAvQjJSdHRoODNXZHdBc3MzaHUKei9vY0FPR3dZSklzOHpPdld6eDdQN3ZTL2VuZW5Ray9Kc2M3QlBPaDlLUGJ4SDN1Z3VCbGt2bnVzRFRUWStlMApsWDNEa3FaL1lsRHI4NHRYQUtPTHh2YjNxNzJMTVJFZk5jS29UUDEwM0MrVkZESmtYL1FnCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c1
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "11"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-wireguard: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.1.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "false"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c1
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.2@sha256:52f70250dea22e506959439a7c4ea31b10fe8375db62f5c27ab746e3a2af866d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          rm -rf /var/run/etcd/*;
          /usr/local/bin/etcd --data-dir=/var/run/etcd --name=clustermesh-apiserver --listen-client-urls=http://127.0.0.1:2379 --advertise-client-urls=http://127.0.0.1:2379 --initial-cluster-token=clustermesh-apiserver --initial-cluster-state=new --auto-compaction-retention=1 &

          # The following key needs to be created before that the cilium agents
          # have the possibility of connecting to etcd.
          etcdctl put cilium/.has-cluster-config true

          etcdctl user add root --no-password;
          etcdctl user grant-role root root;
          etcdctl user add admin-c1 --no-password;
          etcdctl user grant-role admin-c1 root;
          etcdctl user add externalworkload --no-password;
          etcdctl role add externalworkload;
          etcdctl role grant-permission externalworkload --from-key read '';
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/state/noderegister/v1/;
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/.initlock/;
          etcdctl user grant-role externalworkload externalworkload;
          etcdctl user add remote --no-password;
          etcdctl role add remote;
          etcdctl role grant-permission remote --from-key read '';
          etcdctl user grant-role remote remote;
          etcdctl auth enable;
          exit
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=clustermesh-apiserver
        - --auto-compaction-retention=1
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.14.2@sha256:0650beac6633a483261640b6539c9609f5a761f4ab4504fd1e6ffe7f2bb82e9a"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.2@sha256:a89030b31f333e8fb1c10d2473250399a1a537c27d022cd8becc1a65d1bef1d6"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
