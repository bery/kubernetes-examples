---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVArSEhReGRUM3I5ZU55NngweTRhT1F3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl6TUZvWERUSTJNVEV3TmpJeQpNakl6TUZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExWmo3SVJHMk03V2E3c2J5aER3R3p5U2FDREVkeXlVQll1cDVldlc3alhPYjBYUlQKQTFCVDE1akNJd2xtNlJjS0djV2p5MmlLanVhRmREcDNWbFRpQVJTMGJKSzNrSzBQVnZiczE5V2hoWC8zdkRpbQpvVVVTY2NZZWNWSTk5Z0ttcklBUEp0TTdVQ0lqNmlXUE1aLzdaRXFWbjJlZmY1NHc1L3dsVWtEalF3TDg4OFBBCjNac3kxdit6NGk0Uk1GU0tMSE1XK3VoYzhzOE9uSWVtamk1aFFrNTJmL0pMNHUxc0tMNmE4Mjc0azB1bEl2d3AKMDhPZ1MrMEF2dDJReDNMcUJkWUp0ZmJtNkx3Y01qbFNvYUsvRllQWDVmREI2Y2ptN1hTeFJibDJEMEZaTjJxdgoyb2N5TTJtS1MwU2JVYkVGQVFGTUJDemMxTGxNT1JnZXBnQXY3d0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSFA2cFVzRDNvQ3V4L2JpQ0htRVltd1l1N2lSTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ1NtZW4wSld1R1pHcm9pWVN5VnFDRURRUStzaTRTTTZPdnlDWTB4dEd4ZXp2WndJRXpPSFRPCkRxaVBydk91YmdVMzkyQWJUb01CeXFOVzk5Y3BWLzZqSzZqcGg4cjY0OVhUK0Q0Y2pmUDVwWmc4VExreE82Z3QKR2YxeDA5ZXAwMkc1UXg0MW1Oc0VVeFdINU5tbVhSVnVaR1dKcW5UZnF3bVVKMm5xWXQvS09tbE5WRzhiVnVEWgpJaHBuZ1YwcUh4ZDZ5bnZJNnpTZ2JxcEQ4YzFReElQVkJtTWJtMTFlZitpLzZWbm5NNzlPMnR4SU41c1NrQnFBClA0N1gzelN4QzRzcXpWV1QxSmpNSThybC9GR2ZRS1JWcXZSUjVwLytRdHZxSXlIdGNJMkNnWTRXODBPTEJWWGMKS1pSaU40dkpHSFZpOTdiTmtidy9iam5lV21XSGlmNXcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMVpqN0lSRzJNN1dhN3NieWhEd0d6eVNhQ0RFZHl5VUJZdXA1ZXZXN2pYT2IwWFJUCkExQlQxNWpDSXdsbTZSY0tHY1dqeTJpS2p1YUZkRHAzVmxUaUFSUzBiSksza0swUFZ2YnMxOVdoaFgvM3ZEaW0Kb1VVU2NjWWVjVkk5OWdLbXJJQVBKdE03VUNJajZpV1BNWi83WkVxVm4yZWZmNTR3NS93bFVrRGpRd0w4ODhQQQozWnN5MXYrejRpNFJNRlNLTEhNVyt1aGM4czhPbkllbWppNWhRazUyZi9KTDR1MXNLTDZhODI3NGswdWxJdndwCjA4T2dTKzBBdnQyUXgzTHFCZFlKdGZibTZMd2NNamxTb2FLL0ZZUFg1ZkRCNmNqbTdYU3hSYmwyRDBGWk4ycXYKMm9jeU0ybUtTMFNiVWJFRkFRRk1CQ3pjMUxsTU9SZ2VwZ0F2N3dJREFRQUJBb0lCQVFDUDZBTzU0ZTc1bzY4QQpsSFVyOWkwNFBoYXcwamFhZVJJWURKVlA3R015QitQQkdEZ2RrVzhMWUZYYnVTZm1mcWxGZDh6RTdHZjlvdjNpCnNzbFlGdFExbWpkOHR0U0oycTd0RG11L2RxVGVCcnRueWxzcGFCbm5JVzI5TjRXYlMybno2a3RMQXlHQStaOXMKejJWTUw5YjFXUEs1ZE4wVzVBTmJLSndVY0xjc200aTh5KzdxKzh6V29QRkJ4WXdXcGtuVVhuTzYyMXp1ZkRodwpDL2o3MUJOenZNWkwyeE9tRXhVUDZIVnlNYXhSWTR6YUVSempheUNSQlpzMmxnckw0aVRQK0c5Y0tOdHhHMGJjCmRQZWRINWl2YXRSeEJrTkk5TDhyN2VFcEJpb2c1a0o0aENKMnVxVWxYUjZNMnkzekQ0cndwbHFMdWQxbU5LWkEKSUdMR3NxTGhBb0dCQVB5WlBMNndMVWlOUTEvN0pWZnZqV1h3SjZkTlpEZm9nUFFpRVU2bktJV0l5bk9yMEMzdAo2K1FjaVBiK1p5Y1kvZmhIaTh4N1JuSU5XRWd0VzJINkJXTUoyMllIV0ZHOWhKbW9nZEsvSExmd1A4MXlsSCtuCjROZ2VncmIyV3I1NTQzSEVqenFUMVpLa3FCQmkyK2pXeDdiSGltbFFRd2JaeSt6MnlvL3hhNm5KQW9HQkFOaDUKVEhhTUlMOE9kWlVpM1Jic0x6dnNBUDJqSjZLQjZLdDRiajVZczZYOXJLR0FhbGFoYTF3Sk5ZRkxLRkY2Tmg5dgo4ajVQOFZ2Y2c3SnU0RklvamJtSGxjS081MXd2OTRsRDJtejF3L2xDY1k0WkxRbjgxNEtLdTVaV2JKUTR4Yk9aCmRNS2RiM2hYTmVBSU1jOUlXMUMwY1JTckpRYVowdXRqdE9xL0UrZjNBb0dBTEVVM0RqeVdVeWJlN2cxNEtBZEcKQXQycU5Yb3MzRmVWY2pRZVVHaWZnM2ZMODZYaklJbVlWQ3hrSE5YTmdsNnc5RGlsMmJxcFNBZnF0d3VyL21ueApVOEJBZ1lzOEFXZHp1L0o2ZmxNY1YyaDE1aTMwdE1MWmQwY3hwWnRib0JLQXVFbTR5STFzV3YwY3IzS0VGRFRBClg5cHMrYlFsYXlmMHc1MGxOMEVhbTNFQ2dZRUFrQU9pcXZ0dWphekE3UWJVcjN0UnNUdkJMUHh1VWQ2N085aFMKLzRkamZQclc3bHJRWS9IZnlzc1ZuWDZ5eEFIYUgvQUo2UXFtTjhic2xyak00OXUyN2NjV0N1bW5ZZDFIZ1RwegpCaW82eG9rOW9wdDlLemZhNkM0RHZuQ2dxN3RaUzdLN3l2MlNPeTFKMmxHWlVaMkJvcDlvMjZkQWFyUExibTVXCjNoVmcyT0VDZ1lBZi9LU3lnUGNvdGN6WVpUd3hFWjdGWTlQckV3SzBPeTVMcEs3NkhBZW0weFpnTzVTOHg2NU4KQmR3L0ljQy9xMWo2aDk1Yjlnc1piUVNPZVc1aFVzNFpjeU1UeXJER3VzZHFZL1R1aGx3WHJUWGVEQ1lRWUtpZwpBbDFjaFpkU2VEcm1uS3ZyRkx5aDg0Ylg4azBRbzNaT2ZYS0xJUjM2MFo0ZEdaeG1wbnJzRFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/admin-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-admin-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVArSEhReGRUM3I5ZU55NngweTRhT1F3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl6TUZvWERUSTJNVEV3TmpJeQpNakl6TUZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExWmo3SVJHMk03V2E3c2J5aER3R3p5U2FDREVkeXlVQll1cDVldlc3alhPYjBYUlQKQTFCVDE1akNJd2xtNlJjS0djV2p5MmlLanVhRmREcDNWbFRpQVJTMGJKSzNrSzBQVnZiczE5V2hoWC8zdkRpbQpvVVVTY2NZZWNWSTk5Z0ttcklBUEp0TTdVQ0lqNmlXUE1aLzdaRXFWbjJlZmY1NHc1L3dsVWtEalF3TDg4OFBBCjNac3kxdit6NGk0Uk1GU0tMSE1XK3VoYzhzOE9uSWVtamk1aFFrNTJmL0pMNHUxc0tMNmE4Mjc0azB1bEl2d3AKMDhPZ1MrMEF2dDJReDNMcUJkWUp0ZmJtNkx3Y01qbFNvYUsvRllQWDVmREI2Y2ptN1hTeFJibDJEMEZaTjJxdgoyb2N5TTJtS1MwU2JVYkVGQVFGTUJDemMxTGxNT1JnZXBnQXY3d0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSFA2cFVzRDNvQ3V4L2JpQ0htRVltd1l1N2lSTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ1NtZW4wSld1R1pHcm9pWVN5VnFDRURRUStzaTRTTTZPdnlDWTB4dEd4ZXp2WndJRXpPSFRPCkRxaVBydk91YmdVMzkyQWJUb01CeXFOVzk5Y3BWLzZqSzZqcGg4cjY0OVhUK0Q0Y2pmUDVwWmc4VExreE82Z3QKR2YxeDA5ZXAwMkc1UXg0MW1Oc0VVeFdINU5tbVhSVnVaR1dKcW5UZnF3bVVKMm5xWXQvS09tbE5WRzhiVnVEWgpJaHBuZ1YwcUh4ZDZ5bnZJNnpTZ2JxcEQ4YzFReElQVkJtTWJtMTFlZitpLzZWbm5NNzlPMnR4SU41c1NrQnFBClA0N1gzelN4QzRzcXpWV1QxSmpNSThybC9GR2ZRS1JWcXZSUjVwLytRdHZxSXlIdGNJMkNnWTRXODBPTEJWWGMKS1pSaU40dkpHSFZpOTdiTmtidy9iam5lV21XSGlmNXcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLRENDQWhDZ0F3SUJBZ0lSQUs2VFh5NkVUUHVNYko3TlJneGxMTWd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl6TVZvWERUSTJNVEV3TmpJeQpNakl6TVZvd0V6RVJNQThHQTFVRUF4TUlZV1J0YVc0dFl6SXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRHJiYng0Zkp3cENzbTFzdXJYUE8yTXloYW9wMkRUaEhtekFOeVpCWUtNWXhzc3RsRysKbEZNU1B4Rjlzek0zMzEwVmFWejc3eTU1RjluYllCcXpyNmJpUktSdktnOWRrSVRyaEIvYkEva25FdlRaVytHZgpvMUlMRmZwanBkSHBGRndQWXlpNm9EMEd3YzFkbnpwdTBvVDFFNDdoWDNFQXNuVTh5OWtxdHFLUGVhQURVMG5UCjRNMWNOdGR4bXN1NVNUOUwrM0Q1TmV3eS9DRm55UktsYmF2SFZ0VzAvSndzNG5abnB4WGFnK2pnTU1wcmRRNGEKblRTaEJUVXo3R0xlbkhNaVpyNzZkZ0pTMDFmenhzTnlGQ2FJU3diZmhjZUw2a3lxQ2RnRE5MZUpycEk5ZlRLcAowcG1STUNUeEFtb2UzWXBYa1h1bU1wd3F0QU5ROFMrZnplTFpBZ01CQUFHamRqQjBNQTRHQTFVZER3RUIvd1FFCkF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXcKQURBZkJnTlZIU01FR0RBV2dCUnorcVZMQTk2QXJzZjI0Z2g1aEdKc0dMdTRrVEFVQmdOVkhSRUVEVEFMZ2dscwpiMk5oYkdodmMzUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBTU1vdDZDMlpuZTUweGhIOHF2M1FrbUhUY29qCit6MllqTDBxdW4zVGtVWUE3cy9EdjJTYVdQT1Bqa1ZHVXlPbWZXQXNueDRmOTQ1Q1lPNFdxazlXb290ME9pWWIKNUxEcjlnYlRFd28wcmRyL2thNXo0S0wwRlIwR09tMmpoUi9FOWlHS1h6OGJUczEzclcyK0ttUXdweitZTFhITwovRlNacXRiZ2I3Vml6TnhueTFGR1JCN1dFRDVRb0s3VDZKS0FIdXZwc3A3QWJBeDQ3ckVCVHJQVkJrV0E0NndCCmRNS0MyR2VuTkY3cTdYeFlqUWo1MndvSmZhWmpYZ2F3ZUFFZHZZcWRnVlNtOVBNb1hqZkkrdnQzRFUwZGNCTlEKZUJPTG0yUkZWbUE4NTJoZ0c1bFhtRzd5ditFZmk5VkRXWmhwYUl5S2hKaFlLTG9DWmJFOWtpZHh2c0k9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNjIyOGVIeWNLUXJKdGJMcTF6enRqTW9XcUtkZzA0UjVzd0RjbVFXQ2pHTWJMTFpSCnZwUlRFajhSZmJNek45OWRGV2xjKys4dWVSZloyMkFhczYrbTRrU2tieW9QWFpDRTY0UWYyd1A1SnhMMDJWdmgKbjZOU0N4WDZZNlhSNlJSY0QyTW91cUE5QnNITlhaODZidEtFOVJPTzRWOXhBTEoxUE12WktyYWlqM21nQTFOSgowK0ROWERiWGNackx1VWsvUy90dytUWHNNdndoWjhrU3BXMnJ4MWJWdFB5Y0xPSjJaNmNWMm9QbzREREthM1VPCkdwMDBvUVUxTSt4aTNweHpJbWErK25ZQ1V0Tlg4OGJEY2hRbWlFc0czNFhIaStwTXFnbllBelMzaWE2U1BYMHkKcWRLWmtUQWs4UUpxSHQyS1Y1RjdwaktjS3JRRFVQRXZuODNpMlFJREFRQUJBb0lCQURNdDlPWGdlUFkzSVNoOQp6NjJnMGlka0cwN29yQlR2WEtGOFUzaDBpUy9KcjdPbG90bWlWdmpGZXlEdlh2Z0xkNm5hOE5yWDRTdHo4dWxNCjJDRXQwMEtuRjNRUEdhNEdaODduTnlHZW1JQlZENk5jNVF5V0xaUzVYMmhnT09USmgwWFZFWnFZa1F1eC85b1YKYmxkL0xtWTByVC96UnBhWE5RTlZjVTFtektvUnBOcEkrN3lNaFVWNnlLcVBYRGM0bFplSTBibG5Qb2ZkWTNMSgpjb0U0RXhSd1UxVHh5NXNFQi9oSzJkaFd1dzBaaXo0VWJEblhGZFZIQi9kMHJIWmVtVTljT1pQUGd1VGVxdWcvCm9YTzFoWlc5dDVYa3hiY0xwNi9BaWdKT3RMR3UwRGNiaERsSm03THRhNys4UU5ONkJQM1JYcG5EYWhES29oNXMKeDRzNnhlMENnWUVBN1lDUC9GUHN4bGtpbFlWanh5bUFKRkJGM3VMSGM0UDF3eENMdEMzdHd5YnQ2N2Q0dWo3YgpUR1NCWEdVWlhtVU5xWGtsVWZKVVo4ZWtvVlBpcjg1S3dOUjB0VHpPRU1kYlpXNDNXeVMyemt2dW00SzRRY28zCkJZVWRyVDRhaElIcVJkRFpYOVprRnNsTmd4U1IvVVVMNXpObnJsVW1NVW5mbG5selllYkNzQmNDZ1lFQS9jUFUKbXkvWUczWGN0ckh4SkQ5OHNCcHlRVm1ydzRvUWtiRXhZTzg3ak9lNFpNaVR2Uy9zKytZWVh3bHAraFp1RWVuYQpybkZKSEkwL0Q4ZE5MR001di85U280MWZYNDl0OWZTTEMrSVM4dkVINDRhekN5MXZGMjRXUmFMSmlhKzJDSUVPCnBEZjROSWtWSVU5cnVhd0FZaWJESTZ2NFJ4UzErRWNkWWxkOGFvOENnWUFIZThLTnI5TkpHS3ZuVERHdHA5Z2EKek5DMnlpeUFya3JESDdWWE13OUgwK1V4UlRHdnBLVmlUZFJwcGVIYndKRmlvcWVUWW5CWWFNaitNRmQzTktmVQpWWjFyeklPdHNhcG1rc2Q1dnJsbjNLcWpDY1ptaEVtaGllVTZmVGQycjJWRFYrWlJoNzdWblBndFJpdW5jRktFCnNYRDE1RWIwektBWDdMRy9CdmRoZHdLQmdRREJDQUhsdWxNdE1FNmdPbU13SzRyeGVteUhBV3NDNXpjTFhEb3YKZmt0U044R3dDRk01aWdjKzVoeUx6bUZxOXp6ckszUkpWYXREcUwzYmhzTlJqSGtWYjJheE9vemQ2QURCSXkvUgo3anB6eXAweG1mai8rNk9Sc3hBR0VIbzEzZzhlRU8zT1JUVHM0WW5OT05pODkvV2lzOUdraE4vclVmbkp6bTZ2CnE5VGNTUUtCZ1FDMzEwMlJXdFRyaU9uWU5JUTd3aDdOK0hqSnJYcnozNU8zV3ZQaXZyZURnM09qUXh6YmNQUzYKcHIva08xN1pvTWJJUTdCcnNoMG94dzEya1pXNzVrd09pQ3QxTUFYUkljWC9VS3hmQXJ6bm1pQUdHWTNnS1RBdwpqWTl5VFZhc2pjZWJtbk83azNraFI2UVlQeEZydmFIVmg2MyttVkxpQWVVVWMwSkJ4aEFLaGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-ca-cert
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVArSEhReGRUM3I5ZU55NngweTRhT1F3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl6TUZvWERUSTJNVEV3TmpJeQpNakl6TUZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExWmo3SVJHMk03V2E3c2J5aER3R3p5U2FDREVkeXlVQll1cDVldlc3alhPYjBYUlQKQTFCVDE1akNJd2xtNlJjS0djV2p5MmlLanVhRmREcDNWbFRpQVJTMGJKSzNrSzBQVnZiczE5V2hoWC8zdkRpbQpvVVVTY2NZZWNWSTk5Z0ttcklBUEp0TTdVQ0lqNmlXUE1aLzdaRXFWbjJlZmY1NHc1L3dsVWtEalF3TDg4OFBBCjNac3kxdit6NGk0Uk1GU0tMSE1XK3VoYzhzOE9uSWVtamk1aFFrNTJmL0pMNHUxc0tMNmE4Mjc0azB1bEl2d3AKMDhPZ1MrMEF2dDJReDNMcUJkWUp0ZmJtNkx3Y01qbFNvYUsvRllQWDVmREI2Y2ptN1hTeFJibDJEMEZaTjJxdgoyb2N5TTJtS1MwU2JVYkVGQVFGTUJDemMxTGxNT1JnZXBnQXY3d0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSFA2cFVzRDNvQ3V4L2JpQ0htRVltd1l1N2lSTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ1NtZW4wSld1R1pHcm9pWVN5VnFDRURRUStzaTRTTTZPdnlDWTB4dEd4ZXp2WndJRXpPSFRPCkRxaVBydk91YmdVMzkyQWJUb01CeXFOVzk5Y3BWLzZqSzZqcGg4cjY0OVhUK0Q0Y2pmUDVwWmc4VExreE82Z3QKR2YxeDA5ZXAwMkc1UXg0MW1Oc0VVeFdINU5tbVhSVnVaR1dKcW5UZnF3bVVKMm5xWXQvS09tbE5WRzhiVnVEWgpJaHBuZ1YwcUh4ZDZ5bnZJNnpTZ2JxcEQ4YzFReElQVkJtTWJtMTFlZitpLzZWbm5NNzlPMnR4SU41c1NrQnFBClA0N1gzelN4QzRzcXpWV1QxSmpNSThybC9GR2ZRS1JWcXZSUjVwLytRdHZxSXlIdGNJMkNnWTRXODBPTEJWWGMKS1pSaU40dkpHSFZpOTdiTmtidy9iam5lV21XSGlmNXcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMVpqN0lSRzJNN1dhN3NieWhEd0d6eVNhQ0RFZHl5VUJZdXA1ZXZXN2pYT2IwWFJUCkExQlQxNWpDSXdsbTZSY0tHY1dqeTJpS2p1YUZkRHAzVmxUaUFSUzBiSksza0swUFZ2YnMxOVdoaFgvM3ZEaW0Kb1VVU2NjWWVjVkk5OWdLbXJJQVBKdE03VUNJajZpV1BNWi83WkVxVm4yZWZmNTR3NS93bFVrRGpRd0w4ODhQQQozWnN5MXYrejRpNFJNRlNLTEhNVyt1aGM4czhPbkllbWppNWhRazUyZi9KTDR1MXNLTDZhODI3NGswdWxJdndwCjA4T2dTKzBBdnQyUXgzTHFCZFlKdGZibTZMd2NNamxTb2FLL0ZZUFg1ZkRCNmNqbTdYU3hSYmwyRDBGWk4ycXYKMm9jeU0ybUtTMFNiVWJFRkFRRk1CQ3pjMUxsTU9SZ2VwZ0F2N3dJREFRQUJBb0lCQVFDUDZBTzU0ZTc1bzY4QQpsSFVyOWkwNFBoYXcwamFhZVJJWURKVlA3R015QitQQkdEZ2RrVzhMWUZYYnVTZm1mcWxGZDh6RTdHZjlvdjNpCnNzbFlGdFExbWpkOHR0U0oycTd0RG11L2RxVGVCcnRueWxzcGFCbm5JVzI5TjRXYlMybno2a3RMQXlHQStaOXMKejJWTUw5YjFXUEs1ZE4wVzVBTmJLSndVY0xjc200aTh5KzdxKzh6V29QRkJ4WXdXcGtuVVhuTzYyMXp1ZkRodwpDL2o3MUJOenZNWkwyeE9tRXhVUDZIVnlNYXhSWTR6YUVSempheUNSQlpzMmxnckw0aVRQK0c5Y0tOdHhHMGJjCmRQZWRINWl2YXRSeEJrTkk5TDhyN2VFcEJpb2c1a0o0aENKMnVxVWxYUjZNMnkzekQ0cndwbHFMdWQxbU5LWkEKSUdMR3NxTGhBb0dCQVB5WlBMNndMVWlOUTEvN0pWZnZqV1h3SjZkTlpEZm9nUFFpRVU2bktJV0l5bk9yMEMzdAo2K1FjaVBiK1p5Y1kvZmhIaTh4N1JuSU5XRWd0VzJINkJXTUoyMllIV0ZHOWhKbW9nZEsvSExmd1A4MXlsSCtuCjROZ2VncmIyV3I1NTQzSEVqenFUMVpLa3FCQmkyK2pXeDdiSGltbFFRd2JaeSt6MnlvL3hhNm5KQW9HQkFOaDUKVEhhTUlMOE9kWlVpM1Jic0x6dnNBUDJqSjZLQjZLdDRiajVZczZYOXJLR0FhbGFoYTF3Sk5ZRkxLRkY2Tmg5dgo4ajVQOFZ2Y2c3SnU0RklvamJtSGxjS081MXd2OTRsRDJtejF3L2xDY1k0WkxRbjgxNEtLdTVaV2JKUTR4Yk9aCmRNS2RiM2hYTmVBSU1jOUlXMUMwY1JTckpRYVowdXRqdE9xL0UrZjNBb0dBTEVVM0RqeVdVeWJlN2cxNEtBZEcKQXQycU5Yb3MzRmVWY2pRZVVHaWZnM2ZMODZYaklJbVlWQ3hrSE5YTmdsNnc5RGlsMmJxcFNBZnF0d3VyL21ueApVOEJBZ1lzOEFXZHp1L0o2ZmxNY1YyaDE1aTMwdE1MWmQwY3hwWnRib0JLQXVFbTR5STFzV3YwY3IzS0VGRFRBClg5cHMrYlFsYXlmMHc1MGxOMEVhbTNFQ2dZRUFrQU9pcXZ0dWphekE3UWJVcjN0UnNUdkJMUHh1VWQ2N085aFMKLzRkamZQclc3bHJRWS9IZnlzc1ZuWDZ5eEFIYUgvQUo2UXFtTjhic2xyak00OXUyN2NjV0N1bW5ZZDFIZ1RwegpCaW82eG9rOW9wdDlLemZhNkM0RHZuQ2dxN3RaUzdLN3l2MlNPeTFKMmxHWlVaMkJvcDlvMjZkQWFyUExibTVXCjNoVmcyT0VDZ1lBZi9LU3lnUGNvdGN6WVpUd3hFWjdGWTlQckV3SzBPeTVMcEs3NkhBZW0weFpnTzVTOHg2NU4KQmR3L0ljQy9xMWo2aDk1Yjlnc1piUVNPZVc1aFVzNFpjeU1UeXJER3VzZHFZL1R1aGx3WHJUWGVEQ1lRWUtpZwpBbDFjaFpkU2VEcm1uS3ZyRkx5aDg0Ylg4azBRbzNaT2ZYS0xJUjM2MFo0ZEdaeG1wbnJzRFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/remote-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-remote-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVArSEhReGRUM3I5ZU55NngweTRhT1F3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl6TUZvWERUSTJNVEV3TmpJeQpNakl6TUZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExWmo3SVJHMk03V2E3c2J5aER3R3p5U2FDREVkeXlVQll1cDVldlc3alhPYjBYUlQKQTFCVDE1akNJd2xtNlJjS0djV2p5MmlLanVhRmREcDNWbFRpQVJTMGJKSzNrSzBQVnZiczE5V2hoWC8zdkRpbQpvVVVTY2NZZWNWSTk5Z0ttcklBUEp0TTdVQ0lqNmlXUE1aLzdaRXFWbjJlZmY1NHc1L3dsVWtEalF3TDg4OFBBCjNac3kxdit6NGk0Uk1GU0tMSE1XK3VoYzhzOE9uSWVtamk1aFFrNTJmL0pMNHUxc0tMNmE4Mjc0azB1bEl2d3AKMDhPZ1MrMEF2dDJReDNMcUJkWUp0ZmJtNkx3Y01qbFNvYUsvRllQWDVmREI2Y2ptN1hTeFJibDJEMEZaTjJxdgoyb2N5TTJtS1MwU2JVYkVGQVFGTUJDemMxTGxNT1JnZXBnQXY3d0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSFA2cFVzRDNvQ3V4L2JpQ0htRVltd1l1N2lSTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ1NtZW4wSld1R1pHcm9pWVN5VnFDRURRUStzaTRTTTZPdnlDWTB4dEd4ZXp2WndJRXpPSFRPCkRxaVBydk91YmdVMzkyQWJUb01CeXFOVzk5Y3BWLzZqSzZqcGg4cjY0OVhUK0Q0Y2pmUDVwWmc4VExreE82Z3QKR2YxeDA5ZXAwMkc1UXg0MW1Oc0VVeFdINU5tbVhSVnVaR1dKcW5UZnF3bVVKMm5xWXQvS09tbE5WRzhiVnVEWgpJaHBuZ1YwcUh4ZDZ5bnZJNnpTZ2JxcEQ4YzFReElQVkJtTWJtMTFlZitpLzZWbm5NNzlPMnR4SU41c1NrQnFBClA0N1gzelN4QzRzcXpWV1QxSmpNSThybC9GR2ZRS1JWcXZSUjVwLytRdHZxSXlIdGNJMkNnWTRXODBPTEJWWGMKS1pSaU40dkpHSFZpOTdiTmtidy9iam5lV21XSGlmNXcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lSQVBiTkJPY0xJV1VNZEx3ODJaWk9TWTR3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl6TVZvWERUSTJNVEV3TmpJeQpNakl6TVZvd0VURVBNQTBHQTFVRUF4TUdjbVZ0YjNSbE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQXg5UC9SZWMvV1p3bzBhbDRaamZGbmRReWVnbzNxVUhHV0hDb2pqYzI2b2FsdS9va3ZxUHUKUUJIYXNCZS9IeTlPVjZUMk5xRXFaZGJLdkl1Sk10UDBhZVc2TVE4bXc2eis4S2J6NGlSNGJoZnJJZ05oWG9aegp1dDkzOWE1aUtWOWhYVHBvQzB1VUdiL0dGZlNlSFJvRHpiRTJ6b2RpeUh5NDY2Uk9pb01PZGxlb2Z3eFBtWjZ1CkdPRGdkdGtNQjJ0UmZtVnBydUtnQ01YeGZISk12aHRBd2pueE9yekZjL25NR2hkd3lGSU1hdEgrK24vQWFuMjgKQStXaXVhdGVTdDVSeWloVk9XZjFXU09sNFdnbDNjT1dSUktzazBMYlJZenVuWHR2OWpGVGQ0ZzJOVDB3V1JMcApzMG9MdXFvYzRNT3VFRzNwMWNxcGp3Q253cFNIN2VDY2pRSURBUUFCbzJBd1hqQU9CZ05WSFE4QkFmOEVCQU1DCkJhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVWMvcWxTd1BlZ0s3SDl1SUllWVJpYkJpN3VKRXdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUt2UjhleGFxSlJ4NUQvcGRjdXcxeTBta01LaDZPU1RsSEI4dlMvU1lJNnhZWGE4NTlnbmc0cUFCL01VClFCc0FHdDBuUmpad1cyOUttUjJpajI4amM3a2g1dTIyTnBTeTRwbHVwbUF5MS9sV0V2MjlTL293QUpGaVppb2UKUG5EZjIrVU1ONWNtbmtFbE9VUlJRc0JBOVFFMlA4OC81NGplNGYxWDlBQkh1UnNWMjRvOVJMS0NjOFp5SUFXMQphbkp5OFFaTmtXaWc1RjBPQmZrTlVPVENBUFROS3FGRnFvbTJjaHNOQ1dQQ2lLVVA1N05PUS9SbUFwSTZHay9kCnJTMDVFUlIvYU92RWhZd3FxcWlqL0RWZFAyVHlqS3FPbHdtR1kxbmlleEhDMlp5VVVhOXUvUkIvMlpzbHFSbnQKbDdiWjI4ckpSSDNBM0lLM0JZLzlRbXZWMG9VPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBeDlQL1JlYy9XWndvMGFsNFpqZkZuZFF5ZWdvM3FVSEdXSENvampjMjZvYWx1L29rCnZxUHVRQkhhc0JlL0h5OU9WNlQyTnFFcVpkYkt2SXVKTXRQMGFlVzZNUThtdzZ6KzhLYno0aVI0YmhmcklnTmgKWG9aenV0OTM5YTVpS1Y5aFhUcG9DMHVVR2IvR0ZmU2VIUm9EemJFMnpvZGl5SHk0NjZST2lvTU9kbGVvZnd4UAptWjZ1R09EZ2R0a01CMnRSZm1WcHJ1S2dDTVh4ZkhKTXZodEF3am54T3J6RmMvbk1HaGR3eUZJTWF0SCsrbi9BCmFuMjhBK1dpdWF0ZVN0NVJ5aWhWT1dmMVdTT2w0V2dsM2NPV1JSS3NrMExiUll6dW5YdHY5akZUZDRnMk5UMHcKV1JMcHMwb0x1cW9jNE1PdUVHM3AxY3FwandDbndwU0g3ZUNjalFJREFRQUJBb0lCQVFDUzZ0THNXakRCZVlhcApYNmdkdnpPVDdzZU40cVU1MUJvNE85d3hjM2IweHpwakVtNmhtM1UzdGVqTFB5cE5pMEpXUGZxbi82WmthWjkxCk1FSVhGSzdHalJodnFXd2V3YnBPeFBEYWUyWHZ5N1ljczgrSzU5OStyWDVOSzRFUVdnZ0R1MFZ6eUlXQ3lQU2kKZjg4Z0psaFZpczE0MnlGTnRpVmZXdFpFRUVjNXlidjZtWC9IL0I2N0d4MURMZDQxZ0ZTdGRIN2hqODNYTWl4Ygo0ekdnb2c3dE04SnNUcklwS0xENlJvWS80MW9oaHlmNThLSjh3U25yMWZwMzcwUit6RHdBcnQ3by84TzRQaVVHCjRkUDNyYVZvNXhUNEM3N3huZ2hqR08ySFIxMm05ckFXaElCRUV0MnBaKzZ3dkhkVlhST2RiSEtZY3hzTzA3UmgKRnNCU0JPRWhBb0dCQU5WaVcycEMyd1ZHT3kwUjRMK3VmTDdBYVlkMThSNTh4cFp4NmxjS3h1aWttL2IwQ0hDTworeXFMY2xXd3hiMFZtNlpBUVBMekxIRGppbzZHVjFQNDNzcnVDMnQwQ2VlOXU4N3d1NHVERktBZm1OczZ6NnN3ClBydjNDQXVRRFJYbnBOTkFHTVhHbkl5QVk1K29mcS9OZWx4L0VzQ0hobXJCa3ZQR2E4TXNOcVBIQW9HQkFPKzgKajVwUDI2TnQwWkFLVmRkeHVDZ25qcFZpMFFsUEljNnBYck9yLzg1K0ZoaGVWSjhRZGZoZ1owMTNvL2xIaE8yUgozUkFnTlQ5L0RmeHp0bFB5Y2lUOWRvNUMySEJYMjNiYTREclhJRFQ1Z015M25LMUZUdWptZEZMdHlaaW9ETDlyCkJmS1V2YTBWU2FyNUUxNWIvS0w5M2loakd3cGlsS2wyQ3hmdXBkVUxBb0dCQUk0bW52V1VJaXBLVmlPNU5Ec2QKdDNhdjRkMWZBY2tvb0hjYTNsMHNEY1J2M0lMUW9VcXl4Ym5hK2NrQ0lVak11MHN1cE5YMGo1ZUl6Z1lTa3R5YQovM2k2eWhyRVM5RDVBY05qZGQwRDd0cVpFaENDQmxScHFIRTVxVDlpc0lUMk0wU1QvNnpKbWdLemlTcVVhZ2tkCjNyVDk1blVpRTdiTXkrUGdQR3ZoNldpREFvR0JBTTJreU9ZTXBKSnZESGxyZERFbjJsbVBmUTZGd2x3aTVoUVoKVXlQNllhY21ueHR1SjFaK3owTXNwdEJiMVd0cXZ3cnV1VnN3MVp4UEI1ZExSdGFCdlFvZjVjZW9iWE1JMmpmOQpEcVZLamRVRFJVbldJdTY2NmpKOEpNSlNPVURhdm55Z2VHeWF6STJoR2gwd0pUNG0xL0tVcERHdXVhNVIyOFgxCmZSU2RZT0Q3QW9HQkFLRUFPK3NoWmhnRUY0UGw4TVJRMzFFeGtiV1VYUEw2UWRTQ1FyVGcxd2xyR3gwbkRWK3UKYzFUdld0OE1oZFk5MVcxVm5nS3ZEVE1HNGx1VUVXM09iMVFTODV5K3E4NzNYbGJUUW50Y2tSY29iQ1IvNzlaRwp4TDNINTVQRVROa2xFdHZGb2FEMW0zVitMQ3FyY3B2YXQvbTY4VDNhaG84TXBFSmVrNVdJZVJGZwotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/clustermesh-apiserver/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: clustermesh-apiserver-server-cert
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVArSEhReGRUM3I5ZU55NngweTRhT1F3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl6TUZvWERUSTJNVEV3TmpJeQpNakl6TUZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExWmo3SVJHMk03V2E3c2J5aER3R3p5U2FDREVkeXlVQll1cDVldlc3alhPYjBYUlQKQTFCVDE1akNJd2xtNlJjS0djV2p5MmlLanVhRmREcDNWbFRpQVJTMGJKSzNrSzBQVnZiczE5V2hoWC8zdkRpbQpvVVVTY2NZZWNWSTk5Z0ttcklBUEp0TTdVQ0lqNmlXUE1aLzdaRXFWbjJlZmY1NHc1L3dsVWtEalF3TDg4OFBBCjNac3kxdit6NGk0Uk1GU0tMSE1XK3VoYzhzOE9uSWVtamk1aFFrNTJmL0pMNHUxc0tMNmE4Mjc0azB1bEl2d3AKMDhPZ1MrMEF2dDJReDNMcUJkWUp0ZmJtNkx3Y01qbFNvYUsvRllQWDVmREI2Y2ptN1hTeFJibDJEMEZaTjJxdgoyb2N5TTJtS1MwU2JVYkVGQVFGTUJDemMxTGxNT1JnZXBnQXY3d0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSFA2cFVzRDNvQ3V4L2JpQ0htRVltd1l1N2lSTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ1NtZW4wSld1R1pHcm9pWVN5VnFDRURRUStzaTRTTTZPdnlDWTB4dEd4ZXp2WndJRXpPSFRPCkRxaVBydk91YmdVMzkyQWJUb01CeXFOVzk5Y3BWLzZqSzZqcGg4cjY0OVhUK0Q0Y2pmUDVwWmc4VExreE82Z3QKR2YxeDA5ZXAwMkc1UXg0MW1Oc0VVeFdINU5tbVhSVnVaR1dKcW5UZnF3bVVKMm5xWXQvS09tbE5WRzhiVnVEWgpJaHBuZ1YwcUh4ZDZ5bnZJNnpTZ2JxcEQ4YzFReElQVkJtTWJtMTFlZitpLzZWbm5NNzlPMnR4SU41c1NrQnFBClA0N1gzelN4QzRzcXpWV1QxSmpNSThybC9GR2ZRS1JWcXZSUjVwLytRdHZxSXlIdGNJMkNnWTRXODBPTEJWWGMKS1pSaU40dkpHSFZpOTdiTmtidy9iam5lV21XSGlmNXcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURwekNDQW8rZ0F3SUJBZ0lRZDV2MFIyNWJteHcydVpvMlU4aHdpekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak14TVRBM01qSXlNak14V2hjTk1qWXhNVEEyTWpJeQpNak14V2pBcU1TZ3dKZ1lEVlFRREV4OWpiSFZ6ZEdWeWJXVnphQzFoY0dselpYSjJaWEl1WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdktyV0wxTEVrZ3Q1UWJhV09SNU0KM0JRN3doS09FbkZnOFByVTNFSVJwV1BxTDZEdmcxNmpZVE9JeU5EREJsdjFrS2F4aG50YVN1dUVVVU5aTXZJRwoyUTVhcFAxS29VT2JtcmIyRzRLZEdGMkl1UVNpMHJ1TlAxajZoTkwxVWk3TGxuNUdzbmhKTnBZMkFEdnJLNS9SCndUbHcxbVhHaTgremVraFpXOFNtMktVbEVSbkVPbTNNTUhueFJiYTJtcmxDNis2T0JmRVZDZjMvQWk0a2VXN20KOTE3b0hyaGFWRkRNME5UYlFtQU5SZ1p1UXFPTzNEMlRwQnlRSTNxaVVRcjlsNUhiSWtocTFhQU5reGZtN1dqMgpyQTVTMTNGVzVHbGJjV1JMVnNjMHl1b2tNZitSTE5naFNvbEcycnVwdUZsRFFhSDJ5NmpkamJuRUFIRUVzdnJPCmZRSURBUUFCbzRIZU1JSGJNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JSeitxVkxBOTZBcnNmMgo0Z2g1aEdKc0dMdTRrVEI3QmdOVkhSRUVkREJ5Z2g5amJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXVZMmxzCmFYVnRMbWx2Z2hBcUxtMWxjMmd1WTJsc2FYVnRMbWx2Z2lWamJIVnpkR1Z5YldWemFDMWhjR2x6WlhKMlpYSXUKYTNWaVpTMXplWE4wWlcwdWMzWmpod1IvQUFBQmh4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQk1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUFDQTlXU2ptWXhPRFBQVjBXSDlxS3oyOWlmbldXdTJCWjRrZjlpTzVvdVdDb3N0RUQyCjh3S1Rnb1ZUVG1wWEtmNXY2WFJQOEgxWjE0VlQ4WkhDUUJFMXVqUWZMQ1pReEJVTVBpS3d2TU5vVWhGSG4wdlUKallMd0ExYlNvcUVrZ2x1aTIwNjFZeDZaRjY0bkwvaFlsZnJ2Vlg3dlpHcVdPcnRtZ0VPMkVLellLOHpYdVlpUQpMTG5ZSGpHOGN0ZE41c3UrZzVBMFBnd0dadDBiZUFWUlU5Ykd1dkpqMWtHNXBDcWtOcERtUlQwbU5YVXF3YUpVCkg2SWVCOUhPd0srcjIvTGxzQkZBZXFjYWFBN291SzZDandCYVh5WnJSYnU1NXVHZ1NSTVJROTFMaDlFOXZMR0cKdUNvTElQWDlub0tSNzhSclJrQVNyVCt5OEdoYWhRakRTU3dJCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdktyV0wxTEVrZ3Q1UWJhV09SNU0zQlE3d2hLT0VuRmc4UHJVM0VJUnBXUHFMNkR2CmcxNmpZVE9JeU5EREJsdjFrS2F4aG50YVN1dUVVVU5aTXZJRzJRNWFwUDFLb1VPYm1yYjJHNEtkR0YySXVRU2kKMHJ1TlAxajZoTkwxVWk3TGxuNUdzbmhKTnBZMkFEdnJLNS9Sd1RsdzFtWEdpOCt6ZWtoWlc4U20yS1VsRVJuRQpPbTNNTUhueFJiYTJtcmxDNis2T0JmRVZDZjMvQWk0a2VXN205MTdvSHJoYVZGRE0wTlRiUW1BTlJnWnVRcU9PCjNEMlRwQnlRSTNxaVVRcjlsNUhiSWtocTFhQU5reGZtN1dqMnJBNVMxM0ZXNUdsYmNXUkxWc2MweXVva01mK1IKTE5naFNvbEcycnVwdUZsRFFhSDJ5NmpkamJuRUFIRUVzdnJPZlFJREFRQUJBb0lCQUJXeEVxVW9QLytHb0M5awovY3FkYURyWmZMRm9qcnNpSEFJNDVLWmFWa3NNdk0wekZMYW05K1BpRi9UMnc2V0VoeXhWYmczSE91OW9Pck5aCktmVklqRzhDVG51dnY1ZmcvUkFCdnpRVWhWbGF6N0J1RHdacGwralRveUlJV3pwU3RRZWRoeVZYM1JzUWxDN2MKdE1JMFF0cVRieHpIWU5lTVR0ZGRZQ0REOEdieUN6UGVTTjBuNFMyMGpJM0FIN2pUMFB6cnZCZkExN1FOTjExQgpDdldRK2drL0xuZm80NnQ4YWdSNGo2ODYrbVJVZ2xweGp4OW1oZGVMbHpuN09jVWxVTWtBL3NuNlQ3cVVQYU1UCmNFS1VZMGZRc29KdVFOaXpzQS9jUUZBOTdaV0dyTU1WK094dzNrR0NyY3VxNWlmdCt6NFMwb1dKUnRmLzBuWjMKdFNpTWtTVUNnWUVBelJzckxjYitqNUNFWFRnSjAvaWMzTXJ2WWRVd2YrM3VDM1IyZkRkelpFRXJSelVlSldOcwpVUjdhQ3JRcUNtdmh5RFNUT2JCV0FXbnRGWWZHQUwzYVo2SS9vK3BxeUtrVHhaMXVJbVFsdktPZWtCSlNrL29jCld0dklaWVlCRHptc3VhMzBGOWNMdlpVT0Zjd3BDTHlBMUo3UzQxaVUrWXhmdHRza1Jhb3E4OGNDZ1lFQTYzdHYKczNOT3JYZ2R1a3lCY3cvTUZyMGV6WHh6UmpsSWlndkFBZitaRUs5TUlsSEJ4SW9tWUkya0d4RzlKRVhZdWN1LwpmTW1YOWNWbVFRa1d5dkdSbnI4MDc3eDNSd1g4MVF2UDZQVGZhZHpRVGw0MzloVXhXdFkzNTIzM2xnSXB6WWJGCmxtZE5iNThHcm9PWG9RNjdFblhrVzZJOTFpc00yRTRaQSswekk1c0NnWUFsbUo1UWxOSmlwSDN1ekcvWXdCQ1kKMUVZTzY5SXBFUWI2YUkyemRVS2NsT21HOHZDa3I5WFNCTks0OVk5ak82VTJXcFRHRlZHZWpya2JvamlrT0NqSgpxRTc4RCtNbEJ3RU56eTY1OVJ1SnVZQStMbTJlbkZFSVFwTTRNTmtPM21hUDNwZ0lxcTJIUWNSRU1Ka3c5Y1N6CnRLMDVhU3BkbCtLUGxSblAvMEpDVHdLQmdCUTFLNGpDeEdXdWdSNlRvaWcxbXRYNHRNUDlnZ2JzczRUbExUeisKcWl2OFh4UXkzK1gxMVFWRUlta1FSS0x3TzREMk15Q0tURGdURUl0VU5GaUdFbkVGQjQzckpuRTUybENPQ3ZGNgowaEZMbWJTZjhUMTA1QjlmY3J5eGV5V3NXZG9CVHNOeGFmdkNNZGlZQWxNWDZJWFZDQnUwK0ltQWVFRzNzZjNjClJSOHhBb0dCQUk2azYwQjNka1JCRi9BQ3BNcklNcGl5WUlRZUlrTmUyV0xSNWZLaDFnVURkMTZQSldyU0RTeWYKM1hnUXhpRU1lZURFVGJkVXNrYlA4dFprc3dPM0Q5Z2xUczdCNUhxUTBOS3lTTnFkNXFRS3BkZExFT2IxOXVzbApWbjZTeVJOYlB5S0l2WVhaamx5eGFITE1xM2UrOTNSTkNxcVFlandEVGg1Nk5FZGFoaGJmCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVArSEhReGRUM3I5ZU55NngweTRhT1F3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl6TUZvWERUSTJNVEV3TmpJeQpNakl6TUZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExWmo3SVJHMk03V2E3c2J5aER3R3p5U2FDREVkeXlVQll1cDVldlc3alhPYjBYUlQKQTFCVDE1akNJd2xtNlJjS0djV2p5MmlLanVhRmREcDNWbFRpQVJTMGJKSzNrSzBQVnZiczE5V2hoWC8zdkRpbQpvVVVTY2NZZWNWSTk5Z0ttcklBUEp0TTdVQ0lqNmlXUE1aLzdaRXFWbjJlZmY1NHc1L3dsVWtEalF3TDg4OFBBCjNac3kxdit6NGk0Uk1GU0tMSE1XK3VoYzhzOE9uSWVtamk1aFFrNTJmL0pMNHUxc0tMNmE4Mjc0azB1bEl2d3AKMDhPZ1MrMEF2dDJReDNMcUJkWUp0ZmJtNkx3Y01qbFNvYUsvRllQWDVmREI2Y2ptN1hTeFJibDJEMEZaTjJxdgoyb2N5TTJtS1MwU2JVYkVGQVFGTUJDemMxTGxNT1JnZXBnQXY3d0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSFA2cFVzRDNvQ3V4L2JpQ0htRVltd1l1N2lSTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ1NtZW4wSld1R1pHcm9pWVN5VnFDRURRUStzaTRTTTZPdnlDWTB4dEd4ZXp2WndJRXpPSFRPCkRxaVBydk91YmdVMzkyQWJUb01CeXFOVzk5Y3BWLzZqSzZqcGg4cjY0OVhUK0Q0Y2pmUDVwWmc4VExreE82Z3QKR2YxeDA5ZXAwMkc1UXg0MW1Oc0VVeFdINU5tbVhSVnVaR1dKcW5UZnF3bVVKMm5xWXQvS09tbE5WRzhiVnVEWgpJaHBuZ1YwcUh4ZDZ5bnZJNnpTZ2JxcEQ4YzFReElQVkJtTWJtMTFlZitpLzZWbm5NNzlPMnR4SU41c1NrQnFBClA0N1gzelN4QzRzcXpWV1QxSmpNSThybC9GR2ZRS1JWcXZSUjVwLytRdHZxSXlIdGNJMkNnWTRXODBPTEJWWGMKS1pSaU40dkpHSFZpOTdiTmtidy9iam5lV21XSGlmNXcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQU1vS2cvc3dqanNjMFcybHVkcEM4dWt3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl6TUZvWERUSTJNVEV3TmpJeQpNakl6TUZvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTFjZnY0cDFlUU1nUXZqc0Y4a2NMRDVBTmhoVjcKaTlHbFYwUlVXL3UrdFNXdnRXS3RUMERvR0VWS2lYR1hJVU92S1k3dVJEcHU0cTlkQ3puSlhTQkVmMHcxSVVjTQp2Um5QQWJEWXdkaks3Z1FTK2FCMDdNMDZ3cEJhUGFESGxwSUdIVStWdzE1ODRhZnQyS1YrcEVBTVo1Z045MUVwCkNFQ1JOSlY4K001L21IbnlVTFR0aktnNDk0SEF2NitQbG1LY0gycXJ1d1EzRnd4ZnczRm01RUhFK3MzS0tVd08KTGxFU0l2UnBIUStnR3lrRXhDYlJLZkMzZWgyMEFjN2ZBUGhyTW5wM3p2eEU1TzdEdWtMWW5OMWpnWTUrTXY5MwpaUk9ueHA1d1dTb0lrY2JCdFJyK004Rm9SdFQ4ZGhCT1ZmNjB6Y29iSVEyUVVRcVg4Tm43bGtiYTNRSURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUnorcVZMQTk2QXJzZjI0Z2g1aEdKcwpHTHU0a1RBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBS0cxZzNwb1lScitFeHBKL1VsbWFwWkY5NHc2cjV0d2hYZlo3Zi9WZHN3SmMrWFgKRklsSElVNTdneFY3NlMzUXBYZ1VweWNiSW5zL053QWdGY0JIb0tvVlYxbDNRTFZ4VVFxQTNJbnVZOGU0SHJVVQovVVdQanh5OHhISytkN0o0Z3dzVDhHQ1NJOTlnZExWVXJES0NwZExXckRpMklZRGNRdSszTlNialpXTXBrZVZaClRMbEFUVFV6UXgrTWJYa0N6b0JSc0dML0dQVkhaRU0zb0pVUU1tMDY2Z2E3MTloRk9CT1BFd2lndEtsbUM1TkUKYlM2c0ZXeEFla3kyeW4zT1VGS2dFWHovOGhlbHcvbWtES2JpaUl1cW9FUUJydzVCMGxBeFAySDUwdldDbXhFSQplTk8waFhSaWtWTFd6SkppcHNpOHBRdCsrajJ6b0hGQnc1OUl6L0E9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMWNmdjRwMWVRTWdRdmpzRjhrY0xENUFOaGhWN2k5R2xWMFJVVy91K3RTV3Z0V0t0ClQwRG9HRVZLaVhHWElVT3ZLWTd1UkRwdTRxOWRDem5KWFNCRWYwdzFJVWNNdlJuUEFiRFl3ZGpLN2dRUythQjAKN00wNndwQmFQYURIbHBJR0hVK1Z3MTU4NGFmdDJLVitwRUFNWjVnTjkxRXBDRUNSTkpWOCtNNS9tSG55VUxUdApqS2c0OTRIQXY2K1BsbUtjSDJxcnV3UTNGd3hmdzNGbTVFSEUrczNLS1V3T0xsRVNJdlJwSFErZ0d5a0V4Q2JSCktmQzNlaDIwQWM3ZkFQaHJNbnAzenZ4RTVPN0R1a0xZbk4xamdZNStNdjkzWlJPbnhwNXdXU29Ja2NiQnRScisKTThGb1J0VDhkaEJPVmY2MHpjb2JJUTJRVVFxWDhObjdsa2JhM1FJREFRQUJBb0lCQUhGOEQ2WDI4Qi9ubEt2SApYV0s5dit0bEJ5alVvcDhZalhNRC9OeFBpVzlVTURCVHo3aXd0Z1NjVS9NZWI2SGk4a3RYYXJpaFpGZkZ5OWkzCnRtTlBTODFmd1J5SFFRWHBlM0JrVnN5Z3J5a20xSVBiWC9hTkE5SmhHdVo0UVR0M0RQUG1XWlE2eG9Scnh1RXAKQ1U5Y0NMbTlpRHh2d3g1MFdDRFg4bDJLRVVYNURUK1NpRzdrS3FjTmFzV3hUV2VHczh1K1kweU5KRjV3R3R1awpEY1ZZUUZqZHdMRkd0dkZqMTZyOU03QXRLYnloWDFlWmpEem41QXo2RWJGZDZlaHJVZnRGWFppSGUvWDNmbGRvCnB3aVkyR2FVeUdpcmJCRTZjUFh6aUM5aFNwbnVYUFFWNm1hT1l3b2tCQXhnSjRRV0NkajBZMkNKdUNwY3dtMkcKRmpsSTFnRUNnWUVBMkhuTEg4RmpTNVpibEtrUFdpcFhwMDVobTY1VWI5anJ3akZxU09rY2UveGZyR01PNVB1TwpWNDZuekhQcjJueDJEN0dLbHlKbEwxYWRkcFNDUU5pUUtuUy9kU2tkYXArZmVORDFpSjdRWHFJNlQybmZFTitECnJZK05NWWQ4eStVNG5ndm9iOWp5LzhqSmNUSHpQckoxR1V2UUQzb2o5Ym9aV1BpM0tiYlJjOEVDZ1lFQS9OQXcKZGFUcHBGRGk3cDlmMjhMQStzWUtZU2w3KzV2QXJuQVZmL1NueEdhK0d4TFlOMTZ2UzNYMkhheGl5azBvejJ0MgoxUkdCNW1FUGpFVDJscHNLNm1EUUgyZk5NRk1IcGd2WmsyTHZsN2kzdi9UNEtMeEtiSS8wSW1pbGIreUZ1cjIwCjEwbStYcWhaTEpNb0JxVWhWc0lGMkpQZ0lyL2d2aGR2WFRlRVBoMENnWUVBd0JiREFiaXZEYUdzUGl3T0xXb3AKUVpLeDFsMUpHNzZXNVVqSUVVNlpNZ1B1T1ovazFaZks1VEwyL3R0V1RCZnBBMS85cE1LbW11ejI2UVE2MktQUwp1WG5EY29rN1N5TzlkSTJuY3NYS0RFOVVBcWZsZ3FsenhReitzeGFRekxUb0dvWmlpTzB3STN6ZUU0M0pWTGN5ClpYSDZlK0ZjQzI1Sms4T1BkSHAvUFlFQ2dZQTdxemVFek1PSVVMNys2d2JJNjVKNG5iMWRhVmtsN1lEd3F1dW8KSTZwbEpJckNBUlNmSE8zcXRaQzlPQzZvNk1VMUQzd2dsZDArN3JHb3ZhNGxwYnBSenovUDZjUDRIK0N5UkNHNgpNNk93LzV2KzVtYWIxclVLSW4vUWp6cGN6RXBUNU9xRjFaWGs2WDhDa2tqa0tKMVJ5TUZ3ZUpaeUhTK0NMaTNPCnBvZkQwUUtCZ0dIeVNHazJ0cWU1U1hkWFNRUVREVVo3RWI4eW1mUzFSTTh1TkFEWWZWQTJXbzFuWm8zNEtqZ0MKSzJLajd3Q2tLR1RpbGFwYytXM2tFaVA4VlBmdlpaWWNpeGc2R2pXMEtJRzEvcW10SWhzM1dSNExoV3lLRU4xYgo1blZYalo0KzNTSFJqOWRMMFRrcnJKazkrekVhVE9LandySkpQWkpBVGpzMVV1dWFlUHNkCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQVArSEhReGRUM3I5ZU55NngweTRhT1F3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl6TUZvWERUSTJNVEV3TmpJeQpNakl6TUZvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUExWmo3SVJHMk03V2E3c2J5aER3R3p5U2FDREVkeXlVQll1cDVldlc3alhPYjBYUlQKQTFCVDE1akNJd2xtNlJjS0djV2p5MmlLanVhRmREcDNWbFRpQVJTMGJKSzNrSzBQVnZiczE5V2hoWC8zdkRpbQpvVVVTY2NZZWNWSTk5Z0ttcklBUEp0TTdVQ0lqNmlXUE1aLzdaRXFWbjJlZmY1NHc1L3dsVWtEalF3TDg4OFBBCjNac3kxdit6NGk0Uk1GU0tMSE1XK3VoYzhzOE9uSWVtamk1aFFrNTJmL0pMNHUxc0tMNmE4Mjc0azB1bEl2d3AKMDhPZ1MrMEF2dDJReDNMcUJkWUp0ZmJtNkx3Y01qbFNvYUsvRllQWDVmREI2Y2ptN1hTeFJibDJEMEZaTjJxdgoyb2N5TTJtS1MwU2JVYkVGQVFGTUJDemMxTGxNT1JnZXBnQXY3d0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGSFA2cFVzRDNvQ3V4L2JpQ0htRVltd1l1N2lSTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ1NtZW4wSld1R1pHcm9pWVN5VnFDRURRUStzaTRTTTZPdnlDWTB4dEd4ZXp2WndJRXpPSFRPCkRxaVBydk91YmdVMzkyQWJUb01CeXFOVzk5Y3BWLzZqSzZqcGg4cjY0OVhUK0Q0Y2pmUDVwWmc4VExreE82Z3QKR2YxeDA5ZXAwMkc1UXg0MW1Oc0VVeFdINU5tbVhSVnVaR1dKcW5UZnF3bVVKMm5xWXQvS09tbE5WRzhiVnVEWgpJaHBuZ1YwcUh4ZDZ5bnZJNnpTZ2JxcEQ4YzFReElQVkJtTWJtMTFlZitpLzZWbm5NNzlPMnR4SU41c1NrQnFBClA0N1gzelN4QzRzcXpWV1QxSmpNSThybC9GR2ZRS1JWcXZSUjVwLytRdHZxSXlIdGNJMkNnWTRXODBPTEJWWGMKS1pSaU40dkpHSFZpOTdiTmtidy9iam5lV21XSGlmNXcKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUtOekZnMldYaDg4NHZDTlpSazdmbzB3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TVRFd056SXlNakl6TUZvWERUSTJNVEV3TmpJeQpNakl6TUZvd0pURWpNQ0VHQTFVRUF3d2FLaTVqTWk1b2RXSmliR1V0WjNKd1l5NWphV3hwZFcwdWFXOHdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzY1RXF2dnRLVEZaMnFRK0hpcXR1c3VSTGEKSHdpRERlS0dIQysyNW13Qit6RW9jMHpQZC9kemQrZnhNZzBZdWc3V2hQRGVOZE9OcXY1YjQ0WU81WGdWUjZONApGaWwvMUx0S1NOWGx5VTFTcmN0aDFUZjd6WjVmRTVzRVVETnR6ZjVhRWhXWU5PNGVMT3NlNlNMMlN1bEdCNHBVCi8rbmFUajEwSU1XeEJBcTN6VXJCeG1tOTVqUDE2ckFGRm1MRnJCRGdoRGJYaUNrRG5GUGEwdEdYSUJFeEF0bGMKV2xGVk5xZ241SGh5bnI3aFlnbVR2ZzZXVThlQWhVUVVRSTZSUEh5M2I5TEpnR0VoWE1DVHQ4czVRbzNoVGRwTQo5Q0VUdUVpS2FrMEZxVWZRTHBJSWxJZVJvSUJ4dVFPMEFBRzhpWmFEQkpMKy83Wkx1ckhSV2ptSjY2SXZBZ01CCkFBR2pnWWd3Z1lVd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGSFA2cFVzRDNvQ3V4L2JpQ0htRQpZbXdZdTdpUk1DVUdBMVVkRVFRZU1CeUNHaW91WXpJdWFIVmlZbXhsTFdkeWNHTXVZMmxzYVhWdExtbHZNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFCYzMreXdPU1lsZUpGYUhDS2tmZkZ5KzlOVkFrSEUyTWpYNXZ4UmdocWoKUUJ3a1ZlMytPU2JIMStWYWN5eW00ZHNkQnNwV1k1S0RnZHB6QjcrZWlXcTloVnpkRWdhSGxPRytJVGU3TFNJdgpZdDg4VFF5eGZOazB4ZDlJRFlaUGFjbHdvK1c5a1pzeVlCcWY4T2R6b1d2WU1CMUNTYXBCaXNtOXBlTXZQcUNWClI3U1o4WjZsaHd6ME5SMFdIaDIrVTN0U0I2UWJ4Z1RVOEdwR0RZbnBoajVvYUtpbU9oUVY0dFB1eDFXTE9YdFgKZkZqSE9PVnRtNUNWWVNiK2pocjMvaFRjWEd1RG1LT2VsWUhIZGlpZGRxTUhlSGc5cDdpU004aytjaWVGeWtwVgpMcUUwUW40YWg2UzFCQnVMZWxPVVY0TTRLajFCUkF2dW1DbjdGMlhiVUFxdwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdXVSS3I3N1NreFdkcWtQaDRxcmJyTGtTMmg4SWd3M2loaHd2dHVac0Fmc3hLSE5NCnozZjNjM2ZuOFRJTkdMb08xb1R3M2pYVGphcitXK09HRHVWNEZVZWplQllwZjlTN1NralY1Y2xOVXEzTFlkVTMKKzgyZVh4T2JCRkF6YmMzK1doSVZtRFR1SGl6ckh1a2k5a3JwUmdlS1ZQL3AyazQ5ZENERnNRUUt0ODFLd2NacAp2ZVl6OWVxd0JSWml4YXdRNElRMjE0Z3BBNXhUMnRMUmx5QVJNUUxaWEZwUlZUYW9KK1I0Y3A2KzRXSUprNzRPCmxsUEhnSVZFRkVDT2tUeDh0Mi9TeVlCaElWekFrN2ZMT1VLTjRVM2FUUFFoRTdoSWltcE5CYWxIMEM2U0NKU0gKa2FDQWNia0R0QUFCdkltV2d3U1MvdisyUzdxeDBWbzVpZXVpTHdJREFRQUJBb0lCQUVRc05sbzVQMUxMMWNGZwpGYXU3SzNxcjRBYVV2MlFlMG55ZEY0S2VOdFBhTHlwVU5MYVJTa0JpZ3NibXZRUkNDbHVTRHRMZnk1V254RFQ4Cm45QWJRRnh5ejF4a3FTcXFETStpRmZSR0krQis2T3Q4L1hqcW5sU01NRVc0ZzZvUU5ESGkydUcwblErQXp4dHQKYTRWditmdkRrR0JGSWFheVY1UmV4LzQwUFR5aUUwWDdtRnVjcU9vUjd6aTg5cm1rSHMwNmcyU2dBYVdPZVdFYQpCZkhXQXBJMVVsOVBpNDJtanJZNy9PNytBRFFXVjRuaTFmL0VkNk1YNzA0VURYaThCRTJabGRXV2ZUb0ppVThxCmFlYktPU29UTDAwaW5iNGowRVZkUjQxVmtQMmZZUk9JY1pzWlluSzlMek96d0dMR21nNDJlL0ltWE5pc0hFTXYKMWxIak54RUNnWUVBK0FiYU5zVktRMnZ6MThnNUx3U05qWHFVeDRWVkFKN2tWci9hSVBUTkVtVTlnYklhbWFGZwpnSHVRVHVwUEFkd3NnL0laaWdCS250VHYrR2JWc3BDYnhmT1YySVo3RGJidlk1VDN2N3djVS9QSlVvMUNLZFRECnhKRGJ2MVNJQ25RMDZsSk9vNW9OdHgyZ0xiMzZLN2ExTWFNSWhmTHZzVzc1dTR3N3N0TDBXdU1DZ1lFQXdPWlQKZUNMRXpFc05ndjF5R2JSZDdNY2lTMGovTWx0c0htOWlFcW1GVjhMQlg4RUVLeURrVHRDN0JFR0ordnE2N3hEaApNYkhxZnV3TnVHbVlrWXc3RG9QM0VYY3JFMTlqb0J2eDN3NkJzeC9vbnA1MDM5OGpwb0lZcjBuNCtNby9uaUQxCkVqWTFTS0dSS0lsTWZaQmpjOEJOZjdyQ2IyYmljdEdTZ1hodXdVVUNnWUFnRVBxN1pBeHk1UTBVazgxWTE5VFoKT3NUcmVzQi9vUXRTYitGcXExdXNDaXpHak5sRmpZaWxjOVEzYjdHaFF1NzZiQjJES3dCNnducjMrWXVkVjNiYwpROTdXcktSU0pKbVVuVmpla0JwMWZDcEdJdjh2MjFNb0liWlhhVDFoWko3R3dMZHNEV25DaC9FQ21QSTBIcDRVCmVjaUxVTnBPYlZPYVBNb25GNEVDRXdLQmdGVHBEZlRqMlJ6VUxLNXNRYjF1MTZsU1BwWkZHNUJmRGNpWDN1TzQKR3luMllJaDF2Zy85K29GMi85dHZ2ZnpzUVR6YWdVWU91dG9EcmtadXRPbmNnR0p6VkY0cnhwcFFjdG9YY3ZCcwp3a3JHME82QmNaRForQ2RqUE5wc0JWditLdUxBUHlBMUhGOU1QMGxJcHBMZTYrZ1h6Z1ZiZ0JycGZ1UnJ1OEdoCjhaN0JBb0dCQUo0OXRiaVFqNlRUZUxuVHNUN0hEODJ1RW9jYjFJTTFabWpmcDc5TEFPT3BWWjVOc3F2NEptV08KNy95cE9tM0dPaDlCYXpIVDAwSDNxWDZlanV1aGZWWk1MNjQvNDRER2VhQWNhUGlsVDFyUGZNenM2Q3Vsdm1CRAptUjB1WDUrT3ZRd2JSQVNuVjlHMjZvK292VHA0d3lHWTVCOUZLczFLUDJDUThzMG9WRVA5Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: c2
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "12"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-wireguard: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"

  kube-proxy-replacement: "false"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-host-port: "false"
  enable-external-ips: "false"
  enable-node-port: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  ipam-cilium-node-update-rate: "15s"
  cluster-pool-ipv4-cidr: "10.2.0.0/17"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "false"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/run/cilium/cgroupv2"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: c2
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/clustermesh-apiserver/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumexternalworkloads/status
  - ciliumnodes
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumendpoints/status
  verbs:
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumexternalworkloads
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  - namespaces
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clustermesh-apiserver
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: clustermesh-apiserver
subjects:
- kind: ServiceAccount
  name: "clustermesh-apiserver"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/clustermesh-apiserver/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver-metrics
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
    app.kubernetes.io/component: metrics
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: apiserv-metrics
    port: 9962
    protocol: TCP
    targetPort: apiserv-metrics
  - name: kvmesh-metrics
    port: 9964
    protocol: TCP
    targetPort: kvmesh-metrics
  selector:
    k8s-app: clustermesh-apiserver
---
# Source: cilium/templates/clustermesh-apiserver/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  type: NodePort
  selector:
    k8s-app: clustermesh-apiserver
  ports:
  - port: 2379
    nodePort: 32379
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
        container.apparmor.security.beta.kubernetes.io/mount-cgroup: "unconfined"
        container.apparmor.security.beta.kubernetes.io/apply-sysctl-overwrites: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Required to mount cgroup2 filesystem on the underlying Kubernetes node.
      # We use nsenter command with host's cgroup and mount namespaces enabled.
      - name: mount-cgroup
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: CGROUP_ROOT
          value: /run/cilium/cgroupv2
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh and mount that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-mount /hostbin/cilium-mount;
          nsenter --cgroup=/hostproc/1/ns/cgroup --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-mount" $CGROUP_ROOT;
          rm /hostbin/cilium-mount
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      - name: apply-sysctl-overwrites
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        env:
        - name: BIN_PATH
          value: /opt/cni/bin
        command:
        - sh
        - -ec
        # The statically linked Go program binary is invoked to avoid any
        # dependency on utilities like sh that can be missing on certain
        # distros installed on the underlying host. Copy the binary to the
        # same directory where we install cilium cni plugin so that exec permissions
        # are available.
        - |
          cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
          nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
          rm /hostbin/cilium-sysctlfix
        volumeMounts:
        - name: hostproc
          mountPath: /hostproc
        - name: cni-path
          mountPath: /hostbin
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_CHROOT
              - SYS_PTRACE
            drop:
              - ALL
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_MODULE
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /run/cilium/cgroupv2
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To mount cgroup2 filesystem on the host
      - name: hostproc
        hostPath:
          path: /proc
          type: Directory
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /run/cilium/cgroupv2
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.2@sha256:52f70250dea22e506959439a7c4ea31b10fe8375db62f5c27ab746e3a2af866d"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/clustermesh-apiserver/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clustermesh-apiserver
  namespace: kube-system
  labels:
    k8s-app: clustermesh-apiserver
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: clustermesh-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: clustermesh-apiserver
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: clustermesh-apiserver
        k8s-app: clustermesh-apiserver
    spec:
      initContainers:
      - name: etcd-init
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
          rm -rf /var/run/etcd/*;
          /usr/local/bin/etcd --data-dir=/var/run/etcd --name=clustermesh-apiserver --listen-client-urls=http://127.0.0.1:2379 --advertise-client-urls=http://127.0.0.1:2379 --initial-cluster-token=clustermesh-apiserver --initial-cluster-state=new --auto-compaction-retention=1 &

          # The following key needs to be created before that the cilium agents
          # have the possibility of connecting to etcd.
          etcdctl put cilium/.has-cluster-config true

          etcdctl user add root --no-password;
          etcdctl user grant-role root root;
          etcdctl user add admin-c2 --no-password;
          etcdctl user grant-role admin-c2 root;
          etcdctl user add externalworkload --no-password;
          etcdctl role add externalworkload;
          etcdctl role grant-permission externalworkload --from-key read '';
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/state/noderegister/v1/;
          etcdctl role grant-permission externalworkload readwrite --prefix cilium/.initlock/;
          etcdctl user grant-role externalworkload externalworkload;
          etcdctl user add remote --no-password;
          etcdctl role add remote;
          etcdctl role grant-permission remote --from-key read '';
          etcdctl user grant-role remote remote;
          etcdctl auth enable;
          exit
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      containers:
      - name: etcd
        image: "quay.io/coreos/etcd:v3.5.4@sha256:795d8660c48c439a7c3764c2330ed9222ab5db5bb524d8d0607cac76f7ba82a3"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/local/bin/etcd
        args:
        - --data-dir=/var/run/etcd
        - --name=clustermesh-apiserver
        - --client-cert-auth
        - --trusted-ca-file=/var/lib/etcd-secrets/ca.crt
        - --cert-file=/var/lib/etcd-secrets/tls.crt
        - --key-file=/var/lib/etcd-secrets/tls.key
        # Surrounding the IPv4 address with brackets works in this case, since etcd
        # uses net.SplitHostPort() internally and it accepts the that format.
        - --listen-client-urls=https://127.0.0.1:2379,https://[$(HOSTNAME_IP)]:2379
        - --advertise-client-urls=https://[$(HOSTNAME_IP)]:2379
        - --initial-cluster-token=clustermesh-apiserver
        - --auto-compaction-retention=1
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: HOSTNAME_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - name: etcd
          containerPort: 2379
          protocol: TCP
        volumeMounts:
        - name: etcd-server-secrets
          mountPath: /var/lib/etcd-secrets
          readOnly: true
        - name: etcd-data-dir
          mountPath: /var/run/etcd
        terminationMessagePolicy: FallbackToLogsOnError
      - name: apiserver
        image: "quay.io/cilium/clustermesh-apiserver:v1.14.2@sha256:0650beac6633a483261640b6539c9609f5a761f4ab4504fd1e6ffe7f2bb82e9a"
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/clustermesh-apiserver
        args:
        - --cluster-name=$(CLUSTER_NAME)
        - --cluster-id=$(CLUSTER_ID)
        - --kvstore-opt
        - etcd.config=/var/lib/cilium/etcd-config.yaml
        - --enable-external-workloads=false
        - --prometheus-serve-addr=:9962
        env:
        - name: CLUSTER_NAME
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-name
        - name: CLUSTER_ID
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: cluster-id
              optional: true
        - name: IDENTITY_ALLOCATION_MODE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: identity-allocation-mode
        - name: ENABLE_K8S_ENDPOINT_SLICE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: enable-k8s-endpoint-slice
              optional: true
        ports:
        - name: apiserv-metrics
          containerPort: 9962
          protocol: TCP
        volumeMounts:
        - name: etcd-admin-client
          mountPath: /var/lib/cilium/etcd-secrets
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      volumes:
      - name: etcd-server-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-server-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-admin-client
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: clustermesh-apiserver-admin-cert
              items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
      - name: etcd-data-dir
        emptyDir: {}
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "clustermesh-apiserver"
      serviceAccountName: "clustermesh-apiserver"
      automountServiceAccountToken: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: clustermesh-apiserver
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.2@sha256:a89030b31f333e8fb1c10d2473250399a1a537c27d022cd8becc1a65d1bef1d6"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-secrets-namespace.yaml
# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
